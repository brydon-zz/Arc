<?xml version="1.0" encoding="UTF-8"?>
<XMI verified="false" xmi.version="1.2" timestamp="2014-04-05T22:08:21" xmlns:UML="http://schema.omg.org/spec/UML/1.3">
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://umbrello.kde.org</XMI.exporter>
   <XMI.exporterVersion>1.6.1</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.metamodel xmi.version="1.3" href="UML.xml" xmi.name="UML"/>
 </XMI.header>
 <XMI.content>
  <UML:Model isSpecification="false" isAbstract="false" isLeaf="false" xmi.id="m1" isRoot="false" name="UML Model">
   <UML:Namespace.ownedElement>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="folder" name="folder"/>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="datatype" name="datatype"/>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Logical View" name="Logical View">
     <UML:Namespace.ownedElement>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Datatypes" name="Datatypes">
       <UML:Namespace.ownedElement>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="B1HTGn9qFKpc" name="int"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="o5ZfChsNbFVd" name="char"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dXgnlBJuDYMR" name="bool"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LVHZn7BbCjEM" name="float"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Q7kzKDbviHgU" name="double"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="QzMbXi2tBISy" name="short"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PbYZKmwjreg9" name="long"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rH4aWl2vkOWG" name="unsigned int"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5X9GpZFE8llR" name="unsigned short"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XfANJoW94bhY" name="unsigned long"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KhT450K8VRPK" name="string"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ycW7NHYsxgDE" name="array"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SkNWJ25bjYfn" name="tuple"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Wyv1NIJKupRF" name="dict"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5x62bJE31caI" name="object"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cdtM9X7gT2fq" name="set"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JzADoZRtUXt5" comment="&quot;Simulator Class for Intel 8088 Architecture" name="Simulator">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="o87qif8KI0eR"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="leBHpG4xBTMX" type="KhT450K8VRPK" name="_PROGRAMNAME"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="J5rbd0fwj8SX" type="LVHZn7BbCjEM" name="_VERSION"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="OpIRPCt8r2Ne" type="KhT450K8VRPK" name="_DESCRIPTION"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="ISbSvvxE0onb" type="KhT450K8VRPK" name="_WEBSITE"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="mSYWYy1unJJC" type="5x62bJE31caI" name="_LICENSE"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="UCKLDixTAZv5" type="KhT450K8VRPK" name="_PATHDELIM"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="SsHTe44RUav0" type="KhT450K8VRPK" name="_CSSFILENAME"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="YwsMDBYhLt0Y" type="KhT450K8VRPK" name="_INTERFACEXMLNAME"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="Zy2jVvmvo3MQ" type="LVHZn7BbCjEM" name="_DOUBLECLICKTIME"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="5PrXzkXYePsq" type="KhT450K8VRPK" name="_PATH"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="mxQ4v4USoXQa" name="setBreakpoint">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="4ONfHyTTcH3O" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="erPRhMyoQNpJ" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CeoaldhYZ5aU" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="82xwaLWsaBri" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tjwSmWwuZrq7" comment="Opens up a file dialog to select a file&#xa;then reads that file in to the assembler." name="openFileDialog">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ngtQwwmpdgHQ" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DKxlToUYApDR" type="KhT450K8VRPK" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CBKj19oETmxv" comment="Opens and reads in the file fileName" name="openFile">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="TYhuIdpr2GaH" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="aPTjEeA2L3QF" type="KhT450K8VRPK" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="yC4bsJ12UKkV" type="KhT450K8VRPK" value="" name="fileName"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vkHEmhTkrVJh" comment="When the separator label is clicked, expand the viewport." name="clickSeperator">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="tsBrJ85MuBPu" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="oLhGdRk4yRyG" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4m752fKxQb9A" type="KhT450K8VRPK" value="" name="a"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Gcs75BmtUT87" type="KhT450K8VRPK" value="" name="b"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qjsEKzOYcEff" comment="Highlight the syntax of the text in the codeBuffer.Get's called by tokenizer to handle each token.Let slide.&#xa;            This is called if there is incorrect indentation, etc,&#xa;in the source being read" name="syntaxHighlight">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="JlkqtJc6zlEo" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QPXssf0lX9ao" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Fg87rX2fGsuY" type="5x62bJE31caI" value="" name="f"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rG6RVj7v8enz" type="B1HTGn9qFKpc" value="" name="lineOffset"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="IGTX8N5zcCP7" comment="Change the style of the separator label when hovered on." name="hoverOverSeperator">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="7aScJf0MWSL7" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vW228n1RXjFO" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2rU1cintwFQ2" type="5x62bJE31caI" value="" name="a"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="aV0CfPJZtJb1" type="5x62bJE31caI" value="" name="b"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9705MQ6wt69Z" comment="Change the style of the separator label when hovered off." name="hoverOffSeperator">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="hUkyHBWjaPhR" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="VS8OmhNrHpRa" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="URuytE50L56h" type="5x62bJE31caI" value="" name="a"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="TCdNGkwlB27v" type="5x62bJE31caI" value="" name="b"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dnSyqYdKiEhy" comment="Updates the line number label on the left of the code block.&#xa;get's called whenever the lines change" name="updateLineCounter">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="wgCW5rxgePcT" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zbh8bm3GEnCT" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vFndSSZP1EXa" comment="Simply put, updates the register, flags, and memory gui elements&#xa;with their respective values. if the user's clicked the runAll button, then theres no point updating every iter. it's inefficient" name="updateRegisters">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="jiSL65o1KZdk" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0YqEL2fFirlo" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zC90RgaPEQcX" comment="Called at construction, creates the help box including a TreeView to&#xa;        display assembly instructions and a text view to display the selected&#xa;instructions documentationCalled whenever the selected item in the TreeView." name="makeHelpBox">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="SyJlVwVV7dVW" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QHm97VvqEN9K" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="J4vWSV1tnm0u" comment="Names need set for CSS reasons only" name="nameGuiElementsForCSS">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="zvo6YHcqLWKm" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HviTGrlhn5SJ" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1Lfm5deNWKqm" comment="Connects handler signals to GUI elements GUI elements Key events!" name="connectSignals">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="IL7bpRNpl0bq" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CcTxftEen2lJ" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dED9Y2uicNgH" comment="Binds critical GUI elements from the builder object&#xa;to variable names. self.regFlags = self.builder.get_object(&quot;regFlags&quot;)" name="assignGuiElementsToVariables">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="sAed8GUkSfr0" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Fuv2vgLD0Tmp" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hljJ7PaMHWMC" comment="Constructs the various text tags used&#xa;to style text within textviews." name="setUpTextTags">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="s68Kk0JRj2jq" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="AfNA8A0zIecQ" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PHAelWrwCC4I" comment="Updates the status label at the bottom of the screen,&#xa;including current line number, status of the simulation, etc." name="updateStatusLabel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="I1mSCqlWt09Y" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="K4Hchs1Xy9qg" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="798p9pdW6oAs" type="KhT450K8VRPK" value="" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="s83pFtVN0bA7" comment="Updates the stack gui element" name="updateStack">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="v3Wm4dKwlMj0" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="OndVboLsn5Kz" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="FFLEoVLDJzgs" comment="Binds various textBuffers to local variables Set up the text behaviour self.code.set_wrap_mode(Gtk.WrapMode.WORD)" name="setupTextBuffers">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="f45OQoMe1gso" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="n1ka63Yz62mA" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="BB1SAhJvg1Uk" name="hoverOverFileButton">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="BXnhtqa2D6BJ" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="42jB2TJhWO3u" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="BPWA5MyFYxfg" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="cycI04226kD8" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="T7W15BhhAH08" name="releaseFileButton">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="1rLs8uaE2JYG" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="L0APiMVurIZi" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="69lKEubh17g6" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ILmQdkYykhMT" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="D7xFEbJXw5xX" name="hoverOffFileButton">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="my8SG8HSiJfa" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pUWY9qzAhK2p" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ca2EuaU5gPIu" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ycRvfNSTrw1y" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="s7eYVwQTYqOC" comment="Creates the file buttons on the bottom of the screen: includes&#xa;New, Open, Save, Run All, Step Once, Stop Stimulation" name="makeFileButtons">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="EDKwVzVL59ra" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Dpf2lg0Wc8ys" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5H3c7QmIFRKy" name="clearIcon">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="vasA1B94Rblq" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="5IShOQZccrX5" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="p2Qu9FUEUVoa" type="5x62bJE31caI" value="" name="widget"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0IQa8vfxx3p6" name="pressNewButton">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="G0Lu9CXR9FAi" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GHJkm5IigBsf" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="KzilZTZXky5s" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tinpjctztAhd" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hiDReIHXy4Kh" name="pressOpenButton">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="csJuKmLymBj1" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="eCeVMM8aKSUR" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="e2snF0UwihLM" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ycsweAcGMGlj" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ADwstFDps3jU" name="pressStepButton">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ln56JAkaaNc8" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DLlYcUFCMW7g" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="IQc2aM2kXwcO" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="BnD3qxW2GHYs" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hcsCYTbkGol5" name="pressAllButton">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="5EYT8sBBxQlO" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="jH50WdqGQvMh" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="36HcRsk6UdJ1" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="6ulKgWNQmSOI" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GWVj7mkBgVVM" name="pressSaveButton">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="rN7CyvbPvBnH" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ztklJ64NLaqR" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="TzaQOMmeqFNx" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="158hab2aSmJm" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XZtLpFIqKOWt" name="pressStopButton">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="q9rwQ80b3Rh7" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0YRQIkA98HJ4" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DuR66ENbnEva" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="TDPmavfYR6yj" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="f2gRHbzinOUN" comment="Saves the fileToSave.  If the fileToSave hans't been previously&#xa;        saved or if saveAs == True then a dialog propmts the user for a&#xa;        location else it'll save in the same place it has been historically&#xa;saved.Fatal error popup" name="saveFile">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="nSiarCx8KqrX" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="J9viDtQ42H0R" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Pz2QQiX4kCTz" type="dXgnlBJuDYMR" value="" name="saveAs"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kHZkWa9tZAKx" comment="Resets the simulation and code self.sysCodes = as88.getSysCodes()" name="new">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="UHqm7fKpwtaQ" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="spzczScntILk" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="RhKyrcujPtKP" comment="If the simulation isn't running, then it is started and run in full&#xa;            with the GUI only being updated afterwards.&#xa;&#xa;            If the simulation is running, then it runs until completion from&#xa;            it's current state, with GUI only being updated after.&#xa;&#xa;            If the simulation has already run, then it prompts the user if he&#xa;wishes to restart, and does so. If we aren't waiting on a restart if We're not running, start If we are running, we got an arrow to get rid of" name="runAll">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="PljJcHk2z40q" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="KwCDEXvgojTu" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="esY3msS4meFy" comment="Presents a dialog asking the user if they wish to restart the&#xa;simulation" name="restartPrompt">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="rIRoKRdyKB14" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="A8cwr5qEoaYP" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1U6n6LjERLBI" comment="Loads in the code to run, intialises all local variables and labels&#xa;        as set up in the code. First pass for forward references, and setting&#xa;        up local vars, etc. The self.running flag is set so the user can step&#xa;thru accordingly." name="startRunning">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Toblxany4tj9" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="PzXDX3cNL3Bd" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CSNdoWtDUOO1" comment="Defines what happens if the step button is clicked.&#xa;        This is fired if the user interacts with the GUI to step in anyway&#xa;        (i.e. key combos, menu items, buttons, etc.)&#xa;        This calls the step() function to execute a line of code&#xa;        and performs all graphical duties before and after executing the code.&#xa;        If the code has already been run to completion this prompts the user&#xa;        asking if they wish to restart.&#xa; Scroll to view the line insert a > remove the > from the previous line, -1 means first linePrompt the user to restart" name="stepButtonClicked">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ZzIbq2i0S4dG" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="R1Ok2aNTMyCK" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="aVR4tq4LrS5r" comment="Handles Key Down events checks for key combinations.&#xa;            Enter -> Step&#xa;            Ctrl+Enter -> Run All&#xa;            Shift+Enter -> Run All&#xa;            Ctrl+N -> New File&#xa;            Ctrl+S -> Save&#xa;            Ctrl+O -> Open File&#xa;            Ctrl+Q -> Quit File&#xa;            Ctrl+Shift+N -> Save As&#xa;            Ctrl+X -> Stop Running&#xa; This is when numLock is on" name="onKeyPressEvent">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="NQRqMx7HCNfU" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0TJNPVfwTvYH" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vGIOItetO6vG" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wzblQeaQ5tlV" type="5x62bJE31caI" value="" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HILdMHtGESzc" comment="Outputs the result of a machine query.&#xa;        Different then regular output since we have to do a few simple checks&#xa;before we print The machine shut down without signalling an error must've occurred" name="outPutFromMachine">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="JrIYJH8OqBbH" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7Z3CTmfqD7eX" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4joE7SjMi4z4" type="KhT450K8VRPK" value="" name="string"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="yG59LhgORScY" comment="Outputs the message &quot;string&quot; to the designated textview&#xa;in the GUI" name="outPut">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2GtThWzbprAD" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="uLsaQpchguD0" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="BMO0XxHTCLaV" type="KhT450K8VRPK" value="" name="string"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hmvLh8LsUis0" comment="Empties the text components of all relevant GUI elements" name="clearGui">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="guXUmhhRTam8" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="d8RnT2JTGCxx" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="j6zBmp9NxbBO" name="updateWindowTitle">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="1UqS5bbmhYvR" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="bUsrenpLhKpR" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="N5oJezhFTX68" comment="This function gets called everytime the 'code' text changes.&#xa;Syntax Highglighting is applied on the changed line appropriately." name="textChanged">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="j6PCdTIwNhwY" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="KtR0DEPCiGfl" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rEVWmRx7WlQA" type="5x62bJE31caI" value="" name="widget"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vJlcZOLOarsK" comment="Makes an About Dialog displaying basic info about the program&#xa;(Name, Copyright, version, logo, website, license) TODO: Credit &quot;\nIcons Courtesy of http://gentleface.com/free_icon_set.html&quot; for the icons" name="makeAboutDialogue">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="mlV7SPgMjPwG" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="IpRoZswIwLSZ" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nHdL8VfQJ6Cs" comment="For printing the tooltips in the memory textview if the tooltip is focus from the keyboard, get those bounds else get the bounds by the cursor" name="memoryToolTipOption">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Q2cYsEshJId1" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="w88sRaQELvLm" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Jz60O2E9HrSQ" type="5x62bJE31caI" value="" name="widget"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="L7oeC1W87ezZ" type="B1HTGn9qFKpc" value="" name="x"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CPnWI6Gb4MZS" type="B1HTGn9qFKpc" value="" name="y"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Moadd23y8qcK" type="KhT450K8VRPK" value="" name="keyboard_tip"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="r6SyiPVvoGR5" type="KhT450K8VRPK" value="" name="tooltip"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NheR1ErN0P0d" type="KhT450K8VRPK" value="" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="i9uUPJXk0C9z" comment="Gets called when the hex switch is toggled,&#xa;        this switch changes it so the registers, stack, and memory all display&#xa;in either hex or ascii" name="hexSwitchClicked">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="K9mJJuIhtd5H" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="OzMOOL1mLdKB" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="qAs9TV89c1b2" type="KhT450K8VRPK" value="" name="button"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="w64HiMQYXGfy" comment="Ends the current simulation, if i=1 then succesfully, otherwise&#xa;there was an issue Stop the machine if it isn't already stopped. Normally the machine stops first, but sometimes the gui get's the signal first. For instance, if the stop button is clicked" name="stopRunning">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="XqB26o0qX5AI" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="jl7MkgM5p6O6" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0entHs9DxBSf" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="mWLZcjgdNTWd" comment="Get's input by creating an entrydialog.&#xa;Interfaces with GetChar system trap" name="getChar">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="pN0KSAaCevmG" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="KdoHoFuK53MA" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cStytObD1PSo" comment="Colour codes the items in the memory for easy identification" name="colourMemory">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="y1ScxEqZekXY" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="cK8iLSq8pqTG" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="66j5UCr6Uzmo" comment="Determines whether or not to exit, if there is an unsaved file or&#xa;        active simulation it prompts the user. Then decides whether to exit&#xa;the program or not based on the users response. Returning true tells GTK to not kill this win Returning true tells GTK to not kill this win" name="exit">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="AW2dToRtPN7n" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ScwFQNTMPuwK" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="8ntlVPHZT0ex" type="KhT450K8VRPK" value="" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="laA8U4SbrJMK" comment="The entry point." name="main">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="gbtAbW7m07NT" type="KhT450K8VRPK"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="JzADoZRtUXt5" xmi.id="o87qif8KI0eR" parent="5x62bJE31caI" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="woLJBS6u0G2V" comment="A basic class that implements the readline interface.&#xa;Useful for working with Tokenizer.&#xa;It takes a single line string as an argument and places it in the object.&#xa;The readline function then just returns that line.&#xa;&#xa;Copyright (C) 2014 Brydon Eastman&#xa;&#xa;This program is free software; you can redistribute it and/or modify&#xa;it under the terms of the GNU General Public License as published by&#xa;the Free Software Foundation; either version 2 of the License, or&#xa;(at your option) any later version.&#xa;&#xa;This program is distributed in the hope that it will be useful,&#xa;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xa;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xa;GNU General Public License for more details.&#xa;&#xa;You should have received a copy of the GNU General Public License along&#xa;with this program; if not, write to the Free Software Foundation, Inc.,&#xa;51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Or by&#xa;email to brydon.eastman@gmail.com.&#xa;" name="ReadLiner">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="JS48mOTQzKaa"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="YQVtHWSoSSXv" type="KhT450K8VRPK" name="string"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="NHo9IBaNaPsZ" type="dXgnlBJuDYMR" name="EOF"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uEBrYlQLPk7D" comment="ReadLiner(string) creates an object compatible with the readline&#xa;interface. Such that the first call to ReadLiner.readline() returns string&#xa;and any subsequent calls return an empty string.&#xa;" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="H2mhkus8Fk0A" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QNstutWvy4tJ" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="cLwcsjNkvYcR" type="KhT450K8VRPK" value="" name="string"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bW3ZYwrAInl8" name="readline">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="q9X6uIEMQ7j4" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="U8sNeSovUbaF" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="VQLi9LskqwIO" type="B1HTGn9qFKpc" value="" name="size"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="woLJBS6u0G2V" xmi.id="JS48mOTQzKaa" parent="5x62bJE31caI" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZXx26WFZwaI3" name="EntryDialog">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="p5HjeZnYiZIk"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YFyEmExPbYDd" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="020ZYDCgFkaZ" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="94auKrygWtfR" type="JzADoZRtUXt5" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="aNCOKepsrl5d" type="KhT450K8VRPK" value="" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="aZD6QsV0DfMX" name="run">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="sef7MGewnr0D" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HBO8vRjtRhSz" type="JzADoZRtUXt5" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Package visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="u8ok468tDfz5" name="Gtk">
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="u8ok468tDfz5" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xEPLJ8NqdJqk" name="Dialog"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="ZXx26WFZwaI3" xmi.id="p5HjeZnYiZIk" parent="xEPLJ8NqdJqk" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="iWDvBZRTjpZc" name="Intel8088">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="GHVfyxepZIwv"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="PNYnONh9Zr1E" type="B1HTGn9qFKpc" initialValue="0" name="_OVER"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="KIHbvJOlpPQa" type="KrCnUKAPQR0U" name="as88"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="WHcjRiPo5vaU" type="Wyv1NIJKupRF" name="flags"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="JHbs8a4RrK0m" type="Wyv1NIJKupRF" name="registers"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="dOVSmv0ICczc" type="ycW7NHYsxgDE" name="stack"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="JPQOI0qbFQRO" type="ycW7NHYsxgDE" name="lookupTable"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="0UnponbPA4pw" type="Wyv1NIJKupRF" name="localVars"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="ypCAP9kiYB7p" type="ycW7NHYsxgDE" name="addressSpace"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="9vQPLqlMKY96" type="Wyv1NIJKupRF" name="DATA"/>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="LlTVnGPl5bwS" type="Wyv1NIJKupRF" name="BSS"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xnXW5RQb0GwR" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="QpqArzqnlLJq" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="6QZT7bzM4wHK" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="mhSnxMC4nlVu" comment="Z: zero flag, S: sign flag, O: overflow flag, C: carry flag,&#xa;A: auxillary flag, P: parity flag, D: direction flag, I: interrup" name="restart">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="WkvH5D5quXbs" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="LSEPMWimJWu8" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="snufWNXrpkFB" comment=" This for Loop is gonna go thru the self.lines, set up a nice lookUp table for jumps and record program start and end. and set up some memory stuff.FIRST PASS Looping thru every line we will go thru, at most, 4 modes a &quot;head&quot; mode - where constants are defined      eg _EXIT = 1 etc. a &quot;text&quot; mode (&quot;.SECT .TEXT&quot;) where the code is located      on the first loop thru we just keep track of where this is,      and set up a jump table a &quot;data&quot; mode (&quot;.SECT .DATA&quot;) where variables are defined      str: .ASCIZ &quot;%s f&quot; a &quot;bss&quot; mode (&quot;.SECT .BSS&quot;) where memory chunks are defined      fdes: .SPACE 2 ignore comments record where the .SECT .TEXT section starts, and ends ends, we've gone one too far starts we're 1 too short Spliting on a colon, for defining vars, or jumps a : in .SECT .TEXT means a jump location we can define multiple jump locations by digits but only one by ascii per each ascii name If we're defining multiple jump locations for one digit, keep a list info in .SECT .DATA follows the format str: .ASCIZ &quot;hello world&quot; where .ASCIZ means an ascii string with a zero at the end and .ASCII means an ascii string If we're dealing with a string each string to be defined should be in quotes raise error if quotes are messed otherwise grab the stuff in quotes and set temp equal to a list of hex vals of each char info in .SECT .BSS follows the format fdes: .SPACE 2 Where essentially .BSS just defines memory space let's find the size of the mem chunk to def and def it in bss as it's start and end pos" name="loadCode">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="lqAaaNjoKdLn" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GxvXTofxWbCa" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="oIQin1YfmQKI" type="KhT450K8VRPK" value="" name="lines"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="R0jvZvVNBt4z" name="stopRunning">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ATNLNPIFyxux" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="uaeezxxkl5JL" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="S29mdSX2SGy0" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="spfduyyMz56c" name="addBreakPoint">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="D0YC3enYFQT7" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Xddxsbx22JLP" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gedeZVbRKH4E" type="KhT450K8VRPK" value="" name="bp"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1P71gRPM521c" name="removeBreakPoint">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2oV5oUhJ4i8s" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Va3pp5133ZD6" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="B0cQO5WNSbP8" type="KhT450K8VRPK" value="" name="bp"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="l7toe6sp5UDT" name="runAll">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="6278lF0UKrJy" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Yhp0JE9J2cNq" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="w9lzcyQAeF8x" comment="This executes a single line of code.&#xa;        Parses the command and performs basic error checking&#xa;            (are we done the program?&#xa;            does the command follow proper syntax (i.e. right arguments)?&#xa;            is the command recognised?)&#xa;Before passing it off to the command interpreter class clear out tabs exclamations mean comments ignore comments colons mean labels, we dealt with those already. ignore jump points any command can have at most 2 arguments skip the empty self.lines" name="step">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="d4rvu8tqIcpu" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="TFETrbJxeQ4N" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZF2DV88yOMSF" comment="The Machine needs to interface with the&#xa;        gui to get input characters. This function&#xa;        is called by the gui to check if the machine&#xa;is waiting for a character" name="requestsGetChar">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="vW1D9o5i47tZ" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="yjBa8FxjHmfB" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="D1VbNvpJd0rl" comment="This function is activated by the system trap interface for&#xa;            char requests.&#xa;            If there is no character loaded into the input buffer then we&#xa;            Simply ensure our getchar flag is loaded.&#xa;            Otherwise we load the ASCII value of the current char in the&#xa;            input buffer into the AX register and &quot;pop&quot; the char out of the&#xa;buffer." name="getChar">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="SmTWrK34LYeg" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DoUUb7eWefhl" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="STy5RpqccI4B" comment="When we have received a string back from the GUI element to be&#xa;            loaded in with the getChar() function, we merely load the string&#xa;            into the buffer and let the getChar function work. We turn off&#xa;            the waitingForChar flag because we are no longer waiting for a char&#xa;" name="respondGetChar">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="HC1rV62tofv8" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Qif4MKno4EKv" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YLxrtZVJ0TOP" type="KhT450K8VRPK" value="" name="string"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ziw3wEwUZrLR" comment="Returns the docstrings of the instruction set functions." name="getFunctionDescriptions">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="0ziaq11Fqjf8" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RqkRI9rXJqOo" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wQhj3cr2Ko3E" type="KhT450K8VRPK" value="" name="function"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qUfAK3yHReyS" comment="Returns a list of the instruction set functions" name="getFunctions">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="T9YJsDPjh4tz" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="EpUXbVlcUUAI" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5pEURCue0OBZ" comment="Returns a tuple of the names of the eight bit registers.&#xa;(&quot;AH&quot;, &quot;AL&quot;, &quot;BH&quot;, &quot;BL&quot;, &quot;CH&quot;, &quot;CL&quot;, &quot;DH&quot;, &quot;DL&quot;)" name="getEightBitRegisterNames">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="LZ22btzfgE76" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rwBLOJeqSA9J" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Q2kQOv0Gp9ZC" comment="Sets the location to next jump PC to" name="setJumpLocation">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="RfbGoAQFKQ7f" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RB2tL9CegCeG" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3etksyqI0YhN" type="KhT450K8VRPK" value="" name="l"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YHIEUwSXaLFS" comment="Returns the jump table" name="getLookupTable">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Nf5h6CKeTcqv" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="K3lIbQd25EHr" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZJR9egawiJFJ" comment="returns the data from the stack" name="getStack">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="uRyM2nFb6gik" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="jsKo5bfSGi7K" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LIh3buKKke6p" name="insertInLookupTable">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="xEojvTVPLqzu" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DkFSSKkLmhfo" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="UuNaZ3KuMzvv" type="KhT450K8VRPK" value="" name="label"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tDEcsKP32dTT" type="KhT450K8VRPK" value="" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uHmEFf96tNij" name="isLabelInLookupTable">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="4zKvL0e38Pjr" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="i8milEBiSzQN" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QtkmihecyPqD" type="KhT450K8VRPK" value="" name="label"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bvY3syOJp63X" comment="Returns a tuple of the names of the sixteen bit registers.&#xa;(&quot;AX&quot;, &quot;BX&quot;, &quot;CX&quot;, &quot;DX&quot;, &quot;BP&quot;, &quot;SP&quot;, &quot;DI&quot;, &quot;SI&quot;, &quot;PC&quot;)" name="getRegisterNames">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="FdHM00Bbtjcm" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="nf7j2xx5vF0G" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="f03V642rjAak" comment="Sets the value of the 16 bit register 'reg' to the value 'to'.&#xa;If 'reg' isn't a valid sixteen bit register a TypeError is raised" name="setRegister">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="EiFfCV3cw3v7" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="5VpykpEyQTIQ" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="STzLDb5qZ8Lf" type="KhT450K8VRPK" value="" name="reg"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="AMUsU5cXaRWJ" type="KhT450K8VRPK" value="" name="to"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="e1yE7JrIdM87" comment="Returns the value of the 16 bit register 'reg'.&#xa;If 'reg' isn't a valid sixteen bit register a TypeError is raised" name="getRegister">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Ijtt31zQjcNs" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Pkdx99ENrT01" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="w2bt5X0hYytd" type="KhT450K8VRPK" value="" name="reg"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="lcEa3Ca0EBtH" comment="Sets the eight bit register 'reg' to the value 'to' while&#xa;        preserving the state of the other associated register.&#xa;        If 'reg' isn't a valid eight bit register a TypeError is raised.&#xa;I.E. setting AH will not influence AL." name="setEightBitRegister">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="vIeQ0bzhax58" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gtxCqqq6XhzY" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="hyyQaMHJwTuz" type="KhT450K8VRPK" value="" name="reg"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="fSxsdq9Ii6UY" type="KhT450K8VRPK" value="" name="to"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HMSDpMBTm8JN" comment="Returns the 8 bit register s, if it exists, otherwise returns 0.&#xa;        If 's' isn't a value eightbit register, then it raises a TypeError&#xa;i.e. self.getEightBitRegister('BH') is the top 8 bits of BX" name="getEightBitRegister">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="rLodT70OXez2" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="xSfdXA9QSlqS" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Mn7wlD50ZVCN" type="KhT450K8VRPK" value="" name="s"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="o8SEtHfE4m8n" comment="Converts integers to 0-padded hex. Does twos complement for&#xa;        negative numbers.&#xa;i.e. 17 is returned as 11, 15 is returned as 0F 2s complement" name="intToHex">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2QK5BTsAeefL" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zBoXgysVJg8k" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="l79Ij6JXFll6" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cXqtBxew2lDl" comment="Replaces all escaped sequences with their counterparts" name="replaceEscapedSequences">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="bw2bhDKWjabz" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rWG4FzBIOTLZ" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="uDhXqNsQugK6" type="KhT450K8VRPK" value="" name="string"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="akFwBYV6jCdZ" comment="Escapes all things that may need escaped." name="escapeSequences">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="BAwvLXSsyQI5" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="XTyS7IWjCYIt" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="kdNTDyQlgdhq" type="KhT450K8VRPK" value="" name="string"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gomsL5j5i7Wt" comment="Returns the value located at address 'addr'.&#xa;        If the optional toAddr is supplied then it returns a sub-list&#xa;including the range." name="getFromMemoryAddress">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="J5pmXQYUSCPs" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3vfiYKYiTSbo" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="z3evSxy6ljz6" type="KhT450K8VRPK" value="" name="addr"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ogBUngNrb0Z9" type="KhT450K8VRPK" value="" name="toAddr"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9Nyt6xzsc9KP" name="getLocalVar">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="zUXZbrzQXBqC" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="piEQglXzqNjN" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="lHrDUE5ba2Ug" type="KhT450K8VRPK" value="" name="arg"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xLBlit7UAwfc" name="setLocalVar">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="9QFKKX34kDMB" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="BjElliPiAuIl" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="mFBHQzTLLd71" type="KhT450K8VRPK" value="" name="key"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WCTe87HHqT2Z" type="KhT450K8VRPK" value="" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="AnUTQZVulwXu" name="setCodeBounds">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="8GGgsuY1cVvX" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3oBrFCOOaegs" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="BixuvH552ZZT" type="B1HTGn9qFKpc" value="" name="i"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="72Lsysm0ewrr" type="KhT450K8VRPK" value="" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kybnWAEdAXV8" name="getLastLine">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2W3d0zAixjVT" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QG62CyuIC8y2" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rh61FcAdsGf2" name="setLastLine">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="UEUKS7MdfexM" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CZKMhGOimSLk" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="PTTMDwo4cu6r" type="KhT450K8VRPK" value="" name="l"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uM2fmNP9rqV2" name="isLocalVar">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Bvc0j62UN6rZ" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="lJ6NCACgMg1p" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="lLQQ0NlujnXT" type="KhT450K8VRPK" value="" name="v"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="H3EbhDQTYqrW" name="getLabelFromLookupTable">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Nw3uluQxXnqv" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CcPvQwNbpzZZ" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3b3RhtywwCWc" type="KhT450K8VRPK" value="" name="label"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kBWX956Ce8dJ" name="addToStack">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Qae4iFLjpZea" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="1aEvmkXAeY4N" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="TSKyG9tyKNVR" type="KhT450K8VRPK" value="" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JAiyimL9Ce5Q" name="popFromStack">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="M5rAeVkwdSsK" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="lwO3JsVhS7jA" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CDRMpXnYTBcl" name="stackSize">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="wOnXqfr0rJNe" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="15STCAbWFSgr" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="oADFJp0LuRm4" name="peekOnStack">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="47SvOnaAvlQF" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZOaooFfkdRGS" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="aOYSnIUMe2AT" name="setFlag">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="CSPhDYbmHfFl" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HoBvDRLHXlBv" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Zj6UUUh2sDSg" type="KhT450K8VRPK" value="" name="f"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ww0Ay9bGxl98" type="KhT450K8VRPK" value="" name="a"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9ulz8Dde9em6" name="getFlag">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="kzgrbTvOnF6s" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="nMKi7RqHtDz6" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="mYr1D4lMyWL4" type="KhT450K8VRPK" value="" name="f"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gu9X76creRtp" name="getBSSKeys">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="dbRQpVGVNQ1U" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="VcBR8VWqSCg3" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UdK74BwXn6wt" name="getDATAKeys">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="wtGJHFlms3ru" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZSi1dO2ExRdm" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="EnRzrLrQoZPP" name="inBSSKeys">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="av4MSTjNvNEn" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vRdqsGdmAr5R" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="6pBws2q5oF4f" type="KhT450K8VRPK" value="" name="key"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bpYledBiQMcJ" name="inDATAKeys">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="AATaV5rsVD18" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NSMBfQoDKsYm" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MH8FeK0G9Yzl" type="KhT450K8VRPK" value="" name="key"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cpLuire29mFl" name="getFromBSSorDATA">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="5b9DyepRyIKV" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4F1Dmzww9NUc" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="SMUvXV37JN11" type="KhT450K8VRPK" value="" name="key"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Cg1LQG7VT6gF" type="KhT450K8VRPK" value="" name="index"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="lMd4hc3tG2Dh" name="getFromBSS">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ESNdX0zGRkx9" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GKAkOoxUP7fO" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="jSnhi5ASRnU8" type="KhT450K8VRPK" value="" name="key"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="OW0eYDJpXRXt" type="KhT450K8VRPK" value="" name="index"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="q8bHt6OHaOu8" name="getFromDATA">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="YeRRxtpHLU1W" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="bDv6dQzrtLSQ" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="JShkCcu0kTIc" type="KhT450K8VRPK" value="" name="key"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Xet72nEbz9fc" type="KhT450K8VRPK" value="" name="index"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7tWpLmRqQJwQ" name="getCodeBounds">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="w2VFWXlbOGPh" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4Az1HedpJ2EE" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0qYP7UpCenDt" comment="Sets the value located at address 'addr' to 'to'" name="setMemoryAddress">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="93A5U9VRtWls" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RpjirvxlvS1S" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="xk1K0Q1zFZOM" type="KhT450K8VRPK" value="" name="addr"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3BWfykZQXG6O" type="KhT450K8VRPK" value="" name="to"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vlr8KFSMOz1N" name="isHex">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="fSx3PxO6T9KG" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="hYlEmrawti1N" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rUmj0YbtHQzb" type="KhT450K8VRPK" value="" name="string"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zsCsbBFSf1Bd" name="isRunning">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="GDPkLh0KaAAB" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="XkXoAUOnwJpL" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LPbyOlbuV6ig" name="isRunningAll">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="wK5WUFhncGl0" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="b6TVOGpeUEMn" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1LuXRbB0fcW3" name="hasRun">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Qeb2vK2ufvR5" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tLgLX28TNDzp" type="iWDvBZRTjpZc" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Wa59DZD4stPQ" name="isBreakPoint">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="JsYBjxbaQTp6" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tVtEgr26Td8O" type="iWDvBZRTjpZc" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="x8Hb3igXJlfU" type="KhT450K8VRPK" value="" name="bp"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="iWDvBZRTjpZc" xmi.id="GHVfyxepZIwv" parent="5x62bJE31caI" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KrCnUKAPQR0U" comment="This program executes the basic units of the intel 8088 instruction set.&#xa;It assumes working with the Intel8088 class as the &quot;machine&quot; parent class.&#xa;&#xa;Copyright (C) 2014 Brydon Eastman&#xa;&#xa;This program is free software; you can redistribute it and/or modify&#xa;it under the terms of the GNU General Public License as published by&#xa;the Free Software Foundation; either version 2 of the License, or&#xa;(at your option) any later version.&#xa;&#xa;This program is distributed in the hope that it will be useful,&#xa;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xa;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xa;GNU General Public License for more details.&#xa;&#xa;You should have received a copy of the GNU General Public License along&#xa;with this program; if not, write to the Free Software Foundation, Inc.,&#xa;51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Or by&#xa;email to brydon.eastman@gmail.com.&#xa;" name="CommandInterpreter">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="7ezOQeshUOsB"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="k6IyRpCCkmNv" type="B1HTGn9qFKpc" initialValue="-1" name="_ERROR"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="VSjqLDAFWT2I" type="B1HTGn9qFKpc" initialValue="2" name="_LABEL"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="kAc6MBq4H83i" type="B1HTGn9qFKpc" initialValue="3" name="_HEX"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="xFtizGdSjKI2" type="B1HTGn9qFKpc" initialValue="4" name="_LOCALVAR"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="XRF4sIMcSzim" type="B1HTGn9qFKpc" initialValue="5" name="_REG8"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="AYqPgr5b4yJ4" type="B1HTGn9qFKpc" initialValue="6" name="_DATA"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="DuWwEnwkCBo4" type="B1HTGn9qFKpc" initialValue="7" name="_BSS"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="T8gt5MfDsUcW" type="B1HTGn9qFKpc" initialValue="8" name="_REG"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="Ji7OePQrHulW" type="B1HTGn9qFKpc" initialValue="9" name="_MEM"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="fhErt0vK8ZEC" type="B1HTGn9qFKpc" initialValue="10" name="_IMMED"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="trNlJ0HdgNzK" type="B1HTGn9qFKpc" initialValue="11" name="_CHAR"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="mPA1JvXzdjoU" type="ycW7NHYsxgDE" name="SYSCODES"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="jkoqH02BsPu9" type="5x62bJE31caI" name="LIST_TYPE"/>
        <UML:Attribute visibility="public" isSpecification="false" xmi.id="NCm1XlMH8UIQ" type="iWDvBZRTjpZc" name="machine"/>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="muzGGqQaICJD" comment="Link's this module with the self.machine instance" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="TqRl0jyjqOsw" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="l7S96Q1QZG84" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="qW3hn8s2DA8i" type="iWDvBZRTjpZc" value="" name="machine"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="mrKJ7QOai5x6" comment="A dict whose keys are commands and their values are the # of&#xa;arguments they expect Ascii adjust AL after ADDition Ascii adjust AX before division Ascii adjust AX after multiplication Ascii adjust AL after subtraction Add with carry Add Logical and Call procedure Convert byte to word Clear carry flag Clear direction flag Clear interrupt flag Coplement carry flag Compare operands Compare bytes in memory Compare words in memory Decimal adjust AL after ADDition Decimal adjust AL after subtraction Decrement by 1 Unsigned divide Signed divide Signed multiply Increment by 1 Jump if above Jump if above or equal Jump if below Jump if below or equal Jump if carry Jump if CX is zero Jump if equal Jump if greater than Jump if greater than or equal Jump if less than Jump if less than or equal Jump Jump if not above Jump if not above or equal Jump if not below Jump if not below or equal Jump if not carry Jump if not equal Jump if not greater than Jump if not greater than or equal Jump if not less than Jump if not less than or equal Jump if not overflow Jump if not ??? Jump if not ??? Jump if noscreet zero Jump if overflow Jump if ??? Jump if ??? Jump if ??? Jump if ??? Jump if zero Load flags into AH register Load pointer using DS Load effective address Load ES with pointer Load string byte Load string word Loop control Loop if equal Loop if not equal Loop if not zero Loop if zero Move Move byte from string to string Move word from string to string Unsigned Multiply Two's complement NEGation No Operation. Negate the opearand, logical NOT Logical OR Pop data from stack Pop data from flags register Push data to stacscreek Push flags onto stack Rotate left with carry Rotate right with carry Repeat MOVS/STOS/CMPS/LODS/SCAS Repeat if equal Repeat if not equal Repeat if not zero Repeat if zero Return from procedure Rotate left Rotate right Store AH into flags Shift Arithmetically Left Shift Arithmetically Right Subtraction with borrow Compare byte string Compare word string unsigned Shift left unsigned Shift right Set carry flag Set direction flag Set interrupt flag Store byte in string Store word in string Subtraction System trap Logical compare (AND) Exchange data Logical XOR" name="getCommandArgs">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="NLADh0AUrSnx" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ocFNDfFgTePR" type="KrCnUKAPQR0U" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="t9XbDUf14vNI" comment="The jump table - the keys are commands and values are the functions&#xa;that need calle best instruction" name="getFunctionTable">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="cxpUQaRJkwsx" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ycw2GKRcfcpN" type="KrCnUKAPQR0U" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="QYwURJkzth18" comment="name: AAA&#xa;        title: ASCII Adjust AL After Addition&#xa;        args: None&#xa;        description: Adjusts the result in AL after two ASCII digits have been\&#xa; added together. If AL>9, the high digit of the result is placed in AH, \&#xa;and the Carry and Auxiliary flags are set.&#xa;flags: ?,,,?,?,*,?," name="AAA">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="TJ6y6DpRi1W8" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zTke3XzdVm7t" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NWC5S20qauJ1" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="C3z5i0BhRvKS" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1UzcOIbaLae2" comment="name: AAD&#xa;        title: ASCII Adjust AL Before Division&#xa;        args: None&#xa;        description: Converts unpacked BCD digits in AH and AL to a single \&#xa;binary value in preperation for the DIV instruction.&#xa;flags: ?,,,*,*,?,*," name="AAD">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="oc977HWnEKCA" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Zpjyl1RCLX8P" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ixqOyKXzoUZC" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="m9l5hP7EEpBx" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cj8QDfbxmM2S" comment="name: AAM&#xa;        title: ASCII Adjust AL After Multiplication&#xa;        args: None&#xa;        description: Adjusts the result in AX after two unpacked BCD digits \&#xa;have been multiplied together&#xa;flags: ?,,,*,*,?,*," name="AAM">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="114Q2txGEHgs" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="j8evvprjR0rW" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GLKSeWbGDhfO" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MGL7aLZHTDCM" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="lH7yymMJ0hQa" comment="name: AAS&#xa;        title: ASCII Adjust AL After Subtraction&#xa;        args: None&#xa;        description: Adjusts the result in AX after a subtraction operation.\&#xa;If AL>9, AAS decrements AH and sets the Carry and Auxiliary Carry flags.&#xa;flags: ?,,,?,?,*,?," name="AAS">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2j13Zb4J6LFq" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0xpU81o93sa3" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="jVHymxoXDvTB" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="fnSfUqDUn2wu" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="G3LTxmdaZ5G1" comment="name: ADC&#xa;        title: Add with Carry&#xa;        args:[reg: mem],[reg: mem: immed]&#xa;        description: Adds the source and destination operands, and adds the \&#xa;contents of the Carry flag to the sum, which is stored in the destination&#xa;flags: *,,,*,*,*,*," name="ADC">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="fZPkAwRNZNcT" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wTUhUObW7dZh" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CdyHwD5CEReB" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="BHmlM0mGRGyv" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ahep6IyIXi3r" comment="name: ADD&#xa;        title: Add&#xa;        args:[reg: mem],[reg: mem: immed]&#xa;        description: A source operand is added to a destination operand, and \&#xa;the sum is stored in the destination.&#xa;flags: *,,,*,*,*,*," name="ADD">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="y5WN56sMdd7q" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gn88441hbRRm" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Nr7vEjMnO0aV" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GYnnFofvZl3b" type="B1HTGn9qFKpc" value="" name="i"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="p3IQUiApXHkj" type="dXgnlBJuDYMR" value="" name="carry"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PmlyVnaKqqjI" comment="name: AND&#xa;        title: Logical And&#xa;        args:[reg: mem],[reg: mem: immed]&#xa;        description: Each bit in the destination operand is ANDed with the \&#xa;corresponding bit in the source operand&#xa;flags: *,,,*,*,?,*," name="AND">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="rIy1oFh84gFi" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Wt73Bqn9vHUy" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MMIxxQnKAYJg" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Jry7fhPAbVDk" type="B1HTGn9qFKpc" value="" name="i"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="JyrCEMAaiRVe" type="dXgnlBJuDYMR" value="" name="inPlace"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Ldsw65eP2WZG" comment="name: CALL&#xa;        title: Call&#xa;        args:[label]&#xa;        description: Calls the function in the source operand. The current \&#xa;        program counter value is pushed to the stack before the call.&#xa;        flags: ,,,,,,,&#xa;" name="CALL">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="NIBwPAKjrl8B" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="sjoYAJAzZ91N" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MgTRKh7gKzaQ" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2Fn4jMIb367C" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SFpkEQ8HdvJM" comment="name: CBW&#xa;        title: Convert Byte to Word&#xa;        args: None&#xa;        description: Extends the sign bit in AL throughout the AH register&#xa;flags: ,,,,,," name="CBW">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="rKu8ztlmBASF" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FcvJg0V4Ge0f" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pIPg4XpWnfHz" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3PEeJYyYArrq" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gFkTuzQvOfZf" comment="name: CLC&#xa;        title: Clear carry flag&#xa;        args: None&#xa;        description: Clears the carry flag to zero.&#xa;        flags: ,,,,,,,0&#xa;" name="CLC">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="I6Ac8Uv3Z07n" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DVELM39EM2KJ" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="v556GXKwk4Nf" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3lYPQ63dbFyy" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="VRhGT4tUqRsE" comment="name: CLD&#xa;        title: Clear direction flag&#xa;        args: None&#xa;        description: Clears the Direction flag to zero. String primitive \&#xa;instructions will automatically increment SI and DI&#xa;flags: ,0,,,,," name="CLD">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="TemLppMUlNji" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Vvs7Ao3QuD32" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="hy3ExB2Saji2" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="mbUa1MoWFgbN" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Yl97Sp9EPboQ" comment="name: CLI&#xa;        title: Clear Interrupt flag&#xa;        args: None&#xa;        description: Clears the interrupt flag to zero. This disables maskable\&#xa; hardware interrupts until an STI instruction is executed&#xa;flags: ,,0,,,," name="CLI">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ektk3vg9H5y0" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="yduBHUXi6J2w" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="6OQrl9YIsfNJ" type="KhT450K8VRPK" value="" name="commmand"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="UUXt5KH1vCDC" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CUI59fOe9tXF" comment="name: CMC&#xa;        title: Complement Carry flag&#xa;        args: None&#xa;        description: Toggles the current value of the Carry flag&#xa;flags: ,,,,,,," name="CMC">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="FDKONgXQgokl" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DpE8zRJd9ALA" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="52HK7EKJidMq" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GiSOcxbnmpuj" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="242jfNZw5zIf" comment="name: CMP&#xa;        title: Compare&#xa;        args:[reg: mem],[reg: mem: immed]&#xa;        description: Compares the destination word to the source word by \&#xa;performing an implied subtraction of the source from the destination.&#xa;flags: *,,,*,*,*,*," name="CMP">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="evOAei3zXK28" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wtTjiLQxYjKt" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NrH3d1me3mNj" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="9udDtvspmJWS" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JmmLY74izfvs" comment="name: CMPB&#xa;        title: Compare Byte&#xa;        args:[reg8: mem],[reg8: mem: immed]&#xa;        description: Compares the destination byte to the source byte by \&#xa;performing an implied subtraction of the source from the destination.&#xa;flags: *,,,*,*,*,*," name="CMPB">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="y462Cyh1rMK3" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YlgI5Akj38sf" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="oveLEgSVQEqz" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MsfLVaC3JqLO" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0mXR1NOLE3ej" comment="name: DAS&#xa;        title: Decimal adjust after subtraction&#xa;        args: None&#xa;        description: Converts the binary result of a subtraction operation to \&#xa;two packed BCD digits in AL.&#xa;flags: ?,,,*,*,*,*," name="DAS">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="lBLsYwBpFTyr" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="boluc4Hb8NdJ" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="JIK8ecCdPh2O" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4QhGTLy28jwk" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="58USpWqruX8L" comment="name: DEC&#xa;        title: Decrement&#xa;        args:[reg: mem]&#xa;        description: Subtracts one from the register or memory address provided&#xa;flags: *,,,*,*,*,*" name="DEC">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="uS1MVQMUz9h2" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="r6NznIjYT3Q0" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zZpC2l48tWag" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="1PYvueHlkckV" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vj8mDgTE3z8y" comment="name: INC&#xa;        title: Increment&#xa;        args:[reg: mem]&#xa;        description: Adds one to the register or memory address provided&#xa;flags: *,,,*,*,*,*" name="INC">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="AZ22OEPemHvR" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="dNjLzSqsurEP" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HYrHhWHaFNNT" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="1of3nn1OAijA" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="lA21VNSU97Xu" comment="name: JA&#xa;        title: Jump to a label if above&#xa;        args:[label]&#xa;        description: The same as JG. Jumps if the sign flag is clear and the \&#xa;zero flag is clear&#xa;flags: ,,,,,," name="JA">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="GSFoedi1RHBV" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tYI3F1BPYBQw" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ppa94Tbobbp4" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wFZ5K6zDdHHs" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ikHIL4MHJtKe" comment="name: JAE&#xa;        title: Jump to a label if above or equal&#xa;        args:[label]&#xa;        description: The same as JGE. Jumps if the sign flag is clear and/or \&#xa;the zero flag is set&#xa;flags: ,,,,,," name="JAE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="QiYxM88ePGNw" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="yJrbY6RoXeaB" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="IIAjZLCG3UYO" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YsdsmxUkELJk" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="aaCd2i0abdQL" comment="name: JB&#xa;        title: Jump to a label if below&#xa;        args:[label]&#xa;        description: The same as JL. Jumps if the sign flag is set and the \&#xa;zero flag is clear&#xa;flags: ,,,,,," name="JB">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="iXikZH9iyAGt" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Zu5lEMWe42bO" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Bh3axOUVwh9y" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="P9XykxJHsO34" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YlPVQWRpfyoN" comment="name: JBE&#xa;        title: Jump to a label if below or equal&#xa;        args:[label]&#xa;        description: The same as JLE. Jumps if the sign flag is set and/or the\&#xa; zero flag is set&#xa;flags: ,,,,,," name="JBE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="n5A0Z5iI59zH" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="w7fmUgoADUvk" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="l2ThChakSxDs" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Tfg6dSUXX9H1" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rY1HVFAxso3T" comment="name: JC&#xa;        title: Jump to a label if carry&#xa;        args:[label]&#xa;        description: Jumps if the carry flag is set&#xa;flags: ,,,,,," name="JC">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="58jP58F3EN8U" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GXzneGnRKxPr" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0885F7M6fLO9" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YW6QK9safrLJ" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SSY8mwFKQLjk" comment="name: JCXZ&#xa;        title: Jump to a label if CX is zero&#xa;        args:[label]&#xa;        description: Jumps if the value of the CX register is zero&#xa;flags: ,,,,,," name="JCXZ">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="RUiAadynlnCE" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="SbI5SePXk6vo" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CArRVytxOR3A" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MITmbCX2nn7D" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="l5C8WDIsUld5" comment="name: JE&#xa;        title: Jump to a label if equal&#xa;        args:[label]&#xa;        description: Jumps if the zero flag is set&#xa;flags: ,,,,,," name="JE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Rfc4H7KVYJUn" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vA5ivDtLfcVG" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FT1zGBD0GP8k" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="bQb5AEA5MEmH" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Uhni5vRgJ2jR" comment="name: JG&#xa;        title: Jump to a label if greater than&#xa;        args:[label]&#xa;        description: Jumps if the sign flag is clear and the zero flag is clear&#xa;flags: ,,,,,," name="JG">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2MgymD8I4nMD" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ErXa5HpUwSZC" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Xrh4B9rdoeKr" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="XlVonEGz6lXB" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wDrjpBaKu48f" comment="name: JGE&#xa;        title: Jump to a label if greater than or equal&#xa;        args:[label]&#xa;        description: Jumps if the sign flag is clear and/or the zero flag is \&#xa;set&#xa;flags: ,,,,,," name="JGE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="zPwWZ0owCONA" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="IMeM7BY7XC4K" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NCcR0wfu9Udw" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="dCGXGMCWjqto" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="K05RUgL7qbe6" comment="name: JL&#xa;        title: Jump to a label if less than&#xa;        args:[label]&#xa;        description: Jumps if the sign flag is set and the zero flag is clear&#xa;flags: ,,,,,," name="JL">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="SuxJG3ldx5BC" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wodfeURbtN8S" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NuMYHjiZklzC" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="SKKIuwNqjyTL" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="msmUdlh33zMx" comment="name: JLE&#xa;        title: Jump to a label if less than or equal&#xa;        args:[label]&#xa;        description: Jumps if the sign flag is set and/or the zero flag is set&#xa;flags: ,,,,,," name="JLE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="YbSdUqySzuLB" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tjlcfCy77vQL" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="y9ytE8600sTb" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="bAfe9zc0gLdL" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0R9yHcaskDXr" comment="name: JNA&#xa;        title: Jump to a label if not above&#xa;        args:[label]&#xa;        description: The same as JLE. Jumps if the sign flag is set and/or the\&#xa; zero flag is set.&#xa;flags: ,,,,,," name="JNA">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="CNmGyJoPnknB" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="C7ssQVDw4dZY" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RVyOOHXOhgNy" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Hxp1AKrMPjCp" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1IZiywhDrWD1" comment="name: JNAE&#xa;        title: Jump to a label if not above or equal&#xa;        args:[label]&#xa;        description: The same as JL. Jumps if the sign flag is set and the \&#xa;zero flag is clear&#xa;flags: ,,,,,," name="JNAE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="GdP6QcvWb8NI" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="o4LDnV2zsmDq" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="6zDtjy4kGdTD" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Y8QPcdRQfkdS" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5P3L0UYYaxyC" comment="name: JNB&#xa;        title: Jump to a label if not below&#xa;        args:[label]&#xa;        description: The same as JGE. Jumps if the sign flag is clear and/or \&#xa;the zero flag is set.&#xa;flags: ,,,,,," name="JNB">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="WijLk9XNUGZw" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YNaE5DeLo2SE" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="eNiET3WYSXsT" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zQ1ZLxluKJ6O" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="J3UkbMDYlC84" comment="name: JNBE&#xa;        title: Jump to a label if not below or equal&#xa;        args:[label]&#xa;        description: The same as JG. Jumps if the sign flag is clear and the \&#xa;zero flag is clear.&#xa;flags: ,,,,,," name="JNBE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="fYMO6LqlpgvX" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ArwSB2qflYyT" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="hWqAkP61TYl2" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="twae9ggHYdjh" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="4zWVYIVPC31L" comment="name: JNC&#xa;        title: Jump to a label if not carry&#xa;        args:[label]&#xa;        description: Jumps if the carry flag is clear&#xa;flags: ,,,,,," name="JNC">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="5pSv5lrfvX3k" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="khaGKKxyqHKw" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="aAfNpbutYRO4" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="hrTtuUDeCnsU" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="6xbcMxh3o8vj" comment="name: JNE&#xa;        title: Jump to a label if not equal&#xa;        args:[label]&#xa;        description: Jumps if the zero flag is clear&#xa;flags: ,,,,,," name="JNE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="dMwe2ojVWRqj" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="d8LntCHz1is6" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="TikMDn5Jigt5" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ea6Qjz7K7R7z" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Ev0uZuxDS4c9" comment="name: JNG&#xa;        title: Jump to a label if not greater than&#xa;        args:[label]&#xa;        description: The same as JLE. Jumps if the sign flag is set and/or \&#xa;the zero flag is set.&#xa;flags: ,,,,,," name="JNG">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Vs8OsYJhdi29" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3jT9AY6nv2Qv" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="q7RLYF4kA3eh" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vatNeVXfCymN" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="x4t57Wn06gOi" comment="name: JNGE&#xa;        title: Jump to a label if not greater than or equal&#xa;        args:[label]&#xa;        description: The same as JL. Jumps if the sign flag is set and the \&#xa;zero flag is clear.&#xa;flags: ,,,,,," name="JNGE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="jL5i8mXUm5TU" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="9tLLp8iKypir" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="L2YziY8gc0ji" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WWiaA4IJxddl" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bbADbst5OcfX" comment="name: JNL&#xa;        title: Jump to a label if not less than&#xa;        args:[label]&#xa;        description: The same as JGE. Jumps if the sign flag is clear and/or \&#xa;the zero flag is set.&#xa;flags: ,,,,,," name="JNL">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ZMRKkQDvtbpQ" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="evoaZRLGlQyt" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="AVNwYqR9QZLz" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RC5omiJRe71B" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PEXpmqpD3szp" comment="name: JNLE&#xa;        title: Jump to a label if not less than or equal&#xa;        args:[label]&#xa;        description: The same as JG. Jumps if the sign flag is clear and the \&#xa;zero flag is clear.&#xa;flags: ,,,,,," name="JNLE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="D6pot686ZLAa" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="aIGCQFNxbpHK" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DUF432UTH2G3" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="s5EtvCjWUxis" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Md3ddKeVNqPJ" comment="name: JNO&#xa;        title: Jump to a label if not overflow&#xa;        args:[label]&#xa;        description: Jumps if the overflow flag is clear.&#xa;flags: ,,,,,," name="JNO">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="hn7F08dII88l" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="26nX3VPGZD3Q" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="J9UqVdRpGSQt" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="m4M8sjRvpCQr" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="lXa100sk2Csu" comment="name: JNP&#xa;        title: Jump to a label if not parity&#xa;        args:[label]&#xa;        description: Jumps if the parity flag is clear.&#xa;flags: ,,,,,," name="JNP">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="J4KKieJUcbZh" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wHpjTDa91gM1" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ozJ45QpqxNpv" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NfgNsWImm5VD" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1OWwmJs7zWVp" comment="name: JC&#xa;        title: Jump to a label if not sign.&#xa;        args:[label]&#xa;        description: The same as JG. Jumps if the sign flag is clear.&#xa;flags: ,,,,,," name="JNS">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="PEEWTbMMKfrc" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0lbko4w78GPq" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tjLVKuCJGgF0" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="056xZbmYKLI8" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="X1tmg7mgCsbk" comment="name: JC&#xa;        title: Jump to a label if not zero&#xa;        args:[label]&#xa;        description: Jumps if the zero flag is clear&#xa;flags: ,,,,,," name="JNZ">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="KTS7X1LAxv8X" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RNIjgas5n4bG" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="fwaybRY7QSt6" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZdkjULTtgldM" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Khck9Vpg6ZPY" comment="name: JC&#xa;        title: Jump to a label if overflow.&#xa;        args:[label]&#xa;        description: Jumps if the overflow flag is set&#xa;flags: ,,,,,," name="JO">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="19bVTdUo1d5J" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vtSbe3wwWM31" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NO9JJIobxQM4" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tBkxk9Wd2yDf" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ttsqHEu8Ne66" comment="name: JC&#xa;        title: Jump to a label if parity&#xa;        args:[label]&#xa;        description: Jumps if the parity flag is set&#xa;flags: ,,,,,," name="JP">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="3MJ4NHXzjodm" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="oahoYuRX110U" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="eSHd5MuzGnpV" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zieNMiT8IAvo" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8VlMIZsIHUdb" comment="name: JC&#xa;        title: Jump to a label if parity or equal&#xa;        args:[label]&#xa;        description: Jumps if the parity flag is set and/or the zero flag is \&#xa;set&#xa;flags: ,,,,,," name="JPE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="jC6hhO0RBIwk" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="A6kSEdEFzXIL" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="mnIVZvHhP14h" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YuxnOaOYe6yr" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CBQbAUIiOEVk" comment="name: JC&#xa;        title: Jump to a label if parity or overflow&#xa;        args:[label]&#xa;        description: Jumps if the parity flag is set or the overflow flag is \&#xa;set&#xa;flags: ,,,,,," name="JPO">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="1OQNlnOU8sKm" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ouGRyEIgOMN3" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="jNUsfObrX1Qi" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="VjQrvwZhop8k" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Evblw2TPjsEe" comment="name: JC&#xa;        title: Jump to a label if sign&#xa;        args:[label]&#xa;        description: The same as JL. Jumps if the sign flag is set.&#xa;flags: ,,,,,," name="JS">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="92nzlkZF4asF" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="mnLYaUIbqjwb" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WK3dCOPOH0AE" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0bbjRqLDdhlE" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="yFdEElSEL3wm" comment="name: JC&#xa;        title: Jump to a label if zero&#xa;        args:[label]&#xa;        description: The same as JE. Jumps if the zero flag is set&#xa;flags: ,,,,,," name="JZ">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="YoSHGVkR5SeF" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rHyVyhh5jS3U" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CciFAYS7o5L2" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pnEAoAugQs9M" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="06MmBhmyS18F" comment="name: JMP&#xa;        title: Jump unconditionally to a label&#xa;        args:[label]&#xa;        description: The program counter is adjusted to the value referenced \&#xa;by the label and program execution continues.&#xa;flags: ,,,,,," name="JMP">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="HBQVd0uiNHGk" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="91vZr2wPqOh6" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rPVup97pFSaP" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7MNYNUnXVg6M" type="B1HTGn9qFKpc" value="" name="i"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="i0mYMRcBo85d" type="KhT450K8VRPK" value="" name="referer"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="l1FEhKZPKJvf" comment="name: LODSB&#xa;        title: Load accumulator from string&#xa;        args: None&#xa;        description: Loads a memory byte addressed by SI into AL.&#xa;flags: ,,,,,," name="LODSB">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="rhiuE5akNwdv" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="iYqWeu7t5XOg" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YIOtYdbHerWM" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="95jROf64Bxap" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XFBC4hWBkDc6" comment="name: LODSW&#xa;        title: Load accumulator from string&#xa;        args: None&#xa;        description: Loads a memory word addressed by SI into AX.&#xa;flags: ,,,,,," name="LODSW">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="LxkiS5H00Zxp" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="sjA1eioTPVNb" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="avKxrvrP82ZA" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="h5LPGyV7fd8H" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="VmCbolmTo7s5" comment="name: LOOP&#xa;        title: Loop&#xa;        args:[label]&#xa;        description: Decrements CX and jumps to the label if CX is greater \&#xa;than zero.&#xa;flags: ,,,,,," name="LOOP">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="v6QHpJPJy0bi" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3NCgyIxJFfzf" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="kHfkobYJNkvA" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WfdImUNopXUo" type="B1HTGn9qFKpc" value="" name="i"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="qQ5355hqKKY8" type="dXgnlBJuDYMR" value="" name="flag"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UxWKU16IRBKU" comment="name: LOOPE&#xa;        title: Loop if equal&#xa;        args:[label]&#xa;        description: Decrements CX and jumps to a label if CX>0 and the Zero \&#xa;flag is set.&#xa;flags: ,,,,,," name="LOOPE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ZH8UKaDePGyF" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="E1KYJrfDv3Sk" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Mr3Kpd2KaXc2" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WiJxrdP6ckcv" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rzXPW9Q2pjxg" comment="name: LOOPNE&#xa;        title: Loop if not equal&#xa;        args:[label]&#xa;        description: Decrements CX and jumps to a label if CX>0 and the Zero \&#xa;flag is clear.&#xa;flags: ,,,,,," name="LOOPNE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Qzw2v0xPJZJr" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="KMmw4Ppdey6x" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WJbuXY9PVgm1" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="nC1cvwGFG19J" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5SEa60btDaT6" comment="name: LOOPNZ&#xa;        title: Loop if not zero&#xa;        args:[label]&#xa;        description: Decrements CX and jumps to a label if CX>0 and the Zero \&#xa;flag is clear.&#xa;flags: ,,,,,," name="LOOPNZ">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="IgQhcayahfoL" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="UkKklR39Oy9J" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="y7hGg05lRJJV" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HsNSSqZuYreJ" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="et43ANYSDvuf" comment="name: LOOPZ&#xa;        title: Loop if zero&#xa;        args:[label]&#xa;        description: Decrements CX and jumps to a label if CX>0 and the Zero \&#xa;flag is set.&#xa;flags: ,,,,,," name="LOOPZ">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="SbWHcmj8yjMs" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="kRZIIBabp0GR" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YE2DuoWWiYZs" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="t7K61DjleG1x" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XqMDPv4I1OP2" comment="name: MOV&#xa;        title: Move&#xa;        args:[reg: mem],[reg: mem: immed]&#xa;        description: Copies a byte or word from a source operand to a \&#xa;destination operand.&#xa;flags: ,,,,,," name="MOV">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="yUgK7kGSYLo0" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Z8lEPm9pOd6y" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Nn4LUOC0FYDe" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="UHwTeLTBUENr" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="j00yWCa0RXT3" comment="name: NOP&#xa;        title: No Operation&#xa;        args: None&#xa;        description: Does nothing. Usually implemented at machine level as \&#xa;XCHG AX,AX&#xa;flags: ,,,,,," name="NOP">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="P1PSonbMRCQO" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="qwDI8a955pPA" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Yeb4zP4gN3dt" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DDsciJeZErrK" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZT2wWfnhrdJZ" comment="name: MOVSB&#xa;        title: Move string&#xa;        args: None&#xa;        description: Copies a byte from memory addressed by SI to a memory \&#xa;addressed by DI. SI and DI are increased if the Direction flag is clear (0) \&#xa;and decreased if the Direction flag is set (1).&#xa;flags: ,,,,,," name="MOVSB">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="UjKRYwA8AE7Z" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vx67myRCxpel" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="cF61PUPyxPuR" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3g8uHQRCNWJ8" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="jUYgtQ8w4EoM" comment="name: MOVSW&#xa;        title: Move string&#xa;        args: None&#xa;        description: Copies a word from memory addressed by SI to a memory \&#xa;addressed by DI. SI and DI are increased if the Direction flag is clear (0) \&#xa;and decreased if the Direction flag is set (1).&#xa;flags: ,,,,,," name="MOVSW">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="lSUGu5JFpSlp" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="eEW0ko8EXSd3" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ml9W0G6hkcNb" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2TY7iMRMYxMI" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gpUQRr2SJYX1" comment="name: NEG&#xa;        title: Negate&#xa;        args:[reg]&#xa;        description: Calculates the twos complement of the argument in place.&#xa;flags: *,,,*,*,*,*, TODO: OVERFLOW AND CARRY?" name="NEG">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="UFibPbchoqlS" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="syLRvgjf8Cv1" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HDG6dztKnNiE" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DieWGBV79oY3" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pdmcySpBBTfP" comment="name: NOT&#xa;        title: Logical Not&#xa;        args:[reg: mem]&#xa;        description: Performs a logical not on an operand by reversing each of\&#xa; its bits.&#xa;flags: ,,,,,," name="NOT">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="fGzvl0bqavi1" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="d8Wmx2nRGV0f" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="5cKtS6LGh5sf" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Yfrj7U6kddUa" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="z3Hg77MfnBMu" comment="name: OR&#xa;        title: Inclusive Or&#xa;        args:[reg: mem],[reg: mem: immed]&#xa;        description: Performs a logical OR between each bit in the destination\&#xa; operand and each bit in the source operand. If either bit is a 1 in each \&#xa;position, the result bit is a 1.&#xa;flags: 0,,,*,*,?,*," name="OR">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="1qvKcXOKjEdo" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="dScG54ojKmc4" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="kBsI7aJ4cajj" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="i3MVCiNpAx4E" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pwqPXZ6DcSgo" comment="name: POP&#xa;        title: Pop from stack&#xa;        args:[reg]&#xa;        description: Copies a word at the current stack pointer location into\&#xa; the destination operand, and adds 2 to the SP.&#xa;flags: ,,,,,," name="POP">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="TTHxoX4jAUJ2" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="A3cIygUxWNH7" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vdRcs2OfzE4U" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="o8fOaLBiMnyK" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WhfTwhxipa6P" comment="name: POPF&#xa;        title: Pop flags from stack&#xa;        args: None&#xa;        description: POPF pops the top of the stack into the 16-bit Flags\&#xa; register.&#xa;flags: *,*,*,*,*,*,*," name="POPF">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="GEYl317NW8rW" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vH7H46ZVXpTL" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MX3W1MXW4Azy" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="svghVk5R2Cg4" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UO2WX1SPu86Q" comment="name: PUSH&#xa;        title: Push on stack&#xa;        args:[reg: mem: immed]&#xa;        description: Subtracts 2 from SP and copies the source operand into\&#xa; the stack location pointed to by SP.&#xa;flags: ,,,,,," name="PUSH">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="3iOjAiPa7VXg" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tBptMTvahTMi" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="SR5xZxT1JTWq" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="SyFN5KnwTann" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Q0fjR9Yu8lHB" comment="name: PUSHF&#xa;        title: Push flags onto the stack&#xa;        args: None&#xa;        description: PUSHF pushes the Flags register onto the stack.&#xa;flags: ,,,,,," name="PUSHF">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="6Vbf9tLUbcvo" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="527XcsIdYeKg" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MkHTDo7dnlME" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="us80eNBhNGEx" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="P3RComOgeXhI" comment="name: RCL&#xa;        title: Rotate carry left&#xa;        args:[reg]&#xa;        description: Rotates the destionation operand left. The carry flag is\&#xa; copied into the lowest bit, and the highest bit is copied into the Carry flag&#xa;flags: *,,,,,,," name="RCL">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="LZU0LIpzS8FF" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="sq0G5CDBhmqp" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gCJHmE4BFVN1" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FkiuHNA7DANI" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LJQaomc4WIwl" comment="name: RCR&#xa;        title: Rotates carry right&#xa;        args:[reg]&#xa;        description: Rotates the destination operand right, using the source\&#xa; operand to determine the number of rotations. The carry flag is copied into \&#xa;the highest bit, and the lowest bit is copied into the Carry flag.&#xa;flags: *,,,,,,," name="RCR">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="zuAkTioL6qfb" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="f6qqFE9YlbY6" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rO4KUJZpaxQM" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="j2ODIKwxPnnc" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9EQhBo4toS46" comment="name: REP&#xa;        title: Repeating string primitive command&#xa;        args:[MOVS: MOVSB: CMPS: CMPSB: CMPSW: SCAS: SCASB: SCASW: STOS: \&#xa;STOSB: STOSW: LODS: LODSB: LODSW]&#xa;description: Repeats a string primitive instruction, using CX as a \&#xa;counter. CX is decremented each time the instruction is repeated, \&#xa;until CX = 0. EG REP MOVSB&#xa;flags: ,,,,,," name="REP">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="C40uwT3ZkXEs" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="l118opknhuVB" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="cJWh89GHNgxW" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="T1NHRSMCRNKF" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gU81A5Vb6ttV" comment="name: REPE&#xa;        title: Repeating string primitive command if equal&#xa;        args:[MOVS: MOVSB: CMPS: CMPSB: CMPSW: SCAS: SCASB: SCASW: STOS: \&#xa;STOSB: STOSW: LODS: LODSB: LODSW]&#xa;        description: Repeats a string primitive instruction, using CX as a \&#xa;counter. CX is decremented each time the instruction is repeated, until CX = 0\&#xa; while the zero flag is set. EG REP MOVSB&#xa;flags: ,,,,*,," name="REPE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="QCOR73OTjtcw" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="JFgkcyxn3vfx" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="OiU8Fi1tC9uL" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CPwGGnlX2RFd" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bbpmih7u43AJ" comment="name: REPNE&#xa;        title: Repeating string primitive command if not equal&#xa;        args:[MOVS: MOVSB: CMPS: CMPSB: CMPSW: SCAS: SCASB: SCASW: STOS: \&#xa;STOSB: STOSW: LODS: LODSB: LODSW]&#xa;        description: Repeats a string primitive instruction, using CX as a \&#xa;counter. CX is decremented each time the instruction is repeated, until CX = 0\&#xa; while the zero flag is clear. EG REP MOVSB&#xa;flags: ,,,,*,," name="REPNE">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="I4eXvotmIiNi" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rtqrL6UlGqAM" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="tWpcPPWz0Llg" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0sY5tgOkaCav" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8tf6DOlBEJG7" comment="name: REPNZ&#xa;        title: Repeating string primitive command if not zero&#xa;        args:[MOVS: MOVSB: CMPS: CMPSB: CMPSW: SCAS: SCASB: SCASW: STOS: \&#xa;STOSB: STOSW: LODS: LODSB: LODSW]&#xa;        description: Repeats a string primitive instruction, using CX as a \&#xa;counter. CX is decremented each time the instruction is repeated, until CX = 0\&#xa; while the zero flag is clear. EG REP MOVSB&#xa;flags: ,,,,*,," name="REPNZ">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="SMOuRzEIQMRa" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0cqanQT3S5aL" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rT89ATpGKUKX" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="s5h6NxCLY2vL" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nHq7jBdaEKeb" comment="name: REPZ&#xa;        title: Repeating string primitive command if zero&#xa;        args:[MOVS: MOVSB: CMPS: CMPSB: CMPSW: SCAS: SCASB: SCASW: STOS: \&#xa;STOSB: STOSW: LODS: LODSB: LODSW]&#xa;        description: Repeats a string primitive instruction, using CX as a \&#xa;counter. CX is decremented each time the instruction is repeated, until CX = 0\&#xa; while the zero flag is set. EG REP MOVSB&#xa;flags: ,,,,*,," name="REPZ">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ygO89XiZwXNd" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Fqwnsp6IBTBa" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QPqqjGPWVFdE" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="OGmdaREqHBb8" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nm7I0lUOzH1Y" comment="name: RET&#xa;        title: Return from procedure&#xa;        args:[None: immed]&#xa;        description: Pop a return address from the stack. An optional argument\&#xa; tells the CPU to add a value to SP after popping the return address.&#xa;flags: ,,,,,," name="RET">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="56igW9PUHeOw" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="iEMxNv3LbSTi" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="xAHufdVSNdiN" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MCmJRnr7zB5M" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="FrOdU40qFk8g" comment="name: ROL&#xa;        title: Rotate left&#xa;        args:[reg]&#xa;        description: Rotates the destination operand left. The highest bit is \&#xa;copied into the Carry flag and moved into the loewst bit position.&#xa;flags: *,,,,,,, this is when 0100" name="ROL">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="tLrothIaxEZn" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WxoV9rsExasU" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="jFyzsKv7BIie" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MjSbRaGxY4Tf" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WVsgnbK9Ikjj" comment="name: ROR&#xa;        title: Rotate right&#xa;        args:[reg]&#xa;        description: Rotates the destination operand right. The lowest bit is\&#xa; copied into both the Carry flag and the highest bit position.&#xa;flags: *,,,,,,," name="ROR">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="u4OLP5dQ2YLD" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Lzfr18WuRLiK" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2zuxBUiixbOk" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="AgrQQY7jXmaW" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="04txdHfnvUDM" comment="name: SAHF&#xa;        title: Store AH into flags&#xa;        args: None&#xa;        description: Copies AH into bits 0 through 7 of the Flags register. \&#xa;The Trap, Interrupt, DIrection, and Overflow flags are not affected.&#xa;flags: ,,,*,*,*,*," name="SAHF">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="s7lYZ2c5v6eL" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3I5Y5e5xiRH6" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WuUYQpmQtfLW" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="v0HqVSAWlE4q" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wOkn15Ku4ZjX" comment="name: SAL&#xa;        title: Shift arithmetic left&#xa;        args:[reg]&#xa;        description: Identical to SHL, only included in the instruction set \&#xa;for completeness.&#xa;flags: *,,,*,*,?,*," name="SAL">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="8ALLUn9ttz94" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2t3n57bxFMUo" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="P6rIDTd7rLur" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="PCjTmSymK1ZP" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Sl9I647VEqwy" comment="name: SAR&#xa;        title: Shift arithmetic right&#xa;        args:[reg]&#xa;        description: Shifts each bit in the destination operand to the right. \&#xa;The lowest bit is copied into the Carry flag, and the highest bit retains its \&#xa;previous value. This hift is often used with signed operands, because it \&#xa;preserves the number's sign.&#xa;flags: *,,,*,*,?,*, this is when 0100" name="SAR">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="LywkGIeKlQGD" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="JukbvHy2PJNu" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="6VlySv0ugACk" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CJEQ8ANP350w" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JH7zRIjdZx1f" comment="name: SBB&#xa;        title: Subtract with borrow&#xa;        args:[reg: mem],[reg: mem: immed]&#xa;        description: Subtracts the source operand from the destination operand\&#xa; and then subtracts the Carry flag from the destination.&#xa;flags: *,,,*,*,*,*," name="SBB">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="tfYsd15r9bqf" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="6M47Q43l1yVF" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="G8X1YmCp3HoS" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZV37T2mXNren" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="N2UOKGqrmrwD" comment="name: SCASB&#xa;        title: Scan string&#xa;        args: None&#xa;        description: Scans a string in memory pointed to by DI for a value \&#xa;that matches AL. DI is increased if the Direction flag is clear (0) and \&#xa;decreased if the Direction flag is set (1).&#xa;flags: *,,,*,*,*,*," name="SCASB">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="8Mw7tAiSRB9K" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rhkEWM1NzZEd" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZJSisJMDJqbb" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7PTtGN484oKa" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SVXlL9NQWoHl" comment="name: SCASW&#xa;        title: Scan string&#xa;        args: None&#xa;        description: Scans a string in memory pointed to by DI for a value \&#xa;that matches AX. DI is increased if the Direction flag is clear (0) and \&#xa;decreased if the Direction flag is set (1).&#xa;flags: ,,,,,," name="SCASW">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="YbD4HaT8eIQq" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="9LrC9BmFXiNP" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="q3rIE0ceV7Op" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="EjFlXXWeqNqy" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="H0Tk7rZMan75" comment="name: SHL&#xa;        title: Shift left&#xa;        args:[reg]&#xa;        description: Shifts each bit in the destination operand to the left.\&#xa; The highest bit is copied into the Carry flag and the lowest bit is filled \&#xa;with a zero.&#xa;flags: *,,,*,*,?,*, this is when 0100" name="SHL">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="X5QgNx5Dubg8" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Ibj8ya6U9IWQ" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="qxYUGwJXumH2" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="dpMBcRGs2zyy" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YxfShxSIkoTK" comment="name: SHR&#xa;        title: Shift right&#xa;        args: None&#xa;        description: SHifts each bit in the destination operand to the right.\&#xa; The highest bit is filled with a zero, and the lowest bit is copied into the\&#xa; Carry flag.&#xa;flags: *,,,*,*,?,*, this is when 0100" name="SHR">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ZRMk5FJcC13j" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FjCFiADEDesY" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZxkRZOa5LFX0" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="AyIumlE0UOFA" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PdoitMi1K0u4" comment="name: STC&#xa;        title: Set the Carry flag&#xa;        args: None&#xa;        description: Sets the Carry flag to 1&#xa;flags: ,,,,,,," name="STC">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="c5VLlH7eNTjR" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="j84BXIL4jgom" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="v5O56RpV3dDu" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="xtvFrpKawMlR" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tYxwA8o70jNr" comment="name: STD&#xa;        title: Set the Direction flag&#xa;        args: None&#xa;        description: Sets the Direction flag to 1&#xa;flags: ,1,,,,," name="STD">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="rfk40gzcjXaF" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="XhQT19seCNxv" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="e3ZzWHRNpMJx" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="S75SpSIK7in6" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ozdbLuZn0eEn" comment="name: STI&#xa;        title: Sets the Interrupt flag&#xa;        args: None&#xa;        description: Sets the Interrupt flag to 1&#xa;flags: ,,1,,,," name="STI">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="qdeLbkqHlvgL" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4W7BCsH3V05V" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="g35PafcMeDxx" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="6Uj68xtCR0Ld" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZGfBSc9Y7scD" comment="name: STOSB&#xa;        title: Store string data&#xa;        args: None&#xa;        description: Stores the value of AL in the memory location addressed \&#xa;by DI. DI is increased if the Direction flag is clear (0), and decreased if \&#xa;the Direction flag is set (1).&#xa;flags: ,,,,,," name="STOSB">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="vvqDQS7esHcB" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pTOGRjrHKVcv" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FSA0LoJs5y4X" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZD3e3frq8D4Z" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="6w49s6eRHh3K" comment="name: STOSW&#xa;        title: Store string data&#xa;        args: None&#xa;        description: Stores the value of AX in the memory location addressed \&#xa;by DI. DI is increased if the Direction flag is clear (0), and decreased if \&#xa;the Direction flag is set (1).&#xa;flags: ,,,,,," name="STOSW">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="FqwMd7sqPztz" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MtAS6Czz7pDV" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FI95ZmEdgGmW" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MOwd5zvPs3rz" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="j8aNONullqMp" comment="name: SUB&#xa;        title: Subtract&#xa;        args:[reg: mem],[reg: mem: immed]&#xa;        description: Subtracts the source opearand from the destination operand&#xa;flags: *,,,*,*,*,*," name="SUB">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="dxTvZFbYtzGN" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pGEgJ4dXsZtU" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="hjI6hC3QKemg" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zgPkUkXH0mxJ" type="B1HTGn9qFKpc" value="" name="i"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="oaog8g8pPRt4" type="dXgnlBJuDYMR" value="" name="inPlace"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="joejYa0M8p0G" comment="name: SYS&#xa;        title: System trap&#xa;        args: None&#xa;        description: Calls a system trap: evaluates based on the last piece \&#xa;of data on the stack&#xa;flags: ,,,,,," name="SYS">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="LAmBYsa9XXdA" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="V93savxDsO6P" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="dfxWeDrN1T6X" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="17tAuuON1SFb" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="iSXkweFxj95b" comment="name: XCHG&#xa;        title: Exchange&#xa;        args:[reg],[reg]&#xa;        description: Exchanges the contents of the source and destination \&#xa;operands&#xa;flags: ,,,,,," name="XCHG">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="RscnD0gM0g2T" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="1Uy2uDbFMLQs" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="B02gVdqD6Ov0" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0BxjI1IJVGJN" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HtgNFcNFnJw3" comment="name: XOR&#xa;        title: Exclusive OR&#xa;        args:[reg: mem],[reg: mem: immed]&#xa;        description: Each bit in the source operand is exclusive ORed with \&#xa;its corresponding bit in the destination. The destination bit is a 1 only when\&#xa; the original source and destination bits are different.&#xa;        flags: 0,,,*,*,?,*,0&#xa;flags: ODISZAP" name="XOR">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="CVnfFSHzlHhk" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="KEMnSdAtTmfe" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="kL0iz2BGtrc8" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RzLCGFFYTZLt" type="B1HTGn9qFKpc" value="" name="i"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KsyBiaI9YbMo" comment="A function for incrementing or decermenting a register.  p is \&#xa;the polarity (-1 for dec, 1 for inc)" name="incdec">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="iWgdLdEktyfk" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rbLIBgCLCzzP" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="PGPAY4sqvqzd" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="PFkvr4jig20p" type="B1HTGn9qFKpc" value="" name="i"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="jC8t95IYKfgs" type="KhT450K8VRPK" value="" name="p"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3MShPQU8bazk" comment="JMP if the flag is true, used for jo, jg, jge, etc." name="jf">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="rl0Ls4DPZAVg" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gFH0vvqbSUCn" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7QVyMAiPU84t" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="XWz87wqlC5j5" type="B1HTGn9qFKpc" value="" name="i"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="1ZgR1sE6Ij5c" type="KhT450K8VRPK" value="" name="flag"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7LPJP8OOh2pg" comment="Tests the arguments to ensure they are legal.&#xa;        Where command is the argument to test and argList is a tuple of legal&#xa;        argument types.&#xa;        Returns a constant detailing the argument type found. Or the _ERROR&#xa;constant if the argument doesnt matchFall thru B is digit Each regster is 2 bytes each memory cell is 1 byte Each memory cell is 1 byte9 more to go&#xa;&quot;CMPSB&quot;: -1,  # Compare bytes in memory&#xa;&quot;CMPSW&quot;: -1,  # Compare words in memory&#xa;&quot;DIV&quot;: 2,  # Unsigned divide&#xa;&quot;IDIV&quot;: 1,  # Signed divide&#xa;&quot;IMUL&quot;: 1,  # Signed multiply&#xa;&quot;LDS&quot;: 2,  # Load pointer using DS&#xa;&quot;LEA&quot;: 2,  # Load effective address&#xa;&quot;LES&quot;: 2,  # Load ES with pointer&#xa;&quot;MUL&quot;: 2,  # Unsigned Multiply&#xa;" name="testArgument">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="HHHqdveKXqeY" type="KhT450K8VRPK"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="s3mAkrkbbkuT" type="KrCnUKAPQR0U" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="n7sMGL0NePe3" type="ycW7NHYsxgDE" value="" name="command"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="X0RC2GsuHe2z" type="B1HTGn9qFKpc" value="" name="numArg"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Uma5VTYIYOeo" type="B1HTGn9qFKpc" value="" name="i"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="heBL3pNYpokp" type="ycW7NHYsxgDE" value="" name="argList"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3ajIEjIgUqlz" type="dXgnlBJuDYMR" value="" name="automaticErrors"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="KrCnUKAPQR0U" xmi.id="7ezOQeshUOsB" parent="5x62bJE31caI" name=""/>
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="iWDvBZRTjpZc" xmi.id="d16RnoGoOy7a" client="JzADoZRtUXt5" name=""/>
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="KrCnUKAPQR0U" xmi.id="D4RZ0W8grPp2" client="iWDvBZRTjpZc" name=""/>
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="iWDvBZRTjpZc" xmi.id="r1JiO9jm5ANQ" client="JzADoZRtUXt5" name=""/>
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="ZXx26WFZwaI3" xmi.id="wrl128QvzSUU" client="JzADoZRtUXt5" name=""/>
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="woLJBS6u0G2V" xmi.id="Azs7RKaKk3Ns" client="JzADoZRtUXt5" name=""/>
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="iWDvBZRTjpZc" xmi.id="U5sD6F3r4Kcz" client="JzADoZRtUXt5" name=""/>
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="ZXx26WFZwaI3" xmi.id="t2nxMNuDHSVS" client="JzADoZRtUXt5" name=""/>
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="woLJBS6u0G2V" xmi.id="X8qpaKFW7F5m" client="JzADoZRtUXt5" name=""/>
     </UML:Namespace.ownedElement>
     <XMI.extension xmi.extender="umbrello">
      <diagrams>
       <diagram showopsig="1" linecolor="#ff0000" snapx="25" showattribassocs="1" snapy="25" linewidth="0" showattsig="1" textcolor="#000000" isopen="1" showpackage="1" showpubliconly="0" showstereotype="1" name="class diagram" font="Sans Serif,9,-1,0,50,0,0,0,0,0" canvasheight="1768" canvaswidth="2291" localid="-1" snapcsgrid="0" showgrid="0" showops="1" griddotcolor="#d3d3d3" backgroundcolor="#ffffff" usefillcolor="1" fillcolor="#ffff00" zoom="82" xmi.id="BvMA2O14AGVX" documentation="" showscope="1" snapgrid="0" showatts="1" type="1">
        <widgets>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="1" showpackage="1" x="-1291" showattsigs="601" showstereotype="1" y="136" showattributes="1" font="Sans Serif,9,-1,5,75,0,0,0,0,0" width="491" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="iWDvBZRTjpZc" showscope="1" height="826" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="1" showpackage="1" x="-2222" showattsigs="601" showstereotype="1" y="13" showattributes="1" font="Sans Serif,9,-1,5,75,0,0,0,0,0" width="301" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="woLJBS6u0G2V" showscope="1" height="70" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="1" showpackage="1" x="-2222" showattsigs="601" showstereotype="1" y="137" showattributes="1" font="Sans Serif,9,-1,5,75,0,0,0,0,0" width="799" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="JzADoZRtUXt5" showscope="1" height="826" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="1" showpackage="1" x="-725" showattsigs="601" showstereotype="1" y="136" showattributes="1" font="Sans Serif,9,-1,5,75,0,0,0,0,0" width="787" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="KrCnUKAPQR0U" showscope="1" height="1624" showopsigs="601"/>
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="1" showpackage="1" x="-1683" showattsigs="601" showstereotype="1" y="14" showattributes="1" font="Sans Serif,9,-1,5,75,0,0,0,0,0" width="273" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="ZXx26WFZwaI3" showscope="1" height="49" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="0" showoperations="1" textcolor="#000000" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="-1332" showattsigs="601" showstereotype="1" y="34" showattributes="1" font="Sans Serif,9,-1,0,75,0,0,0,0,0" width="82" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="xEPLJ8NqdJqk" showscope="1" height="28" showopsigs="601"/>
        </widgets>
        <messages/>
        <associations>
         <assocwidget indexa="1" indexb="1" usesdiagramusefillcolor="1" widgetaid="iWDvBZRTjpZc" usesdiagramfillcolor="0" fillcolor="#ffff00" linecolor="none" totalcounta="3" xmi.id="D4RZ0W8grPp2" widgetbid="KrCnUKAPQR0U" totalcountb="3" type="502" textcolor="none" usefillcolor="1" linewidth="none">
          <linepath>
           <startpoint startx="-800" starty="136"/>
           <endpoint endx="-725" endy="136"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" usesdiagramusefillcolor="1" widgetaid="JzADoZRtUXt5" usesdiagramfillcolor="1" fillcolor="none" linecolor="none" totalcounta="2" xmi.id="U5sD6F3r4Kcz" widgetbid="iWDvBZRTjpZc" totalcountb="2" type="502" textcolor="none" usefillcolor="1" linewidth="none">
          <linepath>
           <startpoint startx="-1423" starty="137"/>
           <endpoint endx="-1291" endy="137"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" indexb="1" usesdiagramusefillcolor="0" widgetaid="JzADoZRtUXt5" usesdiagramfillcolor="1" fillcolor="none" linecolor="none" totalcounta="3" xmi.id="t2nxMNuDHSVS" widgetbid="ZXx26WFZwaI3" totalcountb="2" type="502" textcolor="none" usefillcolor="1" linewidth="none">
          <linepath>
           <startpoint startx="-1683" starty="137"/>
           <endpoint endx="-1683" endy="63"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" indexb="1" usesdiagramusefillcolor="1" widgetaid="JzADoZRtUXt5" usesdiagramfillcolor="0" fillcolor="#ffff00" linecolor="none" totalcounta="3" xmi.id="X8qpaKFW7F5m" widgetbid="woLJBS6u0G2V" totalcountb="2" type="502" textcolor="none" usefillcolor="1" linewidth="none">
          <linepath>
           <startpoint startx="-2222" starty="137"/>
           <endpoint endx="-2222" endy="83"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" linecolor="none" indexb="2" usesdiagramfillcolor="0" widgetbid="iWDvBZRTjpZc" linewidth="none" textcolor="none" usesdiagramusefillcolor="16" totalcounta="3" totalcountb="3" widgetaid="KrCnUKAPQR0U" visibilityA="0" visibilityB="0" usefillcolor="1" fillcolor="#ffff00" changeabilityA="900" xmi.id="NCm1XlMH8UIQ" changeabilityB="900" type="510">
          <linepath>
           <startpoint startx="-725" starty="136"/>
           <endpoint endx="-800" endy="136"/>
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" textcolor="none" usesdiagramusefillcolor="1" x="-798" showstereotype="1" y="138" text="machine" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="+" role="710" width="70" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="H7K7UEHqO1rv" height="18"/>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" usesdiagramusefillcolor="32" widgetaid="ZXx26WFZwaI3" usesdiagramfillcolor="0" fillcolor="#ffff00" linecolor="none" totalcounta="2" xmi.id="p5HjeZnYiZIk" widgetbid="xEPLJ8NqdJqk" totalcountb="2" type="500" textcolor="none" usefillcolor="1" linewidth="none">
          <linepath>
           <startpoint startx="-1410" starty="45"/>
           <endpoint endx="-1332" endy="45"/>
          </linepath>
         </assocwidget>
        </associations>
       </diagram>
      </diagrams>
     </XMI.extension>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Use Case View" name="Use Case View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Component View" name="Component View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Deployment View" name="Deployment View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Entity Relationship Model" name="Entity Relationship Model">
     <UML:Namespace.ownedElement/>
    </UML:Model>
   </UML:Namespace.ownedElement>
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello">
  <docsettings viewid="BvMA2O14AGVX" uniqueid="NHo9IBaNaPsZ" documentation=""/>
  <listview>
   <listitem open="1" type="800" id="Views">
    <listitem open="1" type="821" id="Component View"/>
    <listitem open="1" type="827" id="Deployment View"/>
    <listitem open="1" type="836" id="Entity Relationship Model"/>
    <listitem open="1" type="801" id="Logical View">
     <listitem open="0" type="807" id="BvMA2O14AGVX" label="class diagram"/>
     <listitem open="0" type="813" id="KrCnUKAPQR0U">
      <listitem open="0" type="815" id="muzGGqQaICJD"/>
      <listitem open="0" type="814" id="DuWwEnwkCBo4"/>
      <listitem open="0" type="814" id="trNlJ0HdgNzK"/>
      <listitem open="0" type="814" id="AYqPgr5b4yJ4"/>
      <listitem open="0" type="814" id="k6IyRpCCkmNv"/>
      <listitem open="0" type="814" id="kAc6MBq4H83i"/>
      <listitem open="0" type="814" id="fhErt0vK8ZEC"/>
      <listitem open="0" type="814" id="VSjqLDAFWT2I"/>
      <listitem open="0" type="814" id="xFtizGdSjKI2"/>
      <listitem open="0" type="814" id="Ji7OePQrHulW"/>
      <listitem open="0" type="814" id="T8gt5MfDsUcW"/>
      <listitem open="0" type="814" id="XRF4sIMcSzim"/>
      <listitem open="0" type="815" id="QYwURJkzth18"/>
      <listitem open="0" type="815" id="1UzcOIbaLae2"/>
      <listitem open="0" type="815" id="cj8QDfbxmM2S"/>
      <listitem open="0" type="815" id="lH7yymMJ0hQa"/>
      <listitem open="0" type="815" id="G3LTxmdaZ5G1"/>
      <listitem open="0" type="815" id="ahep6IyIXi3r"/>
      <listitem open="0" type="815" id="PmlyVnaKqqjI"/>
      <listitem open="0" type="815" id="Ldsw65eP2WZG"/>
      <listitem open="0" type="815" id="SFpkEQ8HdvJM"/>
      <listitem open="0" type="815" id="gFkTuzQvOfZf"/>
      <listitem open="0" type="815" id="VRhGT4tUqRsE"/>
      <listitem open="0" type="815" id="Yl97Sp9EPboQ"/>
      <listitem open="0" type="815" id="CUI59fOe9tXF"/>
      <listitem open="0" type="815" id="242jfNZw5zIf"/>
      <listitem open="0" type="815" id="JmmLY74izfvs"/>
      <listitem open="0" type="815" id="0mXR1NOLE3ej"/>
      <listitem open="0" type="815" id="58USpWqruX8L"/>
      <listitem open="0" type="815" id="mrKJ7QOai5x6"/>
      <listitem open="0" type="815" id="t9XbDUf14vNI"/>
      <listitem open="0" type="815" id="vj8mDgTE3z8y"/>
      <listitem open="0" type="815" id="KsyBiaI9YbMo"/>
      <listitem open="0" type="815" id="lA21VNSU97Xu"/>
      <listitem open="0" type="815" id="ikHIL4MHJtKe"/>
      <listitem open="0" type="815" id="aaCd2i0abdQL"/>
      <listitem open="0" type="815" id="YlPVQWRpfyoN"/>
      <listitem open="0" type="815" id="rY1HVFAxso3T"/>
      <listitem open="0" type="815" id="SSY8mwFKQLjk"/>
      <listitem open="0" type="815" id="l5C8WDIsUld5"/>
      <listitem open="0" type="815" id="3MShPQU8bazk"/>
      <listitem open="0" type="815" id="Uhni5vRgJ2jR"/>
      <listitem open="0" type="815" id="wDrjpBaKu48f"/>
      <listitem open="0" type="815" id="K05RUgL7qbe6"/>
      <listitem open="0" type="815" id="msmUdlh33zMx"/>
      <listitem open="0" type="815" id="06MmBhmyS18F"/>
      <listitem open="0" type="815" id="0R9yHcaskDXr"/>
      <listitem open="0" type="815" id="1IZiywhDrWD1"/>
      <listitem open="0" type="815" id="5P3L0UYYaxyC"/>
      <listitem open="0" type="815" id="J3UkbMDYlC84"/>
      <listitem open="0" type="815" id="4zWVYIVPC31L"/>
      <listitem open="0" type="815" id="6xbcMxh3o8vj"/>
      <listitem open="0" type="815" id="Ev0uZuxDS4c9"/>
      <listitem open="0" type="815" id="x4t57Wn06gOi"/>
      <listitem open="0" type="815" id="bbADbst5OcfX"/>
      <listitem open="0" type="815" id="PEXpmqpD3szp"/>
      <listitem open="0" type="815" id="Md3ddKeVNqPJ"/>
      <listitem open="0" type="815" id="lXa100sk2Csu"/>
      <listitem open="0" type="815" id="1OWwmJs7zWVp"/>
      <listitem open="0" type="815" id="X1tmg7mgCsbk"/>
      <listitem open="0" type="815" id="Khck9Vpg6ZPY"/>
      <listitem open="0" type="815" id="ttsqHEu8Ne66"/>
      <listitem open="0" type="815" id="8VlMIZsIHUdb"/>
      <listitem open="0" type="815" id="CBQbAUIiOEVk"/>
      <listitem open="0" type="815" id="Evblw2TPjsEe"/>
      <listitem open="0" type="815" id="yFdEElSEL3wm"/>
      <listitem open="0" type="814" id="jkoqH02BsPu9"/>
      <listitem open="0" type="815" id="l1FEhKZPKJvf"/>
      <listitem open="0" type="815" id="XFBC4hWBkDc6"/>
      <listitem open="0" type="815" id="VmCbolmTo7s5"/>
      <listitem open="0" type="815" id="UxWKU16IRBKU"/>
      <listitem open="0" type="815" id="rzXPW9Q2pjxg"/>
      <listitem open="0" type="815" id="5SEa60btDaT6"/>
      <listitem open="0" type="815" id="et43ANYSDvuf"/>
      <listitem open="0" type="814" id="NCm1XlMH8UIQ"/>
      <listitem open="0" type="815" id="XqMDPv4I1OP2"/>
      <listitem open="0" type="815" id="ZT2wWfnhrdJZ"/>
      <listitem open="0" type="815" id="jUYgtQ8w4EoM"/>
      <listitem open="0" type="815" id="gpUQRr2SJYX1"/>
      <listitem open="0" type="815" id="j00yWCa0RXT3"/>
      <listitem open="0" type="815" id="pdmcySpBBTfP"/>
      <listitem open="0" type="815" id="z3Hg77MfnBMu"/>
      <listitem open="0" type="815" id="pwqPXZ6DcSgo"/>
      <listitem open="0" type="815" id="WhfTwhxipa6P"/>
      <listitem open="0" type="815" id="UO2WX1SPu86Q"/>
      <listitem open="0" type="815" id="Q0fjR9Yu8lHB"/>
      <listitem open="0" type="815" id="P3RComOgeXhI"/>
      <listitem open="0" type="815" id="LJQaomc4WIwl"/>
      <listitem open="0" type="815" id="9EQhBo4toS46"/>
      <listitem open="0" type="815" id="gU81A5Vb6ttV"/>
      <listitem open="0" type="815" id="bbpmih7u43AJ"/>
      <listitem open="0" type="815" id="8tf6DOlBEJG7"/>
      <listitem open="0" type="815" id="nHq7jBdaEKeb"/>
      <listitem open="0" type="815" id="nm7I0lUOzH1Y"/>
      <listitem open="0" type="815" id="FrOdU40qFk8g"/>
      <listitem open="0" type="815" id="WVsgnbK9Ikjj"/>
      <listitem open="0" type="815" id="04txdHfnvUDM"/>
      <listitem open="0" type="815" id="wOkn15Ku4ZjX"/>
      <listitem open="0" type="815" id="Sl9I647VEqwy"/>
      <listitem open="0" type="815" id="JH7zRIjdZx1f"/>
      <listitem open="0" type="815" id="N2UOKGqrmrwD"/>
      <listitem open="0" type="815" id="SVXlL9NQWoHl"/>
      <listitem open="0" type="815" id="H0Tk7rZMan75"/>
      <listitem open="0" type="815" id="YxfShxSIkoTK"/>
      <listitem open="0" type="815" id="PdoitMi1K0u4"/>
      <listitem open="0" type="815" id="tYxwA8o70jNr"/>
      <listitem open="0" type="815" id="ozdbLuZn0eEn"/>
      <listitem open="0" type="815" id="ZGfBSc9Y7scD"/>
      <listitem open="0" type="815" id="6w49s6eRHh3K"/>
      <listitem open="0" type="815" id="j8aNONullqMp"/>
      <listitem open="0" type="815" id="joejYa0M8p0G"/>
      <listitem open="0" type="814" id="mPA1JvXzdjoU"/>
      <listitem open="0" type="815" id="7LPJP8OOh2pg"/>
      <listitem open="0" type="815" id="iSXkweFxj95b"/>
      <listitem open="0" type="815" id="HtgNFcNFnJw3"/>
     </listitem>
     <listitem open="0" type="830" id="Datatypes">
      <listitem open="1" type="829" id="ycW7NHYsxgDE"/>
      <listitem open="1" type="829" id="dXgnlBJuDYMR"/>
      <listitem open="1" type="829" id="o5ZfChsNbFVd"/>
      <listitem open="1" type="829" id="Wyv1NIJKupRF"/>
      <listitem open="1" type="829" id="Q7kzKDbviHgU"/>
      <listitem open="1" type="829" id="LVHZn7BbCjEM"/>
      <listitem open="1" type="829" id="B1HTGn9qFKpc"/>
      <listitem open="1" type="829" id="PbYZKmwjreg9"/>
      <listitem open="1" type="829" id="5x62bJE31caI"/>
      <listitem open="1" type="829" id="cdtM9X7gT2fq"/>
      <listitem open="1" type="829" id="QzMbXi2tBISy"/>
      <listitem open="1" type="829" id="KhT450K8VRPK"/>
      <listitem open="1" type="829" id="SkNWJ25bjYfn"/>
      <listitem open="1" type="829" id="rH4aWl2vkOWG"/>
      <listitem open="1" type="829" id="XfANJoW94bhY"/>
      <listitem open="1" type="829" id="5X9GpZFE8llR"/>
     </listitem>
     <listitem open="0" type="813" id="ZXx26WFZwaI3">
      <listitem open="0" type="815" id="YFyEmExPbYDd"/>
      <listitem open="0" type="815" id="aZD6QsV0DfMX"/>
     </listitem>
     <listitem open="1" type="818" id="u8ok468tDfz5">
      <listitem open="0" type="813" id="xEPLJ8NqdJqk"/>
     </listitem>
     <listitem open="1" type="813" id="iWDvBZRTjpZc">
      <listitem open="0" type="815" id="xnXW5RQb0GwR"/>
      <listitem open="0" type="814" id="PNYnONh9Zr1E"/>
      <listitem open="0" type="815" id="spfduyyMz56c"/>
      <listitem open="0" type="814" id="ypCAP9kiYB7p"/>
      <listitem open="0" type="815" id="kBWX956Ce8dJ"/>
      <listitem open="0" type="814" id="KIHbvJOlpPQa"/>
      <listitem open="0" type="814" id="LlTVnGPl5bwS"/>
      <listitem open="0" type="814" id="9vQPLqlMKY96"/>
      <listitem open="0" type="815" id="akFwBYV6jCdZ"/>
      <listitem open="0" type="814" id="WHcjRiPo5vaU"/>
      <listitem open="0" type="815" id="gu9X76creRtp"/>
      <listitem open="0" type="815" id="D1VbNvpJd0rl"/>
      <listitem open="0" type="815" id="7tWpLmRqQJwQ"/>
      <listitem open="0" type="815" id="UdK74BwXn6wt"/>
      <listitem open="0" type="815" id="HMSDpMBTm8JN"/>
      <listitem open="0" type="815" id="5pEURCue0OBZ"/>
      <listitem open="0" type="815" id="9ulz8Dde9em6"/>
      <listitem open="0" type="815" id="lMd4hc3tG2Dh"/>
      <listitem open="0" type="815" id="cpLuire29mFl"/>
      <listitem open="0" type="815" id="q8bHt6OHaOu8"/>
      <listitem open="0" type="815" id="gomsL5j5i7Wt"/>
      <listitem open="0" type="815" id="ziw3wEwUZrLR"/>
      <listitem open="0" type="815" id="qUfAK3yHReyS"/>
      <listitem open="0" type="815" id="H3EbhDQTYqrW"/>
      <listitem open="0" type="815" id="kybnWAEdAXV8"/>
      <listitem open="0" type="815" id="9Nyt6xzsc9KP"/>
      <listitem open="0" type="815" id="YHIEUwSXaLFS"/>
      <listitem open="0" type="815" id="e1yE7JrIdM87"/>
      <listitem open="0" type="815" id="bvY3syOJp63X"/>
      <listitem open="0" type="815" id="ZJR9egawiJFJ"/>
      <listitem open="0" type="815" id="1LuXRbB0fcW3"/>
      <listitem open="0" type="815" id="EnRzrLrQoZPP"/>
      <listitem open="0" type="815" id="bpYledBiQMcJ"/>
      <listitem open="0" type="815" id="LIh3buKKke6p"/>
      <listitem open="0" type="815" id="o8SEtHfE4m8n"/>
      <listitem open="0" type="815" id="Wa59DZD4stPQ"/>
      <listitem open="0" type="815" id="vlr8KFSMOz1N"/>
      <listitem open="0" type="815" id="uHmEFf96tNij"/>
      <listitem open="0" type="815" id="uM2fmNP9rqV2"/>
      <listitem open="0" type="815" id="zsCsbBFSf1Bd"/>
      <listitem open="0" type="815" id="LPbyOlbuV6ig"/>
      <listitem open="0" type="815" id="snufWNXrpkFB"/>
      <listitem open="0" type="814" id="0UnponbPA4pw"/>
      <listitem open="0" type="814" id="JPQOI0qbFQRO"/>
      <listitem open="0" type="815" id="oADFJp0LuRm4"/>
      <listitem open="0" type="815" id="JAiyimL9Ce5Q"/>
      <listitem open="0" type="814" id="JHbs8a4RrK0m"/>
      <listitem open="0" type="815" id="1P71gRPM521c"/>
      <listitem open="0" type="815" id="cXqtBxew2lDl"/>
      <listitem open="0" type="815" id="ZF2DV88yOMSF"/>
      <listitem open="0" type="815" id="STy5RpqccI4B"/>
      <listitem open="0" type="815" id="mhSnxMC4nlVu"/>
      <listitem open="0" type="815" id="l7toe6sp5UDT"/>
      <listitem open="0" type="815" id="AnUTQZVulwXu"/>
      <listitem open="0" type="815" id="lcEa3Ca0EBtH"/>
      <listitem open="0" type="815" id="aOYSnIUMe2AT"/>
      <listitem open="0" type="815" id="Q2kQOv0Gp9ZC"/>
      <listitem open="0" type="815" id="rh61FcAdsGf2"/>
      <listitem open="0" type="815" id="xLBlit7UAwfc"/>
      <listitem open="0" type="815" id="0qYP7UpCenDt"/>
      <listitem open="0" type="815" id="f03V642rjAak"/>
      <listitem open="0" type="814" id="dOVSmv0ICczc"/>
      <listitem open="0" type="815" id="CDRMpXnYTBcl"/>
      <listitem open="0" type="815" id="w9lzcyQAeF8x"/>
      <listitem open="0" type="815" id="R0jvZvVNBt4z"/>
     </listitem>
     <listitem open="1" type="813" id="woLJBS6u0G2V">
      <listitem open="0" type="815" id="uEBrYlQLPk7D"/>
      <listitem open="0" type="814" id="NHo9IBaNaPsZ"/>
      <listitem open="0" type="815" id="bW3ZYwrAInl8"/>
      <listitem open="0" type="814" id="YQVtHWSoSSXv"/>
     </listitem>
     <listitem open="1" type="813" id="JzADoZRtUXt5">
      <listitem open="0" type="814" id="SsHTe44RUav0"/>
      <listitem open="0" type="814" id="OpIRPCt8r2Ne"/>
      <listitem open="0" type="814" id="Zy2jVvmvo3MQ"/>
      <listitem open="0" type="814" id="YwsMDBYhLt0Y"/>
      <listitem open="0" type="814" id="mSYWYy1unJJC"/>
      <listitem open="0" type="814" id="5PrXzkXYePsq"/>
      <listitem open="0" type="814" id="UCKLDixTAZv5"/>
      <listitem open="0" type="814" id="leBHpG4xBTMX"/>
      <listitem open="0" type="814" id="J5rbd0fwj8SX"/>
      <listitem open="0" type="814" id="ISbSvvxE0onb"/>
      <listitem open="0" type="815" id="dED9Y2uicNgH"/>
      <listitem open="0" type="815" id="hmvLh8LsUis0"/>
      <listitem open="0" type="815" id="5H3c7QmIFRKy"/>
      <listitem open="0" type="815" id="vkHEmhTkrVJh"/>
      <listitem open="0" type="815" id="cStytObD1PSo"/>
      <listitem open="0" type="815" id="1Lfm5deNWKqm"/>
      <listitem open="0" type="815" id="66j5UCr6Uzmo"/>
      <listitem open="0" type="815" id="mWLZcjgdNTWd"/>
      <listitem open="0" type="815" id="i9uUPJXk0C9z"/>
      <listitem open="0" type="815" id="D7xFEbJXw5xX"/>
      <listitem open="0" type="815" id="9705MQ6wt69Z"/>
      <listitem open="0" type="815" id="BB1SAhJvg1Uk"/>
      <listitem open="0" type="815" id="IGTX8N5zcCP7"/>
      <listitem open="0" type="815" id="laA8U4SbrJMK"/>
      <listitem open="0" type="815" id="vJlcZOLOarsK"/>
      <listitem open="0" type="815" id="s7eYVwQTYqOC"/>
      <listitem open="0" type="815" id="zC90RgaPEQcX"/>
      <listitem open="0" type="815" id="nHdL8VfQJ6Cs"/>
      <listitem open="0" type="815" id="J4vWSV1tnm0u"/>
      <listitem open="0" type="815" id="kHZkWa9tZAKx"/>
      <listitem open="0" type="815" id="aVR4tq4LrS5r"/>
      <listitem open="0" type="815" id="CBKj19oETmxv"/>
      <listitem open="0" type="815" id="tjwSmWwuZrq7"/>
      <listitem open="0" type="815" id="yG59LhgORScY"/>
      <listitem open="0" type="815" id="HILdMHtGESzc"/>
      <listitem open="0" type="815" id="hcsCYTbkGol5"/>
      <listitem open="0" type="815" id="0IQa8vfxx3p6"/>
      <listitem open="0" type="815" id="hiDReIHXy4Kh"/>
      <listitem open="0" type="815" id="GWVj7mkBgVVM"/>
      <listitem open="0" type="815" id="ADwstFDps3jU"/>
      <listitem open="0" type="815" id="XZtLpFIqKOWt"/>
      <listitem open="0" type="815" id="T7W15BhhAH08"/>
      <listitem open="0" type="815" id="esY3msS4meFy"/>
      <listitem open="0" type="815" id="RhKyrcujPtKP"/>
      <listitem open="0" type="815" id="f2gRHbzinOUN"/>
      <listitem open="0" type="815" id="mxQ4v4USoXQa"/>
      <listitem open="0" type="815" id="FFLEoVLDJzgs"/>
      <listitem open="0" type="815" id="hljJ7PaMHWMC"/>
      <listitem open="0" type="815" id="1U6n6LjERLBI"/>
      <listitem open="0" type="815" id="CSNdoWtDUOO1"/>
      <listitem open="0" type="815" id="w64HiMQYXGfy"/>
      <listitem open="0" type="815" id="qjsEKzOYcEff"/>
      <listitem open="0" type="815" id="N5oJezhFTX68"/>
      <listitem open="0" type="815" id="dnSyqYdKiEhy"/>
      <listitem open="0" type="815" id="vFndSSZP1EXa"/>
      <listitem open="0" type="815" id="s83pFtVN0bA7"/>
      <listitem open="0" type="815" id="PHAelWrwCC4I"/>
      <listitem open="0" type="815" id="j6zBmp9NxbBO"/>
     </listitem>
    </listitem>
    <listitem open="1" type="802" id="Use Case View"/>
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="Python">
    <sourcecode value=":&#xa;if self.breakpointDClickTime==0:&#xa;  self.breakpointDClickTime=time.time()&#xa;&#xa;else:&#xa;  if time.time()-self.breakpointDClickTime>self._DOUBLECLICKTIME:&#xa;    self.breakpointDClickTime=time.time()&#xa;    return&#xa;&#xa;  self.breakpointDClickTime=0&#xa;  breakPoint=self.lineNumberTV.get_iter_at_location(event.x,&#xa;  event.y).get_line()start=self.linesBuffer.get_iter_at_line(breakPoint)&#xa;  if breakPoint+1==self.linesBuffer.get_line_count():&#xa;    end=self.linesBuffer.get_end_iter()&#xa;&#xa;  else:&#xa;    end=self.linesBuffer.get_iter_at_line_offset(breakPoint+1,&#xa;    0)&#xa;  if self.machine.isBreakPoint(breakPoint):&#xa;    self.machine.removeBreakPoint(breakPoint)&#xa;    self.linesBuffer.remove_tag(self.textTagBreakpoint,start,end)&#xa;&#xa;  else:&#xa;    self.machine.addBreakPoint(breakPoint)&#xa;    self.linesBuffer.apply_tag(self.textTagBreakpoint,start,end)&#xa;&#xa;&#xa;" id="mxQ4v4USoXQa"/>
    <sourcecode value=":&#xa;fileChooser=Gtk.FileChooserDialog(title=&quot;Choose A File&quot;,&#xa;parent=self.win,buttons=(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL,Gtk.STOCK_OPEN,Gtk.ResponseType.OK))response=fileChooser.run()&#xa;fileName=None&#xa;if response==Gtk.ResponseType.OK:&#xa;  fileName=fileChooser.get_filename()&#xa;&#xa;fileChooser.destroy()&#xa;if fileName is None:&#xa;  return&#xa;&#xa;self.openFile(fileName)&#xa;" id="tjwSmWwuZrq7"/>
    <sourcecode value=":&#xa;try:&#xa;  self.new()&#xa;  self.fileName=None&#xa;  f=open(fileName,'r')&#xa;  self.codeString=f.read()&#xa;  self.codeBuffer.set_text(self.codeString)&#xa;  f.seek(0)&#xa;  self.syntaxHighlight(f)&#xa;  f.close()&#xa;  self.outBuffer.set_text(&quot;&quot;)&#xa;  self.fileName=fileName&#xa;  self.updateWindowTitle()&#xa;&#xa;except IOError:&#xa;  self.outPut(&quot;There was a fatal issue opening &quot;+fileName&#xa;  +&quot;. Are you sure it's a file?&quot;)&#xa;" id="CBKj19oETmxv"/>
    <sourcecode value=":&#xa;if self.shrunk:&#xa;  self.notebook.set_visible(True)&#xa;  self.separatorLabel.set_angle(90)&#xa;  self.separatorLabel.set_text(&quot;^ hide ^&quot;)&#xa;  self.shrunk=False&#xa;&#xa;else:&#xa;  self.notebook.set_visible(False)&#xa;  self.separatorLabel.set_angle(270)&#xa;  self.separatorLabel.set_text(&quot;^ show ^&quot;)&#xa;  self.shrunk=True&#xa;&#xa;" id="vkHEmhTkrVJh"/>
    <sourcecode value=":&#xa;self.commentLine=-1&#xa;def handleSyntaxHighlightingToken(typeOfToken,token,(srow,scol),&#xa;(erow,ecol),line):&#xa;  tokenStart=self.codeBuffer.get_iter_at_line_offset(lineOffset&#xa;  +srow-1,scol)if srow==self.codeBuffer.get_line_count():&#xa;    endOfLine=self.codeBuffer.get_end_iter()&#xa;&#xa;  else:&#xa;    endOfLine=self.codeBuffer.get_iter_at_line_offset(lineOffset&#xa;    +srow,0)&#xa;  tokenRep=repr(token).upper().strip(&quot;'&quot;)&#xa;  if tokenize.tok_name[typeOfToken]==&quot;ENDMARKER&quot;:&#xa;    self.updateLineCounter()&#xa;&#xa;  elif repr(token)==&quot;'!'&quot;:&#xa;    self.commentLine=line&#xa;    self.codeBuffer.apply_tag(self.textTagLightGreyText,&#xa;    tokenStart,endOfLine)&#xa;  comment=self.commentLine==line&#xa;  if tokenize.tok_name[typeOfToken]==&quot;NAME&quot;:&#xa;    tokenEnd=self.codeBuffer.get_iter_at_line_offset(lineOffset+&#xa;    erow-1,ecol)if not comment:&#xa;      self.codeBuffer.remove_all_tags(tokenStart,tokenEnd)&#xa;      if tokenRep in self.functions:&#xa;        self.codeBuffer.apply_tag(self.textTagBold,&#xa;        tokenStart,tokenEnd)&#xa;      elif tokenRep in self.machine.getRegisterNames():&#xa;        self.codeBuffer.apply_tag(self.textTagBold,&#xa;        tokenStart,tokenEnd)self.codeBuffer.apply_tag(self.textTagBlueText,&#xa;        tokenStart,tokenEnd)&#xa;      elif tokenRep in self.machine.getEightBitRegisterNames():&#xa;        self.codeBuffer.apply_tag(self.textTagBlueText,&#xa;        tokenStart,tokenEnd)&#xa;      elif tokenRep in[&quot;SECT&quot;,&quot;DATA&quot;,&quot;BSS&quot;,&quot;TEXT&quot;]:&#xa;        self.codeBuffer.apply_tag(self.textTagBold,&#xa;        tokenStart,tokenEnd)self.codeBuffer.apply_tag(self.textTagGreyText,&#xa;        tokenStart,tokenEnd)&#xa;      else:&#xa;        self.codeBuffer.apply_tag(self.textTagRedText,&#xa;        tokenStart,tokenEnd)&#xa;&#xa;&#xa;  elif tokenize.tok_name[typeOfToken]==&quot;NUMBER&quot;:&#xa;    tokenEnd=self.codeBuffer.get_iter_at_line_offset(lineOffset+&#xa;    erow-1,ecol)self.codeBuffer.remove_all_tags(tokenStart,tokenEnd)&#xa;    self.codeBuffer.apply_tag(self.textTagGreenText,&#xa;    tokenStart,tokenEnd)&#xa;&#xa;try:&#xa;  tokenize.tokenize(f.readline,handleSyntaxHighlightingToken)&#xa;&#xa;except Exception:&#xa;&#xa;" id="qjsEKzOYcEff"/>
    <sourcecode value=":&#xa;self.separatorLabel.set_name(&quot;separatorLabelOver&quot;+str(self.shrunk))&#xa;" id="IGTX8N5zcCP7"/>
    <sourcecode value=":&#xa;self.separatorLabel.set_name(&quot;separatorLabel&quot;+str(self.shrunk))&#xa;" id="9705MQ6wt69Z"/>
    <sourcecode value=":&#xa;lines=[&quot; &quot;+str(x)for x in range(self.codeBuffer.get_line_count())]&#xa;self.linesBuffer.set_text(&quot;\n&quot;.join(lines))&#xa;" id="dnSyqYdKiEhy"/>
    <sourcecode value=":&#xa;if self.machine.isRunningAll():&#xa;  return&#xa;&#xa;self.oFlagOutMachine.set_text(str(int(self.machine.getFlag('O'))))&#xa;self.dFlagOutMachine.set_text(str(int(self.machine.getFlag('D'))))&#xa;self.iFlagOutMachine.set_text(str(int(self.machine.getFlag('I'))))&#xa;self.sFlagOutMachine.set_text(str(int(self.machine.getFlag('S'))))&#xa;self.zFlagOutMachine.set_text(str(int(self.machine.getFlag('Z'))))&#xa;self.aFlagOutMachine.set_text(str(int(self.machine.getFlag('A'))))&#xa;self.pFlagOutMachine.set_text(str(int(self.machine.getFlag('P'))))&#xa;self.cFlagOutMachine.set_text(str(int(self.machine.getFlag('C'))))&#xa;if self.displayInHex:&#xa;  hexA=self.machine.intToHex(self.machine.getRegister('AX'))&#xa;  regAText=&quot;0&quot;*(4-len(hexA))+hexA&#xa;  regALText=self.machine.intToHex(&#xa;  self.machine.getEightBitRegister('AL'))regAHText=self.machine.intToHex(&#xa;  self.machine.getEightBitRegister('AH'))hexB=self.machine.intToHex(self.machine.getRegister('BX'))&#xa;  regBText=&quot;0&quot;*(4-len(hexB))+hexB&#xa;  regBLText=self.machine.intToHex(&#xa;  self.machine.getEightBitRegister('BL'))regBHText=self.machine.intToHex(&#xa;  self.machine.getEightBitRegister('BH'))hexC=self.machine.intToHex(self.machine.getRegister('CX'))&#xa;  regCText=&quot;0&quot;*(4-len(hexC))+hexC&#xa;  regCLText=self.machine.intToHex(&#xa;  self.machine.getEightBitRegister('CL'))regCHText=self.machine.intToHex(&#xa;  self.machine.getEightBitRegister('CH'))hexD=self.machine.intToHex(self.machine.getRegister('DX'))&#xa;  regDText=&quot;0&quot;*(4-len(hexD))+hexD&#xa;  regDLText=self.machine.intToHex(&#xa;  self.machine.getEightBitRegister('DL'))regDHText=self.machine.intToHex(&#xa;  self.machine.getEightBitRegister('DH'))hexBP=self.machine.intToHex(self.machine.getRegister('BP'))&#xa;  regBPText=&quot;0&quot;*(4-len(hexBP))+hexBP&#xa;  hexSP=self.machine.intToHex(self.machine.getRegister('SP'))&#xa;  regSPText=&quot;0&quot;*(4-len(hexSP))+hexSP&#xa;  hexDI=self.machine.intToHex(self.machine.getRegister('DI'))&#xa;  regDIText=&quot;0&quot;*(4-len(hexDI))+hexDI&#xa;  hexSI=self.machine.intToHex(self.machine.getRegister('SI'))&#xa;  regSIText=&quot;0&quot;*(4-len(hexSI))+hexSI&#xa;  hexPC=self.machine.intToHex(self.machine.getRegister('PC'))&#xa;  regPCText=&quot;0&quot;*(4-len(hexPC))+hexPC&#xa;  memToDisplay=[self.machine.intToHex(ord(x))&#xa;  for x in self.machine.getFromMemoryAddress(0,144)]self.colourMemory()&#xa;&#xa;else:&#xa;  regAText=str(self.machine.getRegister('AX'))&#xa;  regAHText=str(self.machine.getEightBitRegister('AH'))&#xa;  regALText=str(self.machine.getEightBitRegister('AL'))&#xa;  regBText=str(self.machine.getRegister('BX'))&#xa;  regBHText=str(self.machine.getEightBitRegister('BH'))&#xa;  regBLText=str(self.machine.getEightBitRegister('BL'))&#xa;  regCText=str(self.machine.getRegister('CX'))&#xa;  regCHText=str(self.machine.getEightBitRegister('CH'))&#xa;  regCLText=str(self.machine.getEightBitRegister('CL'))&#xa;  regDText=str(self.machine.getRegister('DX'))&#xa;  regDHText=str(self.machine.getEightBitRegister('DH'))&#xa;  regDLText=str(self.machine.getEightBitRegister('DL'))&#xa;  regBPText=str(self.machine.getRegister('BP'))&#xa;  regSPText=str(self.machine.getRegister('SP'))&#xa;  regPCText=str(self.machine.getRegister('PC'))&#xa;  regDIText=str(self.machine.getRegister('DI'))&#xa;  regSIText=str(self.machine.getRegister('SI'))&#xa;  memToDisplay=self.machine.getFromMemoryAddress(0,&#xa;  288-self.backSlashCount)&#xa;escapedMem=[self.machine.escapeSequences(x)for x in memToDisplay]&#xa;self.regA.set_text(regAText)&#xa;self.regAL.set_text(regALText)&#xa;self.regAH.set_text(regAHText)&#xa;self.regB.set_text(regBText)&#xa;self.regBL.set_text(regBLText)&#xa;self.regBH.set_text(regBHText)&#xa;self.regC.set_text(regCText)&#xa;self.regCL.set_text(regCLText)&#xa;self.regCH.set_text(regCHText)&#xa;self.regD.set_text(regDText)&#xa;self.regDL.set_text(regDLText)&#xa;self.regDH.set_text(regDHText)&#xa;self.regDI.set_text(regSIText)&#xa;self.regSI.set_text(regDIText)&#xa;self.regSP.set_text(regSPText)&#xa;self.regBP.set_text(regBPText)&#xa;self.regPC.set_text(regPCText)&#xa;self.memoryBuffer.set_text(&quot;&quot;.join(escapedMem))&#xa;self.colourMemory()&#xa;" id="vFndSSZP1EXa"/>
    <sourcecode value=":&#xa;scroll=Gtk.ScrolledWindow()&#xa;scroll.set_policy(Gtk.PolicyType.NEVER,Gtk.PolicyType.AUTOMATIC)&#xa;box=self.builder.get_object(&quot;displayHelp&quot;)&#xa;store=Gtk.ListStore(str)&#xa;for x in self.functions:&#xa;  store.append([x])&#xa;&#xa;tree=Gtk.TreeView(store)&#xa;tree.set_name(&quot;helpTree&quot;)&#xa;renderer=Gtk.CellRendererText()&#xa;column=Gtk.TreeViewColumn(&quot;Command&quot;,renderer,text=0)&#xa;tree.append_column(column)&#xa;def onHelpTreeSelectionChanged(selection):&#xa;  model,treeiter=selection.get_selected()&#xa;  if treeiter is not None:&#xa;    doc=self.machine.getFunctionDescriptions(model[treeiter][0])&#xa;    rawHelpText=str(doc).split(&quot;\n&quot;)&#xa;    instructionName=rawHelpText[0].split(&quot;:&quot;)[1]&#xa;    instructionTitle=rawHelpText[1].split(&quot;:&quot;)[1]&#xa;    instructionDescription=rawHelpText[3].split(&quot;:&quot;)[1]&#xa;    self.reg16Arg.set_name(&quot;reg16Off&quot;)&#xa;    self.reg8Arg.set_name(&quot;reg8Off&quot;)&#xa;    self.memArg.set_name(&quot;memOff&quot;)&#xa;    self.labelArg.set_name(&quot;labelOff&quot;)&#xa;    self.immedArg.set_name(&quot;immedOff&quot;)&#xa;    self.varArg.set_name(&quot;varOff&quot;)&#xa;    if&quot;None&quot;in rawHelpText[2]:&#xa;      self.noArgsLabel.set_text(&quot;No Arguments&quot;)&#xa;      self.noArgsLabel.set_visible(True)&#xa;      self.argumentsFrame2.set_visible(False)&#xa;      self.argumentsFrame.set_visible(False)&#xa;&#xa;    else:&#xa;      self.noArgsLabel.set_visible(False)&#xa;      self.argumentsFrame2.set_visible(True)&#xa;      self.argumentsFrame.set_visible(True)&#xa;      instructionArgs=rawHelpText[2].split(&quot;,&quot;)&#xa;      args1=instructionArgs[0].split(&quot;:&quot;)[1:]&#xa;      for arg in args1:&#xa;        arg=arg.strip(&quot;[]&quot;)&#xa;        if arg==&quot;reg&quot;:&#xa;          self.reg16Arg.set_name(&quot;reg16On&quot;)&#xa;&#xa;        elif arg==&quot;reg16&quot;:&#xa;          self.reg16Arg.set_name(&quot;reg16On&quot;)&#xa;&#xa;        elif arg==&quot;reg8&quot;:&#xa;          self.reg16Arg.set_name(&quot;reg8On&quot;)&#xa;&#xa;        elif arg==&quot;mem&quot;:&#xa;          self.memArg.set_name(&quot;memOn&quot;)&#xa;&#xa;        elif arg==&quot;immed&quot;:&#xa;          self.immedArg.set_name(&quot;immedOn&quot;)&#xa;          self.varArg.set_name(&quot;varOn&quot;)&#xa;&#xa;        elif arg==&quot;label&quot;:&#xa;          self.labelArg.set_name(&quot;labelOn&quot;)&#xa;&#xa;&#xa;      if len(instructionArgs)>1:&#xa;        self.argumentsFrame2.set_visible(True)&#xa;        args2=instructionArgs[1].split(&quot;:&quot;)&#xa;        self.reg16Arg2.set_name(&quot;reg16Off&quot;)&#xa;        self.reg8Arg2.set_name(&quot;reg8Off&quot;)&#xa;        self.memArg2.set_name(&quot;memOff&quot;)&#xa;        self.labelArg2.set_name(&quot;labelOff&quot;)&#xa;        self.immedArg2.set_name(&quot;immedOff&quot;)&#xa;        self.varArg2.set_name(&quot;varOff&quot;)&#xa;        for arg in args2:&#xa;          arg=arg.strip(&quot;[]&quot;)&#xa;          if arg==&quot;reg&quot;:&#xa;            self.reg16Arg2.set_name(&quot;reg16On&quot;)&#xa;&#xa;          elif arg==&quot;reg16&quot;:&#xa;            self.reg16Arg2.set_name(&quot;reg16On&quot;)&#xa;&#xa;          elif arg==&quot;reg8&quot;:&#xa;            self.reg16Arg2.set_name(&quot;reg8On&quot;)&#xa;&#xa;          elif arg==&quot;mem&quot;:&#xa;            self.memArg2.set_name(&quot;memOn&quot;)&#xa;&#xa;          elif arg==&quot;immed&quot;:&#xa;            self.immedArg2.set_name(&quot;immedOn&quot;)&#xa;            self.varArg2.set_name(&quot;varOn&quot;)&#xa;&#xa;          elif arg==&quot;label&quot;:&#xa;            self.labelArg2.set_name(&quot;labelOn&quot;)&#xa;&#xa;&#xa;&#xa;      else:&#xa;        self.argumentsFrame2.set_visible(False)&#xa;&#xa;&#xa;    flags=rawHelpText[4].split(&quot;:&quot;)[1].split(&quot;,&quot;)&#xa;    flagsOut=(self.oFlagOut,self.dFlagOut,self.iFlagOut,&#xa;    self.sFlagOut,self.zFlagOut,self.aFlagOut,self.pFlagOut,self.cFlagOut)for index,flag in enumerate(flags):&#xa;      flagsOut[index].set_text(flag)&#xa;&#xa;    self.instructionName.set_text(instructionName)&#xa;    self.instructionTitle.set_text(instructionTitle)&#xa;    self.instructionDescription.get_buffer().set_text(&#xa;    instructionDescription)&#xa;&#xa;tree.get_selection().connect(&quot;changed&quot;,onHelpTreeSelectionChanged)&#xa;tree.get_selection().select_iter(tree.get_model().get_iter_first())&#xa;scroll.add(tree)&#xa;box.pack_start(scroll,True,True,0)&#xa;scroll.show_all()&#xa;" id="zC90RgaPEQcX"/>
    <sourcecode value=":&#xa;self.machineInfoWrapper.set_name(&quot;machineInfoWrapper&quot;)&#xa;self.outText.set_name(&quot;outText&quot;)&#xa;self.code.set_name(&quot;code&quot;)&#xa;self.lineNumberTV.set_name(&quot;lines&quot;)&#xa;self.stack.set_name(&quot;stack&quot;)&#xa;self.regA.set_name(&quot;regA&quot;)&#xa;self.regAH.set_name(&quot;regAH&quot;)&#xa;self.regAL.set_name(&quot;regAL&quot;)&#xa;self.regB.set_name(&quot;regB&quot;)&#xa;self.regBH.set_name(&quot;regBH&quot;)&#xa;self.regBL.set_name(&quot;regBL&quot;)&#xa;self.regC.set_name(&quot;regC&quot;)&#xa;self.regCH.set_name(&quot;regCH&quot;)&#xa;self.regCL.set_name(&quot;regCL&quot;)&#xa;self.regD.set_name(&quot;regD&quot;)&#xa;self.regDH.set_name(&quot;regDH&quot;)&#xa;self.regDL.set_name(&quot;regDL&quot;)&#xa;self.regBP.set_name(&quot;regBP&quot;)&#xa;self.regSP.set_name(&quot;regSP&quot;)&#xa;self.regSI.set_name(&quot;regSI&quot;)&#xa;self.regDI.set_name(&quot;regDI&quot;)&#xa;self.regPC.set_name(&quot;regPC&quot;)&#xa;self.builder.get_object(&quot;registersLabel&quot;).set_name(&quot;registersLabel&quot;)&#xa;self.builder.get_object(&quot;registersEndLabel&quot;).set_name(&quot;registersEnd&quot;)&#xa;self.memory.set_name(&quot;memory&quot;)&#xa;self.notebook.set_name(&quot;notebook&quot;)&#xa;self.separatorLabel.set_name(&quot;separatorLabel&quot;+str(self.shrunk))&#xa;self.builder.get_object(&quot;codeScrolled&quot;).set_name(&quot;codeScrolled&quot;)&#xa;self.builder.get_object(&quot;outScrolled&quot;).set_name(&quot;outScrolled&quot;)&#xa;self.builder.get_object(&quot;memorySW&quot;).set_name(&quot;memorySW&quot;)&#xa;self.builder.get_object(&quot;stackSW&quot;).set_name(&quot;stackSW&quot;)&#xa;self.builder.get_object(&quot;flagsGrid&quot;).set_name(&quot;flagsGrid&quot;)&#xa;self.oFlagOutMachine.set_name('o')&#xa;self.dFlagOutMachine.set_name('d')&#xa;self.iFlagOutMachine.set_name('i')&#xa;self.sFlagOutMachine.set_name('s')&#xa;self.zFlagOutMachine.set_name('z')&#xa;self.aFlagOutMachine.set_name('a')&#xa;self.pFlagOutMachine.set_name('p')&#xa;self.cFlagOutMachine.set_name('c')&#xa;self.builder.get_object('cFlagLabel1').set_name('cFlagLabel1')&#xa;self.oFlagOut.set_name(&quot;oFlagOut&quot;)&#xa;self.dFlagOut.set_name(&quot;dFlagOut&quot;)&#xa;self.iFlagOut.set_name(&quot;iFlagOut&quot;)&#xa;self.sFlagOut.set_name(&quot;sFlagOut&quot;)&#xa;self.zFlagOut.set_name(&quot;zFlagOut&quot;)&#xa;self.aFlagOut.set_name(&quot;aFlagOut&quot;)&#xa;self.pFlagOut.set_name(&quot;pFlagOut&quot;)&#xa;self.cFlagOut.set_name(&quot;cFlagOut&quot;)&#xa;self.builder.get_object(&quot;instructionHelpBox&quot;).set_name(&#xa;&quot;instructionHelpBox&quot;)" id="J4vWSV1tnm0u"/>
    <sourcecode value=":&#xa;self.win.connect(&quot;delete-event&quot;,self.exit)&#xa;self.hexSwitch.connect('notify::active',self.hexSwitchClicked)&#xa;self.win.connect('key_press_event',self.onKeyPressEvent)&#xa;self.separatorLabelEB.connect('button_press_event',&#xa;self.clickSeperator)self.separatorLabelEB.connect('enter-notify-event',&#xa;self.hoverOverSeperator)self.separatorLabelEB.connect('leave-notify-event',&#xa;self.hoverOffSeperator)self.builder.get_object(&quot;new&quot;).connect(&quot;activate&quot;,&#xa;lambda*args:self.new())self.builder.get_object(&quot;open&quot;).connect(&quot;activate&quot;,&#xa;lambda*args:self.openFileDialog())self.builder.get_object(&quot;save&quot;).connect(&quot;activate&quot;,&#xa;lambda*args:self.saveFile())self.builder.get_object(&quot;saveas&quot;).connect(&quot;activate&quot;,&#xa;lambda*args:self.saveFile(saveAs=True))self.builder.get_object(&quot;quit&quot;).connect(&quot;activate&quot;,self.exit)&#xa;self.builder.get_object(&quot;step&quot;).connect(&quot;activate&quot;,&#xa;lambda*args:self.stepButtonClicked())self.builder.get_object(&quot;all&quot;).connect(&quot;activate&quot;,&#xa;lambda*args:self.runAll())self.builder.get_object(&quot;stopRunning&quot;).connect(&quot;activate&quot;,&#xa;lambda*args:self.stopRunning(-1))self.builder.get_object(&quot;about&quot;).connect(&quot;activate&quot;,&#xa;lambda*args:self.makeAboutDialogue())self.codeBuffer.connect(&quot;notify::cursor-position&quot;,&#xa;lambda*args:self.updateStatusLabel())self.codeBuffer.connect(&quot;changed&quot;,self.textChanged)&#xa;self.lineNumberTV.connect(&quot;button-press-event&quot;,self.setBreakpoint)&#xa;" id="1Lfm5deNWKqm"/>
    <sourcecode value=":&#xa;self.outText=self.builder.get_object(&quot;outText&quot;)&#xa;self.code=self.builder.get_object(&quot;code&quot;)&#xa;self.stack=self.builder.get_object(&quot;stack&quot;)&#xa;self.machineInfoWrapper=self.builder.get_object(&quot;machineInfoWrapper&quot;)&#xa;self.regA=self.builder.get_object(&quot;regA&quot;)&#xa;self.regAH=self.builder.get_object(&quot;regAh&quot;)&#xa;self.regAL=self.builder.get_object(&quot;regAl&quot;)&#xa;self.regB=self.builder.get_object(&quot;regB&quot;)&#xa;self.regBH=self.builder.get_object(&quot;regBh&quot;)&#xa;self.regBL=self.builder.get_object(&quot;regBl&quot;)&#xa;self.regC=self.builder.get_object(&quot;regC&quot;)&#xa;self.regCH=self.builder.get_object(&quot;regCh&quot;)&#xa;self.regCL=self.builder.get_object(&quot;regCl&quot;)&#xa;self.regD=self.builder.get_object(&quot;regD&quot;)&#xa;self.regDH=self.builder.get_object(&quot;regDh&quot;)&#xa;self.regDL=self.builder.get_object(&quot;regDl&quot;)&#xa;self.regBP=self.builder.get_object(&quot;regBP&quot;)&#xa;self.regSP=self.builder.get_object(&quot;regSP&quot;)&#xa;self.regSI=self.builder.get_object(&quot;regSI&quot;)&#xa;self.regDI=self.builder.get_object(&quot;regDI&quot;)&#xa;self.regPC=self.builder.get_object(&quot;regPC&quot;)&#xa;self.memory=self.builder.get_object(&quot;memory&quot;)&#xa;self.hexSwitch=self.builder.get_object(&quot;hexSwitch&quot;)&#xa;self.notebook=self.builder.get_object(&quot;notebook&quot;)&#xa;self.separatorLabelEB=self.builder.get_object(&quot;separatorLabelEB&quot;)&#xa;self.separatorLabel=self.builder.get_object(&quot;separatorLabel&quot;)&#xa;self.buttonBox=self.builder.get_object(&quot;buttonBox&quot;)&#xa;self.statusLabel=self.builder.get_object(&quot;statusLabel&quot;)&#xa;self.lineNumberTV=self.builder.get_object(&quot;lines&quot;)&#xa;self.oFlagOut=self.builder.get_object(&quot;oFlagOut&quot;)&#xa;self.dFlagOut=self.builder.get_object(&quot;dFlagOut&quot;)&#xa;self.iFlagOut=self.builder.get_object(&quot;iFlagOut&quot;)&#xa;self.sFlagOut=self.builder.get_object(&quot;sFlagOut&quot;)&#xa;self.zFlagOut=self.builder.get_object(&quot;zFlagOut&quot;)&#xa;self.aFlagOut=self.builder.get_object(&quot;aFlagOut&quot;)&#xa;self.pFlagOut=self.builder.get_object(&quot;pFlagOut&quot;)&#xa;self.cFlagOut=self.builder.get_object(&quot;cFlagOut&quot;)&#xa;self.oFlagOutMachine=self.builder.get_object(&quot;oFlagOutMachine&quot;)&#xa;self.dFlagOutMachine=self.builder.get_object(&quot;dFlagOutMachine&quot;)&#xa;self.iFlagOutMachine=self.builder.get_object(&quot;iFlagOutMachine&quot;)&#xa;self.sFlagOutMachine=self.builder.get_object(&quot;sFlagOutMachine&quot;)&#xa;self.zFlagOutMachine=self.builder.get_object(&quot;zFlagOutMachine&quot;)&#xa;self.aFlagOutMachine=self.builder.get_object(&quot;aFlagOutMachine&quot;)&#xa;self.pFlagOutMachine=self.builder.get_object(&quot;pFlagOutMachine&quot;)&#xa;self.cFlagOutMachine=self.builder.get_object(&quot;cFlagOutMachine&quot;)&#xa;self.reg8Arg=self.builder.get_object(&quot;reg8&quot;)&#xa;self.reg16Arg=self.builder.get_object(&quot;reg16&quot;)&#xa;self.memArg=self.builder.get_object(&quot;mem&quot;)&#xa;self.varArg=self.builder.get_object(&quot;variable&quot;)&#xa;self.immedArg=self.builder.get_object(&quot;immed&quot;)&#xa;self.labelArg=self.builder.get_object(&quot;label&quot;)&#xa;self.reg8Arg=self.builder.get_object(&quot;reg8&quot;)&#xa;self.reg16Arg=self.builder.get_object(&quot;reg16&quot;)&#xa;self.memArg=self.builder.get_object(&quot;mem&quot;)&#xa;self.varArg=self.builder.get_object(&quot;variable&quot;)&#xa;self.immedArg=self.builder.get_object(&quot;immed&quot;)&#xa;self.labelArg=self.builder.get_object(&quot;label&quot;)&#xa;self.argumentsFrame=self.builder.get_object(&quot;argumentsFrame&quot;)&#xa;self.argumentsFrame2=self.builder.get_object(&quot;argumentsFrame2&quot;)&#xa;self.reg8Arg2=self.builder.get_object(&quot;reg82&quot;)&#xa;self.reg16Arg2=self.builder.get_object(&quot;reg162&quot;)&#xa;self.memArg2=self.builder.get_object(&quot;mem2&quot;)&#xa;self.varArg2=self.builder.get_object(&quot;variable2&quot;)&#xa;self.immedArg2=self.builder.get_object(&quot;immed2&quot;)&#xa;self.labelArg2=self.builder.get_object(&quot;label2&quot;)&#xa;self.noArgsLabel=self.builder.get_object(&quot;noArgsLabel&quot;)&#xa;self.instructionDescription=self.builder.get_object(&#xa;&quot;instructionDescription&quot;)self.instructionName=self.builder.get_object(&quot;instructionName&quot;)&#xa;self.instructionTitle=self.builder.get_object(&quot;instructionTitle&quot;)&#xa;" id="dED9Y2uicNgH"/>
    <sourcecode value=":&#xa;self.textTagBold=Gtk.TextTag()&#xa;self.textTagBold.set_property(&quot;weight&quot;,Pango.Weight.BOLD)&#xa;self.textTagGreenText=Gtk.TextTag()&#xa;self.textTagGreenText.set_property(&quot;foreground&quot;,&quot;green&quot;)&#xa;self.textTagBlueText=Gtk.TextTag()&#xa;self.textTagBlueText.set_property(&quot;foreground&quot;,&quot;blue&quot;)&#xa;self.textTagRedText=Gtk.TextTag()&#xa;self.textTagRedText.set_property(&quot;foreground&quot;,&quot;red&quot;)&#xa;self.textTagGreyText=Gtk.TextTag()&#xa;self.textTagGreyText.set_property(&quot;foreground&quot;,&quot;grey&quot;)&#xa;self.textTagLightGreyText=Gtk.TextTag()&#xa;self.textTagLightGreyText.set_property(&quot;foreground&quot;,&quot;lightgrey&quot;)&#xa;self.codeBuffer.get_tag_table().add(self.textTagBold)&#xa;self.codeBuffer.get_tag_table().add(self.textTagGreenText)&#xa;self.codeBuffer.get_tag_table().add(self.textTagBlueText)&#xa;self.codeBuffer.get_tag_table().add(self.textTagRedText)&#xa;self.codeBuffer.get_tag_table().add(self.textTagGreyText)&#xa;self.codeBuffer.get_tag_table().add(self.textTagLightGreyText)&#xa;self.textTagMagenta=Gtk.TextTag()&#xa;self.textTagMagenta.set_property(&quot;background&quot;,&quot;magenta&quot;)&#xa;self.textTagOrange=Gtk.TextTag()&#xa;self.textTagOrange.set_property(&quot;background&quot;,&quot;orange&quot;)&#xa;self.textTagRed=Gtk.TextTag()&#xa;self.textTagRed.set_property(&quot;background&quot;,&quot;red&quot;)&#xa;self.textTagBlue=Gtk.TextTag()&#xa;self.textTagBlue.set_property(&quot;background&quot;,&quot;blue&quot;)&#xa;self.textTagPurple=Gtk.TextTag()&#xa;self.textTagPurple.set_property(&quot;background&quot;,&quot;purple&quot;)&#xa;self.textTagGreen=Gtk.TextTag()&#xa;self.textTagGreen.set_property(&quot;background&quot;,&quot;green&quot;)&#xa;self.textTagGrey=Gtk.TextTag()&#xa;self.textTagGrey.set_property(&quot;background&quot;,&quot;grey&quot;)&#xa;self.memoryBuffer.get_tag_table().add(self.textTagGrey)&#xa;self.memoryBuffer.get_tag_table().add(self.textTagRed)&#xa;self.memoryBuffer.get_tag_table().add(self.textTagOrange)&#xa;self.memoryBuffer.get_tag_table().add(self.textTagMagenta)&#xa;self.memoryBuffer.get_tag_table().add(self.textTagGreen)&#xa;self.memoryBuffer.get_tag_table().add(self.textTagBlue)&#xa;self.memoryBuffer.get_tag_table().add(self.textTagPurple)&#xa;self.memoryColours=[self.textTagRed,self.textTagOrange,&#xa;self.textTagMagenta,self.textTagGreen,self.textTagBlue,self.textTagPurple,self.textTagGrey]self.textTagBreakpoint=Gtk.TextTag()&#xa;self.textTagBreakpoint.set_property(&quot;background&quot;,&quot;red&quot;)&#xa;self.linesBuffer.get_tag_table().add(self.textTagBreakpoint)&#xa;" id="hljJ7PaMHWMC"/>
    <sourcecode value=":&#xa;lineNum=self.codeBuffer.get_iter_at_offset(&#xa;self.codeBuffer.props.cursor_position).get_line()self.statusLabel.set_text(&quot; Line: &quot;+str(lineNum)+&#xa;&quot;\t&quot;+self.machine.isRunning()*&quot;Running&quot;)" id="PHAelWrwCC4I"/>
    <sourcecode value=":&#xa;if self.machine.isRunningAll():&#xa;  return&#xa;&#xa;if self.displayInHex:&#xa;  stackText=[&quot;0&quot;*(4-len(hex(int(x)).split(&quot;x&quot;)[1]))+&#xa;  hex(int(x)).split(&quot;x&quot;)[1]for x in self.machine.getStack()]&#xa;else:&#xa;  stackText=[&quot;0&quot;*(4-len(str(x)))+&#xa;  str(x)for x in self.machine.getStack()]&#xa;self.stackBuffer.set_text(&quot;\n&quot;.join(stackText))&#xa;" id="s83pFtVN0bA7"/>
    <sourcecode value=":&#xa;self.outBuffer=self.outText.get_buffer()&#xa;self.codeBuffer=self.code.get_buffer()&#xa;self.stackBuffer=self.stack.get_buffer()&#xa;self.memoryBuffer=self.memory.get_buffer()&#xa;self.linesBuffer=self.lineNumberTV.get_buffer()&#xa;self.outText.set_wrap_mode(Gtk.WrapMode.WORD)&#xa;self.memory.set_wrap_mode(Gtk.WrapMode.CHAR)&#xa;self.stack.set_justification(Gtk.Justification.CENTER)&#xa;" id="FFLEoVLDJzgs"/>
    <sourcecode value=":&#xa;if self.downFile!=&quot;&quot;:&#xa;  newFileName=self.downFile&#xa;  self.downFile=&quot;&quot;&#xa;&#xa;else:&#xa;  newFileName=widget.get_child().props.file.replace(&quot;.&quot;,&quot;Over.&quot;)&#xa;  newFileName=newFileName.replace(&quot;OverOver.&quot;,&quot;Over.&quot;)&#xa;&#xa;widget.get_child().set_from_file(newFileName)&#xa;" id="BB1SAhJvg1Uk"/>
    <sourcecode value=":&#xa;widget.get_child().set_from_file(self.downFile)&#xa;self.downFile=&quot;&quot;&#xa;" id="T7W15BhhAH08"/>
    <sourcecode value=":&#xa;if self.downFile!=&quot;&quot;:&#xa;  newFileName=self.downFile.replace(&quot;Over.&quot;,&quot;.&quot;)&#xa;  self.downFile=&quot;&quot;&#xa;&#xa;else:&#xa;  newFileName=widget.get_child().props.file.replace(&quot;Over.&quot;,&quot;.&quot;)&#xa;&#xa;widget.get_child().set_from_file(newFileName)&#xa;" id="D7xFEbJXw5xX"/>
    <sourcecode value=":&#xa;new=Gtk.Image()&#xa;newPath=[self._PATHDELIM+&quot;images&quot;,&quot;newFileIcon.png&quot;]&#xa;new.set_from_file(self._PATH+self._PATHDELIM.join(newPath))&#xa;newEB=Gtk.EventBox()&#xa;newEB.add(new)&#xa;newEB.set_tooltip_text(&quot;New - Ctrl + N&quot;)&#xa;self.buttonBox.pack_start(newEB,False,False,1)&#xa;openImage=Gtk.Image()&#xa;openPath=[self._PATHDELIM+&quot;images&quot;,&quot;openIcon.png&quot;]&#xa;openImage.set_from_file(self._PATH+self._PATHDELIM.join(openPath))&#xa;openEB=Gtk.EventBox()&#xa;openEB.add(openImage)&#xa;openEB.set_tooltip_text(&quot;Open - Ctrl + O&quot;)&#xa;self.buttonBox.pack_start(openEB,False,False,1)&#xa;save=Gtk.Image()&#xa;savePath=[self._PATHDELIM+&quot;images&quot;,&quot;saveIcon.png&quot;]&#xa;save.set_from_file(self._PATH+self._PATHDELIM.join(savePath))&#xa;saveEB=Gtk.EventBox()&#xa;saveEB.add(save)&#xa;saveEB.set_tooltip_text(&quot;Save - Ctrl + S&quot;)&#xa;self.buttonBox.pack_start(saveEB,False,False,1)&#xa;allIcon=Gtk.Image()&#xa;allPath=[self._PATHDELIM+&quot;images&quot;,&quot;allIcon.png&quot;]&#xa;allIcon.set_from_file(self._PATH+self._PATHDELIM.join(allPath))&#xa;allEB=Gtk.EventBox()&#xa;allEB.add(allIcon)&#xa;allEB.set_tooltip_text(&quot;Run All - Ctrl + Enter&quot;)&#xa;self.buttonBox.pack_start(allEB,False,False,1)&#xa;step=Gtk.Image()&#xa;stepPath=[self._PATHDELIM+&quot;images&quot;,&quot;stepIcon.png&quot;]&#xa;step.set_from_file(self._PATH+self._PATHDELIM.join(stepPath))&#xa;stepEB=Gtk.EventBox()&#xa;stepEB.add(step)&#xa;stepEB.set_tooltip_text(&quot;Run One Line - Enter&quot;)&#xa;self.buttonBox.pack_start(stepEB,False,False,1)&#xa;stop=Gtk.Image()&#xa;stopPath=[self._PATHDELIM+&quot;images&quot;,&quot;stopIcon.png&quot;]&#xa;stop.set_from_file(self._PATH+self._PATHDELIM.join(stopPath))&#xa;stopEB=Gtk.EventBox()&#xa;stopEB.add(stop)&#xa;stopEB.set_tooltip_text(&quot;Stop Running - Ctrl + X&quot;)&#xa;self.buttonBox.pack_start(stopEB,False,False,1)&#xa;for x in[newEB,openEB,saveEB,allEB,stepEB,stopEB]:&#xa;  x.connect('button_release_event',self.releaseFileButton)&#xa;  x.connect('enter-notify-event',self.hoverOverFileButton)&#xa;  x.connect('leave-notify-event',self.hoverOffFileButton)&#xa;&#xa;newEB.connect('button_press_event',self.pressNewButton)&#xa;openEB.connect('button_press_event',self.pressOpenButton)&#xa;saveEB.connect('button_press_event',self.pressSaveButton)&#xa;stepEB.connect('button_press_event',self.pressStepButton)&#xa;allEB.connect('button_press_event',self.pressAllButton)&#xa;stopEB.connect('button_press_event',self.pressStopButton)&#xa;" id="s7eYVwQTYqOC"/>
    <sourcecode value=":&#xa;emptyPath=[self._PATHDELIM+&quot;images&quot;,&quot;empty.png&quot;]&#xa;widget.get_child().set_from_file(&#xa;self._PATH+self._PATHDELIM.join(emptyPath))" id="5H3c7QmIFRKy"/>
    <sourcecode value=":&#xa;if self.downFile==&quot;&quot;:&#xa;  self.downFile=widget.get_child().props.file&#xa;&#xa;self.clearIcon(widget)&#xa;self.new()&#xa;" id="0IQa8vfxx3p6"/>
    <sourcecode value=":&#xa;if self.downFile==&quot;&quot;:&#xa;  self.downFile=widget.get_child().props.file&#xa;&#xa;self.clearIcon(widget)&#xa;self.openFileDialog()&#xa;" id="hiDReIHXy4Kh"/>
    <sourcecode value=":&#xa;if self.downFile==&quot;&quot;:&#xa;  self.downFile=widget.get_child().props.file&#xa;&#xa;self.clearIcon(widget)&#xa;self.stepButtonClicked()&#xa;" id="ADwstFDps3jU"/>
    <sourcecode value=":&#xa;if self.downFile==&quot;&quot;:&#xa;  self.downFile=widget.get_child().props.file&#xa;&#xa;self.clearIcon(widget)&#xa;self.runAll()&#xa;" id="hcsCYTbkGol5"/>
    <sourcecode value=":&#xa;if self.downFile==&quot;&quot;:&#xa;  self.downFile=widget.get_child().props.file&#xa;&#xa;self.clearIcon(widget)&#xa;self.saveFile()&#xa;" id="GWVj7mkBgVVM"/>
    <sourcecode value=":&#xa;if self.downFile==&quot;&quot;:&#xa;  self.downFile=widget.get_child().props.file&#xa;&#xa;self.clearIcon(widget)&#xa;if self.machine.isRunning():&#xa;  self.stopRunning(1)&#xa;&#xa;self.updateStatusLabel()&#xa;" id="XZtLpFIqKOWt"/>
    <sourcecode value=":&#xa;if self.fileName is None or saveAs:&#xa;  fileChooser=Gtk.FileChooserDialog(&quot;Save your fileToSave&quot;,&#xa;  self.win,Gtk.FileChooserAction.SAVE,(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL,Gtk.STOCK_SAVE,Gtk.ResponseType.ACCEPT))response=fileChooser.run()&#xa;  fileName=None&#xa;  if response==Gtk.ResponseType.ACCEPT:&#xa;    fileName=fileChooser.get_filename()&#xa;&#xa;  fileChooser.destroy()&#xa;  self.fileName=fileName&#xa;  if fileName is not None:&#xa;    self.saveFile()&#xa;&#xa;&#xa;else:&#xa;  try:&#xa;    codeStart=self.codeBuffer.get_start_iter()&#xa;    codeEnd=self.codeBuffer.get_end_iter()&#xa;    codeText=self.codeBuffer.get_text(codeStart,codeEnd,False)&#xa;    fileToSave=open(self.fileName,&quot;w&quot;)&#xa;    fileToSave.write(codeText)&#xa;    fileToSave.close()&#xa;    self.codeBuffer.set_modified(False)&#xa;    self.updateWindowTitle()&#xa;&#xa;  except IOError:&#xa;    print&quot;Fatal Error&quot;&#xa;&#xa;&#xa;" id="f2gRHbzinOUN"/>
    <sourcecode value=":&#xa;self.clearGui()&#xa;self.backSlashCount=0&#xa;self.updateWindowTitle()&#xa;self.fileName=None&#xa;self.outBuffer.set_text(&quot;&quot;)&#xa;self.codeBuffer.set_modified(False)&#xa;self.codeBuffer.remove_all_tags(self.codeBuffer.get_start_iter(),&#xa;self.codeBuffer.get_end_iter())self.codeBuffer.set_text(&quot;&quot;)&#xa;self.machine.restart()&#xa;self.functions=self.machine.getFunctions()&#xa;self.functions.sort()&#xa;" id="kHZkWa9tZAKx"/>
    <sourcecode value=":&#xa;if not self.machine.hasRun():&#xa;  if not self.machine.isRunning():&#xa;    self.startRunning()&#xa;&#xa;  else:&#xa;    startOfArrow=self.codeBuffer.get_iter_at_line_offset(&#xa;    self.machine.getLastLine(),0)if not startOfArrow.ends_line():&#xa;      endOfArrow=self.codeBuffer.get_iter_at_line_offset(&#xa;      self.machine.getLastLine(),1)arrowText=self.codeBuffer.get_text(startOfArrow,&#xa;      endOfArrow,False)if arrowText==&quot;>&quot;:&#xa;        self.codeBuffer.delete(startOfArrow,endOfArrow)&#xa;&#xa;&#xa;&#xa;  self.outPutFromMachine(self.machine.runAll())&#xa;  self.updateRegisters()&#xa;  self.updateStack()&#xa;&#xa;else:&#xa;  if self.restartPrompt():&#xa;    self.runAll()&#xa;&#xa;&#xa;" id="RhKyrcujPtKP"/>
    <sourcecode value=":&#xa;dialog=Gtk.MessageDialog(self.win,0,Gtk.MessageType.QUESTION,&#xa;Gtk.ButtonsType.YES_NO,&quot;Do You Wish to Restart?&quot;,title=&quot;Restart the simulation?&quot;)response=dialog.run()&#xa;if response==Gtk.ResponseType.NO:&#xa;  dialog.destroy()&#xa;  return False&#xa;&#xa;elif response==Gtk.ResponseType.YES:&#xa;  dialog.destroy()&#xa;  self.startRunning()&#xa;  return True&#xa;&#xa;else:&#xa;  dialog.destroy()&#xa;  return False&#xa;&#xa;" id="esY3msS4meFy"/>
    <sourcecode value=":&#xa;self.clearGui()&#xa;self.updateRegisters()&#xa;self.updateStack()&#xa;self.code.set_editable(False)&#xa;self.lines=self.codeBuffer.get_text(self.codeBuffer.get_start_iter(),&#xa;self.codeBuffer.get_end_iter(),False).split(&quot;\n&quot;)errorMessage=self.machine.loadCode(self.lines)&#xa;self.outPut(errorMessage)&#xa;" id="1U6n6LjERLBI"/>
    <sourcecode value=":&#xa;if self.machine.isRunning():&#xa;  currentLine=self.code.get_buffer().get_iter_at_line(&#xa;  self.machine.getRegister('PC'))self.code.scroll_to_iter(currentLine,0.25,True,.5,.5)&#xa;  self.codeBuffer.place_cursor(currentLine)&#xa;  self.codeBuffer.insert(currentLine,&quot;>&quot;)&#xa;  if self.machine.lastLine!=-1:&#xa;    startOfArrow=self.codeBuffer.get_iter_at_line_offset(&#xa;    self.machine.getLastLine(),0)if not startOfArrow.ends_line():&#xa;      endOfArrow=self.codeBuffer.get_iter_at_line_offset(&#xa;      self.machine.getLastLine(),1)self.codeBuffer.delete(startOfArrow,endOfArrow)&#xa;&#xa;&#xa;  self.outPutFromMachine(self.machine.step())&#xa;  self.updateRegisters()&#xa;  self.updateStack()&#xa;&#xa;elif self.machine.hasRun():&#xa;  if self.restartPrompt():&#xa;    self.stepButtonClicked()&#xa;&#xa;&#xa;else:&#xa;  self.startRunning()&#xa;  self.stepButtonClicked()&#xa;&#xa;" id="CSNdoWtDUOO1"/>
    <sourcecode value=":&#xa;keyval=event.keyval&#xa;keyname=Gdk.keyval_name(keyval)&#xa;keysDown=Gtk.accelerator_get_label(keyval,event.state).split(&quot;+&quot;)&#xa;keysDown.remove(&quot;Mod2&quot;)&#xa;if len(keysDown)==1:&#xa;  if keyname=='Return'or keyname=='KP_Enter':&#xa;    if not self.code.has_focus():&#xa;      self.stepButtonClicked()&#xa;&#xa;    return&#xa;&#xa;&#xa;elif len(keysDown)==2:&#xa;  if&quot;Ctrl&quot;in keysDown:&#xa;    if&quot;O&quot;in keysDown:&#xa;      self.openFileDialog()&#xa;&#xa;    elif&quot;N&quot;in keysDown:&#xa;      self.new()&#xa;&#xa;    elif&quot;S&quot;in keysDown:&#xa;      self.saveFile()&#xa;&#xa;    elif&quot;Q&quot;in keysDown:&#xa;      self.exit()&#xa;&#xa;    elif&quot;Return&quot;in keysDown or&quot;Enter (keypad)&quot;in keysDown:&#xa;      self.runAll()&#xa;&#xa;    elif&quot;X&quot;in keysDown:&#xa;      self.stopRunning(-1)&#xa;&#xa;&#xa;  elif&quot;Shift&quot;in keysDown:&#xa;    if&quot;Return&quot;in keysDown or&quot;Enter (keypad)&quot;in keysDown:&#xa;      self.runAll()&#xa;&#xa;&#xa;&#xa;elif len(keysDown)==3:&#xa;  if&quot;Ctrl&quot;in keysDown:&#xa;    if&quot;S&quot;in keysDown:&#xa;      if&quot;Shift&quot;in keysDown:&#xa;        self.saveFile(saveAs=True)&#xa;&#xa;&#xa;&#xa;&#xa;" id="aVR4tq4LrS5r"/>
    <sourcecode value=":&#xa;if string==self.machine._OVER:&#xa;  self.stopRunning()&#xa;&#xa;else:&#xa;  if string is not None:&#xa;    self.outPut(string)&#xa;&#xa;  if self.machine.requestsGetChar():&#xa;    self.machine.respondGetChar(self.getChar())&#xa;    if self.machine.isRunningAll():&#xa;      self.runAll()&#xa;&#xa;&#xa;  if not self.machine.isRunning():&#xa;    self.stopRunning(-1)&#xa;&#xa;&#xa;" id="HILdMHtGESzc"/>
    <sourcecode value=":&#xa;outEnd=self.outBuffer.get_end_iter()&#xa;self.outText.get_buffer().insert(outEnd,string)&#xa;self.outText.scroll_to_iter(outEnd,0.1,True,.5,.5)&#xa;" id="yG59LhgORScY"/>
    <sourcecode value=":&#xa;self.outText.get_buffer().set_text(&quot;&quot;)&#xa;self.regA.set_text(&quot;&quot;)&#xa;self.regB.set_text(&quot;&quot;)&#xa;self.regC.set_text(&quot;&quot;)&#xa;self.regD.set_text(&quot;&quot;)&#xa;self.regBP.set_text(&quot;&quot;)&#xa;self.regSP.set_text(&quot;&quot;)&#xa;self.regDI.set_text(&quot;&quot;)&#xa;self.regSI.set_text(&quot;&quot;)&#xa;self.regPC.set_text(&quot;&quot;)&#xa;self.memory.get_buffer().set_text(&quot;&quot;)&#xa;self.aFlagOutMachine.set_text(&quot;&quot;)&#xa;self.cFlagOutMachine.set_text(&quot;&quot;)&#xa;self.oFlagOutMachine.set_text(&quot;&quot;)&#xa;self.dFlagOutMachine.set_text(&quot;&quot;)&#xa;self.iFlagOutMachine.set_text(&quot;&quot;)&#xa;self.pFlagOutMachine.set_text(&quot;&quot;)&#xa;self.sFlagOutMachine.set_text(&quot;&quot;)&#xa;self.zFlagOutMachine.set_text(&quot;&quot;)&#xa;" id="hmvLh8LsUis0"/>
    <sourcecode value=":&#xa;modStar=&quot;*&quot;*self.codeBuffer.get_modified()&#xa;if self.fileName is None:&#xa;  fileName=&quot;Untitled&quot;&#xa;&#xa;else:&#xa;  fileName=self.fileName.split(self._PATHDELIM)[-1]&#xa;&#xa;self.win.set_title(self._PROGRAMNAME+&quot; - &quot;+modStar+fileName)&#xa;" id="j6zBmp9NxbBO"/>
    <sourcecode value=":&#xa;if not self.machine.isRunning():&#xa;  self.updateWindowTitle()&#xa;  lineNumber=self.codeBuffer.get_iter_at_offset(&#xa;  self.codeBuffer.props.cursor_position).get_line()startOfLineIter=self.codeBuffer.get_iter_at_line_offset(&#xa;  lineNumber,0)if lineNumber+1>=self.codeBuffer.get_line_count():&#xa;    endOfLineIter=self.codeBuffer.get_end_iter()&#xa;&#xa;  else:&#xa;    endOfLineIter=self.codeBuffer.get_iter_at_line_offset(&#xa;    lineNumber+1,0)&#xa;  lineText=self.codeBuffer.get_text(startOfLineIter,endOfLineIter,&#xa;  False)self.syntaxHighlight(readliner.ReadLiner(lineText),&#xa;  lineOffset=lineNumber)&#xa;" id="N5oJezhFTX68"/>
    <sourcecode value=":&#xa;about=Gtk.AboutDialog()&#xa;about.set_name(&quot;AboutDialog&quot;)&#xa;about.set_program_name(self._PROGRAMNAME)&#xa;about.set_version(self._VERSION)&#xa;about.set_copyright(&quot;(c) Brydon Eastman&quot;)&#xa;about.set_comments(self._DESCRIPTION)&#xa;about.set_website(self._WEBSITE)&#xa;about.set_license_type(self._LICENSE)&#xa;logoPath=self._PATH+self._PATHDELIM.join([self._PATHDELIM+&#xa;&quot;images&quot;,&quot;logo.png&quot;])about.set_logo(GdkPixbuf.Pixbuf.new_from_file(logoPath))&#xa;about.run()&#xa;about.destroy()&#xa;" id="vJlcZOLOarsK"/>
    <sourcecode value=":&#xa;if keyboard_tip:&#xa;  offset=widget.props.buffer.cursor_position&#xa;  ret=widget.props.buffer.get_iter_at_offset(offset)&#xa;&#xa;else:&#xa;  coords=widget.window_to_buffer_coords(Gtk.TextWindowType.TEXT,&#xa;  x,y)ret=widget.get_iter_at_position(coords[0],coords[1])&#xa;&#xa;if ret[0].has_tag(data):&#xa;  offset=ret[0].get_offset()&#xa;  for element in self.machine.effectiveBSSandDATALocation:&#xa;    memStart=self.machine.effectiveBSSandDATALocation[element][0]&#xa;    memEnd=self.machine.effectiveBSSandDATALocation[element][1]&#xa;    if memStart&lt;=offset&lt;=memEnd:&#xa;      start=self.machine.getFromBSSorDATA(element,0)&#xa;      end=self.machine.getFromBSSorDATA(element,1)&#xa;      if self.displayInHex:&#xa;        start=self.machine.intToHex(start)&#xa;        end=self.machine.intToHex(end)&#xa;&#xa;      tooltip.set_text(&quot;%s (from %s to %s)&quot;%(element,&#xa;      str(start),str(end)))break&#xa;&#xa;&#xa;&#xa;else:&#xa;  return False&#xa;&#xa;return True&#xa;" id="nHdL8VfQJ6Cs"/>
    <sourcecode value=":&#xa;self.displayInHex=not self.displayInHex&#xa;self.updateRegisters()&#xa;self.updateStack()&#xa;" id="i9uUPJXk0C9z"/>
    <sourcecode value=":&#xa;if self.machine.isRunning():&#xa;  self.machine.stopRunning()&#xa;&#xa;self.code.set_editable(True)&#xa;curLine=self.machine.getRegister('PC')&#xa;lastLine=self.machine.getLastLine()&#xa;startOfArrow=self.codeBuffer.get_iter_at_line_offset(curLine,0)&#xa;if not startOfArrow.ends_line():&#xa;  endOfArrow=self.codeBuffer.get_iter_at_line_offset(curLine,1)&#xa;  if self.codeBuffer.get_text(startOfArrow,&#xa;  endOfArrow,False)==&quot;>&quot;:&#xa;    self.codeBuffer.delete(startOfArrow,endOfArrow)&#xa;&#xa;  else:&#xa;    startOfArrow=self.codeBuffer.get_iter_at_line_offset(&#xa;    lastLine,0)if not startOfArrow.ends_line():&#xa;      endOfArrow=self.codeBuffer.get_iter_at_line_offset(&#xa;      lastLine,1)if self.codeBuffer.get_text(startOfArrow,endOfArrow,&#xa;      False)==&quot;>&quot;:&#xa;        self.codeBuffer.delete(startOfArrow,endOfArrow)&#xa;&#xa;&#xa;&#xa;&#xa;else:&#xa;  startOfArrow=self.codeBuffer.get_iter_at_line_offset(lastLine,0)&#xa;  if not startOfArrow.ends_line():&#xa;    endOfArrow=self.codeBuffer.get_iter_at_line_offset(lastLine,&#xa;    1)if self.codeBuffer.get_text(startOfArrow,endOfArrow,&#xa;    False)==&quot;>&quot;:&#xa;      self.codeBuffer.delete(startOfArrow,endOfArrow)&#xa;&#xa;&#xa;&#xa;if i==1:&#xa;  self.outPut(&quot;\n----\nCode executed succesfully.\n&quot;)&#xa;&#xa;else:&#xa;  self.outPut(&quot;\n----\nCode execution terminated.\n&quot;)&#xa;&#xa;" id="w64HiMQYXGfy"/>
    <sourcecode value=":&#xa;entry=entrydialog.EntryDialog(title=&quot;Waiting for input&quot;,&#xa;label=&quot;Waiting for input&quot;,buttons=(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL,Gtk.STOCK_OK,Gtk.ResponseType.OK),modal=True,parent=self.win)result=entry.run()&#xa;if result is None:&#xa;  result=&quot;&quot;&#xa;&#xa;entry.destroy()&#xa;return result+&quot;\n&quot;&#xa;" id="mWLZcjgdNTWd"/>
    <sourcecode value=":&#xa;backSlashOffsetBeforeTag=0&#xa;backSlashOffsetAfterTag=0&#xa;self.backSlashCount=0&#xa;sortedBSSandDATAList=[]&#xa;for index,name in enumerate(self.machine.getDATAKeys()+&#xa;self.machine.getBSSKeys()):&#xa;  if name in self.machine.getDATAKeys():&#xa;    location=self.machine.getFromDATA(name)&#xa;&#xa;  else:&#xa;    location=self.machine.getFromBSS(name)&#xa;&#xa;  if len(sortedBSSandDATAList)==0:&#xa;    sortedBSSandDATAList.append([location[0],location[1],name])&#xa;&#xa;  else:&#xa;    for index,element in enumerate(sortedBSSandDATAList):&#xa;      if location[0]&lt;element[1]:&#xa;        sortedBSSandDATAList.insert(index,[location[0],&#xa;        location[1],name])break&#xa;&#xa;&#xa;    else:&#xa;      sortedBSSandDATAList.append([location[0],location[1],&#xa;      name])&#xa;&#xa;&#xa;for index,location in enumerate(sortedBSSandDATAList):&#xa;  backSlashOffsetBeforeTag=backSlashOffsetAfterTag&#xa;  for x in self.machine.getFromMemoryAddress(location[0],&#xa;  location[1]):&#xa;    if x in self.ESCAPE_CHARS:&#xa;      backSlashOffsetAfterTag+=1&#xa;      self.backSlashCount+=1&#xa;&#xa;&#xa;  before=location[0]*(self.displayInHex+1)+\&#xa;  backSlashOffsetBeforeTag*(not self.displayInHex)after=(location[1]+1)*(self.displayInHex+1)+\&#xa;  backSlashOffsetAfterTag*(not self.displayInHex)self.machine.effectiveBSSandDATALocation[location[2]]=[before,&#xa;  after]self.memoryBuffer.apply_tag(&#xa;  self.memoryColours[index%len(self.memoryColours)],self.memoryBuffer.get_iter_at_offset(before),self.memoryBuffer.get_iter_at_offset(after))&#xa;" id="cStytObD1PSo"/>
    <sourcecode value=":&#xa;if self.machine.isRunning():&#xa;  dialog=Gtk.MessageDialog(self.win,0,Gtk.MessageType.QUESTION,&#xa;  Gtk.ButtonsType.YES_NO,&quot;Do you want to quit?&quot;,title=&quot;Are you sure?&quot;)warning=&quot;There is a simulation currently in progress.&quot;&#xa;  dialog.format_secondary_text(warning)&#xa;  response=dialog.run()&#xa;  if response==Gtk.ResponseType.NO:&#xa;    dialog.destroy()&#xa;    return True&#xa;&#xa;  dialog.destroy()&#xa;&#xa;if self.codeBuffer.get_modified():&#xa;  dialog=Gtk.MessageDialog(self.win,0,Gtk.MessageType.QUESTION,&#xa;  Gtk.ButtonsType.YES_NO,&quot;Do you want to quit?&quot;,title=&quot;Are you sure?&quot;)dialog.format_secondary_text(&quot;There are unsaved changes.&quot;)&#xa;  response=dialog.run()&#xa;  if response==Gtk.ResponseType.NO:&#xa;    dialog.destroy()&#xa;    return True&#xa;&#xa;  dialog.destroy()&#xa;&#xa;Gtk.main_quit(args)&#xa;" id="66j5UCr6Uzmo"/>
    <sourcecode value=":&#xa;GObject.threads_init()&#xa;A=Simulator()&#xa;if len(sys.argv)>1:&#xa;  if os.path.isfile(sys.argv[1]):&#xa;    A.openFile(sys.argv[1])&#xa;&#xa;&#xa;Gtk.main()&#xa;" id="laA8U4SbrJMK"/>
    <sourcecode value=":&#xa;self.string=string&#xa;self.EOF=False&#xa;" id="uEBrYlQLPk7D"/>
    <sourcecode value=":&#xa;if self.EOF:&#xa;  return&quot;&quot;&#xa;&#xa;self.EOF=True&#xa;if size==-1:&#xa;  return self.string&#xa;&#xa;else:&#xa;  try:&#xa;    self.string[size]&#xa;    return self.string[size]&#xa;&#xa;  except IndexError:&#xa;    return self.string" id="bW3ZYwrAInl8"/>
    <sourcecode value=":&#xa;if'default'in kwargs:&#xa;  default=kwargs['default']&#xa;  del kwargs['default']&#xa;&#xa;else:&#xa;  default=''&#xa;&#xa;if'label'in kwargs:&#xa;  labelText=kwargs['label']&#xa;  del kwargs['label']&#xa;&#xa;else:&#xa;  labelText=&quot;&quot;&#xa;&#xa;super(EntryDialog,self).__init__(*args,**kwargs)&#xa;self.entry=Gtk.Entry(text=default)&#xa;self.entry.connect(&quot;activate&quot;,lambda entry,dialog,resp:&#xa;  dialog.response(resp),self,Gtk.ResponseType.OK)&#xa;&#xa;self.vbox.pack_end(self.entry,True,True,0)&#xa;if labelText!=&quot;&quot;:&#xa;  label=Gtk.Label(label=labelText)&#xa;  label.set_justify(Gtk.Justification.LEFT)&#xa;  self.vbox.pack_end(label,True,True,0)&#xa;&#xa;self.vbox.show_all()&#xa;" id="YFyEmExPbYDd"/>
    <sourcecode value=":&#xa;response=super(EntryDialog,self).run()&#xa;if response==Gtk.ResponseType.OK:&#xa;  return self.entry.get_text()&#xa;&#xa;else:&#xa;  return None&#xa;&#xa;" id="aZD6QsV0DfMX"/>
    <sourcecode value=":&#xa;self.restart()&#xa;" id="xnXW5RQb0GwR"/>
    <sourcecode value=":&#xa;self.registers=:&#xa;  &quot;AX&quot;:0,&quot;BX&quot;:0,&quot;CX&quot;:0,&quot;DX&quot;:0,&quot;SP&quot;:32760,&#xa;  &quot;BP&quot;:32760,&quot;SI&quot;:0,&quot;DI&quot;:0,&quot;PC&quot;:0&#xa;self.flags=:&#xa;  &quot;Z&quot;:False,&quot;S&quot;:False,&quot;O&quot;:False,&quot;C&quot;:False,&#xa;  &quot;A&quot;:False,&quot;P&quot;:False,&quot;D&quot;:False,&quot;I&quot;:False&#xa;self.lookupTable=:&#xa;&#xa;&#xa;self.localVars=:&#xa;&#xa;&#xa;self.lastLine=-1&#xa;self.stack=[]&#xa;self.breakPoints=[]&#xa;self.DATA=:&#xa;&#xa;&#xa;self.BSS=:&#xa;&#xa;&#xa;self.effectiveBSSandDATALocation=:&#xa;&#xa;&#xa;self.codeBounds=[-1,-1]&#xa;self.running=False&#xa;self.ran=False&#xa;self.runningAll=False&#xa;self.waitingForChar=False&#xa;self.inBuffer=&quot;&quot;&#xa;self.addressSpace=[str(0)for i in range(1024)]&#xa;self.jumpLocation=-1&#xa;as88=commandinterpreter.CommandInterpreter(self)&#xa;self.commandArgs=as88.getCommandArgs()&#xa;self.do=as88.getFunctionTable()&#xa;" id="mhSnxMC4nlVu"/>
    <sourcecode value=":&#xa;self.ran=False&#xa;self.runningAll=False&#xa;self.lines=lines&#xa;errorString=&quot;&quot;&#xa;lineCount=0&#xa;mode=&quot;head&quot;&#xa;self.restart()&#xa;errorCount=0&#xa;BSScount=0&#xa;for line in self.lines:&#xa;  line=line.strip()&#xa;  if&quot;!&quot;in line:&#xa;    line=line[:line.find(&quot;!&quot;)].strip()&#xa;&#xa;  lineCount+=1&#xa;  if mode==&quot;head&quot;and&quot;=&quot;in line:&#xa;    line=line.split('=')&#xa;    line[0]=line[0].strip()&#xa;    line[1]=line[1].strip()&#xa;    if self.isLocalVar(line[0]):&#xa;      errorString+=&quot;Error on line &quot;+str(lineCount)+\&#xa;      &quot;, cannot define \''&quot;+line[0]+\&quot;\' more than once.\n&quot;errorCount+=1&#xa;&#xa;    else:&#xa;      self.setLocalVar(line[0],line[1])&#xa;&#xa;    continue&#xa;&#xa;  if&quot;.SECT&quot;in line.upper():&#xa;    if mode==&quot;.SECT .TEXT&quot;:&#xa;      self.setCodeBounds(1,lineCount-1)&#xa;&#xa;    elif line.upper()==&quot;.SECT .TEXT&quot;:&#xa;      self.setCodeBounds(0,lineCount)&#xa;&#xa;    mode=line&#xa;    continue&#xa;&#xa;  if&quot;:&quot;in line:&#xa;    temp=line.split(&quot;:&quot;)[0]&#xa;    if mode==&quot;.SECT .TEXT&quot;:&#xa;      if temp not in self.lookupTable.keys():&#xa;        self.lookupTable[temp]=lineCount&#xa;&#xa;      else:&#xa;        if temp.isdigit():&#xa;          if type(self.lookupTable[temp])==self.LIST_TYPE:&#xa;            self.lookupTable[temp].append(lineCount)&#xa;&#xa;          else:&#xa;            self.lookupTable[temp]=[&#xa;            self.lookupTable[temp],lineCount]&#xa;&#xa;        else:&#xa;          errorString+=&quot;Duplicate entry: \&quot;&quot;+temp+\&#xa;          &quot;\&quot; on line &quot;+str(lineCount)+\&quot; and line &quot;+str(self.lookupTable[temp])\+&quot;\n&quot;&#xa;&#xa;&#xa;    elif mode==&quot;.SECT .DATA&quot;:&#xa;      if&quot;.ASCIZ&quot;in line.upper()or&quot;.ASCII&quot;in line.upper():&#xa;        if line.count(&quot;\&quot;&quot;)&lt;2:&#xa;          errorString+=&quot;Fatal error on line &quot;+\&#xa;          str(lineCount)+\&quot;. Too many quotes.\n&quot;return errorString&#xa;&#xa;        temp2=self.replaceEscapedSequences(&#xa;        line[line.find(&quot;\&quot;&quot;)+1:\line.rfind(&quot;\&quot;&quot;)])self.DATA[temp]=[BSScount,BSScount+len(temp2)+\&#xa;        (&quot;.ASCIZ&quot;in line.upper())-1]self.addressSpace[BSScount:BSScount+len(temp2)]=\&#xa;        temp2+&quot;0&quot;*(&quot;.ASCIZ&quot;in line.upper())BSScount+=len(temp2)+(&quot;.ASCIZ&quot;in line.upper())&#xa;&#xa;&#xa;    elif mode==&quot;.SECT .BSS&quot;:&#xa;      temp2=line.split(&quot;.SPACE&quot;)[1]&#xa;      self.BSS[temp.strip()]=[BSScount,BSScount+\&#xa;      int(temp2.strip())-1]BSScount+=int(temp2.strip())&#xa;&#xa;&#xa;&#xa;if mode==&quot;.SECT .TEXT&quot;and self.codeBounds[1]==-1:&#xa;  self.codeBounds[1]=len(self.lines)&#xa;&#xa;if errorString==&quot;&quot;:&#xa;  self.setRegister('PC',self.codeBounds[0])&#xa;  self.running=True&#xa;  errorString=&quot;&quot;&#xa;&#xa;else:&#xa;  errorString+=&quot;Your code cannot be run, it contains %d errors&quot;%\&#xa;  errorString.count(&quot;\n&quot;)&#xa;return errorString&#xa;" id="snufWNXrpkFB"/>
    <sourcecode value=":&#xa;self.running=False&#xa;self.ran=True&#xa;self.runningAll=False&#xa;" id="R0jvZvVNBt4z"/>
    <sourcecode value=":&#xa;self.breakPoints.append(bp)&#xa;" id="spfduyyMz56c"/>
    <sourcecode value=":&#xa;self.breakPoints.remove(bp)&#xa;" id="1P71gRPM521c"/>
    <sourcecode value=":&#xa;totalResult=&quot;&quot;&#xa;self.runningAll=True&#xa;while self.running:&#xa;  if self.getRegister('PC')in self.breakPoints:&#xa;    response=self.step()&#xa;    if response is not None and response!=0:&#xa;      totalResult+=response&#xa;&#xa;    self.runningAll=False&#xa;    break&#xa;&#xa;  response=self.step()&#xa;  if response is not None and response!=0:&#xa;    totalResult+=str(response)&#xa;&#xa;  if self.waitingForChar:&#xa;    break&#xa;&#xa;&#xa;return totalResult&#xa;" id="l7toe6sp5UDT"/>
    <sourcecode value=":&#xa;if self.running:&#xa;  if self.getRegister('PC')>=self.codeBounds[1]:&#xa;    self.stopRunning()&#xa;    return self._OVER&#xa;&#xa;  line=self.lines[self.getRegister('PC')].replace(&quot;\t&quot;,&quot;&quot;)&#xa;  if&quot;!&quot;in line:&#xa;    line=line[:line.find(&quot;!&quot;)].strip()&#xa;&#xa;  if&quot;:&quot;in line:&#xa;    line=line[line.find(&quot;:&quot;)+1:].strip()&#xa;&#xa;  if line.count(&quot;,&quot;)>1:&#xa;    self.stopRunning(-1)&#xa;    return&quot;Too many commas on line &quot;+str(self.getRegister('PC'))&#xa;&#xa;  command=[self.replaceEscapedSequences(x.strip())for x in\&#xa;  line.replace(&quot; &quot;,&quot;,&quot;).split(&quot;,&quot;)]for x in range(command.count(&quot;&quot;)):&#xa;    command.remove(&quot;&quot;)&#xa;&#xa;  if command is None or command==[]:&#xa;    self.lastLine=self.getRegister('PC')&#xa;    self.setRegister('PC',self.getRegister('PC')+1)&#xa;    return&#xa;&#xa;  if command[0]not in self.commandArgs.keys():&#xa;    self.stopRunning(-1)&#xa;    return&quot;Fatal error. &quot;+command[0]+&quot; not recognised.&quot;&#xa;&#xa;  if len(command)-1!=self.commandArgs[command[0]]:&#xa;    self.stopRunning(-1)&#xa;    return&quot;Invalid number of arguments on line &quot;+\&#xa;    str(self.getRegister('PC'))+&quot;. &quot;+command[0]+\&quot; expects &quot;+str(self.commandArgs[command[0]])+\&quot; argument&quot;+&quot;s&quot;*(self.commandArgs[command[0]]&gt;1)+\&quot; and &quot;+str(len(command)-1)+\(&quot; were &quot;if len(command)-1>1 else&quot; was &quot;)+&quot;given.&quot;&#xa;  if command[0]in self.do.keys():&#xa;    try:&#xa;      response=self.do[command[0]](command,&#xa;      self.getRegister('PC'))&#xa;    except:&#xa;      response=&quot;Fatal error occurred on line &quot;+\&#xa;      str(self.getRegister('PC'))&#xa;&#xa;  else:&#xa;    self.stopRunning(-1)&#xa;    return&quot;Fatal error. &quot;+command[0]+&quot; not recognised.&quot;&#xa;&#xa;  if self.jumpLocation!=-1:&#xa;    self.lastLine=self.getRegister('PC')&#xa;    self.setRegister('PC',self.jumpLocation)&#xa;    self.jumpLocation=-1&#xa;&#xa;  else:&#xa;    self.lastLine=self.getRegister('PC')&#xa;    self.setRegister('PC',self.getRegister('PC')+1)&#xa;&#xa;  if self.getRegister('PC')>=self.codeBounds[1]:&#xa;    self.stopRunning()&#xa;    return self._OVER&#xa;&#xa;  return response&#xa;&#xa;" id="w9lzcyQAeF8x"/>
    <sourcecode value=":&#xa;return self.waitingForChar&#xa;" id="ZF2DV88yOMSF"/>
    <sourcecode value=":&#xa;if self.inBuffer==&quot;&quot;:&#xa;  self.waitingForChar=True&#xa;&#xa;else:&#xa;  self.setRegister('AX',ord(self.inBuffer[0]))&#xa;  self.inBuffer=self.inBuffer[1:]&#xa;&#xa;" id="D1VbNvpJd0rl"/>
    <sourcecode value=":&#xa;self.waitingForChar=False&#xa;self.inBuffer=string&#xa;self.getChar()&#xa;" id="STy5RpqccI4B"/>
    <sourcecode value=":&#xa;return self.do[function].__doc__&#xa;" id="ziw3wEwUZrLR"/>
    <sourcecode value=":&#xa;return self.do.keys()&#xa;" id="qUfAK3yHReyS"/>
    <sourcecode value=":&#xa;return(&quot;AH&quot;,&quot;AL&quot;,&quot;BH&quot;,&quot;BL&quot;,&quot;CH&quot;,&quot;CL&quot;,&quot;DH&quot;,&quot;DL&quot;)&#xa;" id="5pEURCue0OBZ"/>
    <sourcecode value=":&#xa;self.jumpLocation=l&#xa;" id="Q2kQOv0Gp9ZC"/>
    <sourcecode value=":&#xa;return self.lookupTable&#xa;" id="YHIEUwSXaLFS"/>
    <sourcecode value=":&#xa;return self.stack&#xa;" id="ZJR9egawiJFJ"/>
    <sourcecode value=":&#xa;self.lookupTable[label]=value&#xa;" id="LIh3buKKke6p"/>
    <sourcecode value=":&#xa;return label in self.lookupTable&#xa;" id="uHmEFf96tNij"/>
    <sourcecode value=":&#xa;return(&quot;AX&quot;,&quot;BX&quot;,&quot;CX&quot;,&quot;DX&quot;,&quot;BP&quot;,&quot;SP&quot;,&quot;DI&quot;,&quot;SI&quot;,&quot;PC&quot;)&#xa;" id="bvY3syOJp63X"/>
    <sourcecode value=":&#xa;if reg in self.registers.keys():&#xa;  self.registers[reg]=to&#xa;&#xa;else:&#xa;  raise TypeError&#xa;&#xa;" id="f03V642rjAak"/>
    <sourcecode value=":&#xa;if reg in self.registers.keys():&#xa;  return self.registers[reg]&#xa;&#xa;else:&#xa;  raise TypeError&#xa;&#xa;" id="e1yE7JrIdM87"/>
    <sourcecode value=":&#xa;if reg=='AL':&#xa;  self.registers['AX']=to+self.getEightBitRegister('AH')*256&#xa;&#xa;elif reg=='BL':&#xa;  self.registers['BX']=to+self.getEightBitRegister('BH')*256&#xa;&#xa;elif reg=='CL':&#xa;  self.registers['CX']=to+self.getEightBitRegister('CH')*256&#xa;&#xa;elif reg=='DL':&#xa;  self.registers['DX']=to+self.getEightBitRegister('DH')*256&#xa;&#xa;elif reg==&quot;AH&quot;:&#xa;  self.registers['AX']=to*256+self.getEightBitRegister('AL')&#xa;&#xa;elif reg==&quot;BH&quot;:&#xa;  self.registers['BX']=to*256+self.getEightBitRegister('BL')&#xa;&#xa;elif reg==&quot;CH&quot;:&#xa;  self.registers['CX']=to*256+self.getEightBitRegister('CL')&#xa;&#xa;elif reg==&quot;DH&quot;:&#xa;  self.registers['DX']=to*256+self.getEightBitRegister('DL')&#xa;&#xa;else:&#xa;  raise TypeError&#xa;&#xa;" id="lcEa3Ca0EBtH"/>
    <sourcecode value=":&#xa;try:&#xa;  temp=&quot;&quot;&#xa;  if s==&quot;AH&quot;:&#xa;    temp=self.intToHex(self.registers[&quot;AX&quot;])[-4:-2]&#xa;&#xa;  elif s==&quot;AL&quot;:&#xa;    temp=self.intToHex(self.registers[&quot;AX&quot;])[-2:]&#xa;&#xa;  elif s==&quot;BH&quot;:&#xa;    temp=self.intToHex(self.registers[&quot;BX&quot;])[-4:-2]&#xa;&#xa;  elif s==&quot;BL&quot;:&#xa;    temp=self.intToHex(self.registers[&quot;BX&quot;])[-2:]&#xa;&#xa;  elif s==&quot;CH&quot;:&#xa;    temp=self.intToHex(self.registers[&quot;CX&quot;])[-4:-2]&#xa;&#xa;  elif s==&quot;CL&quot;:&#xa;    temp=self.intToHex(self.registers[&quot;CX&quot;])[-2:]&#xa;&#xa;  elif s==&quot;DH&quot;:&#xa;    temp=self.intToHex(self.registers[&quot;DX&quot;])[-4:-2]&#xa;&#xa;  elif s==&quot;DL&quot;:&#xa;    temp=self.intToHex(self.registers[&quot;DX&quot;])[-2:]&#xa;&#xa;  else:&#xa;    raise TypeError&#xa;&#xa;  return int(temp,16)&#xa;&#xa;except ValueError:&#xa;  return 0&#xa;&#xa;" id="HMSDpMBTm8JN"/>
    <sourcecode value=":&#xa;while i>2**16:&#xa;  i-=2**16&#xa;&#xa;while i&lt;0:&#xa;  i+=2**16&#xa;&#xa;if i>2**16 or i&lt;0:&#xa;  print&quot;FATAL ERROR&quot;&#xa;&#xa;hexString=str(hex(i).split(&quot;x&quot;)[1]).upper()&#xa;return&quot;0&quot;*(2-len(hexString))+hexString&#xa;" id="o8SEtHfE4m8n"/>
    <sourcecode value=":&#xa;return string.replace(&quot;\\n&quot;,&quot;\n&quot;).replace(&quot;\\'&quot;,&quot;'&quot;)\&#xa;.replace('\\&quot;','&quot;').replace(&quot;\\a&quot;,&quot;\a&quot;).replace(&quot;\\b&quot;,&quot;\b&quot;)\.replace(&quot;\\f&quot;,&quot;\f&quot;).replace(&quot;\\r&quot;,&quot;\r&quot;).replace(&quot;\\t&quot;,&quot;\t&quot;)\.replace(&quot;\\v&quot;,&quot;\v&quot;)" id="cXqtBxew2lDl"/>
    <sourcecode value=":&#xa;return string.replace(&quot;\n&quot;,&quot;\\n&quot;).replace(&quot;\'&quot;,&quot;\\'&quot;).\&#xa;replace('\&quot;','\\&quot;').replace(&quot;\a&quot;,&quot;\\a&quot;).replace(&quot;\b&quot;,&quot;\\b&quot;)\.replace(&quot;\f&quot;,&quot;\\f&quot;).replace(&quot;\r&quot;,&quot;\\r&quot;).replace(&quot;\t&quot;,&quot;\\t&quot;)\.replace(&quot;\v&quot;,&quot;\\v&quot;)" id="akFwBYV6jCdZ"/>
    <sourcecode value=":&#xa;if toAddr==-1:&#xa;  return self.addressSpace[addr]&#xa;&#xa;else:&#xa;  return self.addressSpace[addr:toAddr]&#xa;&#xa;" id="gomsL5j5i7Wt"/>
    <sourcecode value=":&#xa;return self.localVars[arg]&#xa;" id="9Nyt6xzsc9KP"/>
    <sourcecode value=":&#xa;self.localVars[key]=val&#xa;" id="xLBlit7UAwfc"/>
    <sourcecode value=":&#xa;self.codeBounds[i]=val&#xa;" id="AnUTQZVulwXu"/>
    <sourcecode value=":&#xa;return self.lastLine&#xa;" id="kybnWAEdAXV8"/>
    <sourcecode value=":&#xa;self.lastLine=l&#xa;" id="rh61FcAdsGf2"/>
    <sourcecode value=":&#xa;return v in self.localVars.keys()&#xa;" id="uM2fmNP9rqV2"/>
    <sourcecode value=":&#xa;return self.lookupTable[label]&#xa;" id="H3EbhDQTYqrW"/>
    <sourcecode value=":&#xa;self.stack.append(value)&#xa;" id="kBWX956Ce8dJ"/>
    <sourcecode value=":&#xa;return self.stack.pop()&#xa;" id="JAiyimL9Ce5Q"/>
    <sourcecode value=":&#xa;return len(self.stack)&#xa;" id="CDRMpXnYTBcl"/>
    <sourcecode value=":&#xa;return self.stack[-1]&#xa;" id="oADFJp0LuRm4"/>
    <sourcecode value=":&#xa;self.flags[f]=a&#xa;" id="aOYSnIUMe2AT"/>
    <sourcecode value=":&#xa;return self.flags[f]&#xa;" id="9ulz8Dde9em6"/>
    <sourcecode value=":&#xa;return tuple(self.BSS.keys())&#xa;" id="gu9X76creRtp"/>
    <sourcecode value=":&#xa;return tuple(self.DATA.keys())&#xa;" id="UdK74BwXn6wt"/>
    <sourcecode value=":&#xa;return key in self.BSS&#xa;" id="EnRzrLrQoZPP"/>
    <sourcecode value=":&#xa;return key in self.DATA&#xa;" id="bpYledBiQMcJ"/>
    <sourcecode value=":&#xa;if key in self.BSS.keys():&#xa;  return self.getFromBSS(key,index)&#xa;&#xa;elif key in self.DATA.keys():&#xa;  return self.getFromDATA(key,index)&#xa;&#xa;" id="cpLuire29mFl"/>
    <sourcecode value=":&#xa;if index is None:&#xa;  return self.BSS[key]&#xa;&#xa;else:&#xa;  return self.BSS[key][index]&#xa;&#xa;" id="lMd4hc3tG2Dh"/>
    <sourcecode value=":&#xa;if index is None:&#xa;  return self.DATA[key]&#xa;&#xa;else:&#xa;  return self.DATA[key][index]&#xa;&#xa;" id="q8bHt6OHaOu8"/>
    <sourcecode value=":&#xa;return tuple(self.codeBounds)&#xa;" id="7tWpLmRqQJwQ"/>
    <sourcecode value=":&#xa;self.addressSpace[addr]=to&#xa;" id="0qYP7UpCenDt"/>
    <sourcecode value=":&#xa;try:&#xa;  if str(string)[-1]==&quot;h&quot;:&#xa;    int(str(string)[:-1],16)&#xa;    return True&#xa;&#xa;  else:&#xa;    int(str(string))&#xa;    return True&#xa;&#xa;&#xa;except ValueError:&#xa;  return False&#xa;&#xa;" id="vlr8KFSMOz1N"/>
    <sourcecode value=":&#xa;return self.running&#xa;" id="zsCsbBFSf1Bd"/>
    <sourcecode value=":&#xa;return self.runningAll&#xa;" id="LPbyOlbuV6ig"/>
    <sourcecode value=":&#xa;return self.ran&#xa;" id="1LuXRbB0fcW3"/>
    <sourcecode value=":&#xa;return bp in self.breakPoints" id="Wa59DZD4stPQ"/>
    <sourcecode value=":&#xa;self.SYSCodes=:&#xa;  &quot;_EXIT&quot;:1,&quot;_PRINTF&quot;:127,&quot;_GETCHAR&quot;:117,&#xa;  &quot;_SSCANF&quot;:125,&quot;_READ&quot;:3,&quot;_OPEN&quot;:5,&quot;_CLOSE&quot;:6&#xa;self.machine=machine&#xa;self.LIST_TYPE=type([1,1])&#xa;" id="muzGGqQaICJD"/>
    <sourcecode value=":&#xa;return:&#xa;  &quot;AAA&quot;:0,&#xa;  &quot;AAD&quot;:0,&quot;AAM&quot;:0,&quot;AAS&quot;:0,&quot;ADC&quot;:2,&quot;ADD&quot;:2,&quot;AND&quot;:2,&quot;CALL&quot;:1,&quot;CBW&quot;:0,&quot;CLC&quot;:0,&quot;CLD&quot;:0,&quot;CLI&quot;:0,&quot;CMC&quot;:0,&quot;CMP&quot;:2,&quot;CMPB&quot;:2,&quot;CMPSB&quot;:0,&quot;CMPSW&quot;:0,&quot;DAA&quot;:0,&quot;DAS&quot;:0,&quot;DEC&quot;:1,&quot;DIV&quot;:2,&quot;IDIV&quot;:1,&quot;IMUL&quot;:1,&quot;INC&quot;:1,&quot;JA&quot;:1,&quot;JAE&quot;:1,&quot;JB&quot;:1,&quot;JBE&quot;:1,&quot;JC&quot;:1,&quot;JCXZ&quot;:1,&quot;JE&quot;:1,&quot;JG&quot;:1,&quot;JGE&quot;:1,&quot;JL&quot;:1,&quot;JLE&quot;:1,&quot;JMP&quot;:1,&quot;JNA&quot;:1,&quot;JNAE&quot;:1,&quot;JNB&quot;:1,&quot;JNBE&quot;:1,&quot;JNC&quot;:1,&quot;JNE&quot;:1,&quot;JNG&quot;:1,&quot;JNGE&quot;:1,&quot;JNL&quot;:1,&quot;JNLE&quot;:1,&quot;JNO&quot;:1,&quot;JNP&quot;:1,&quot;JNS&quot;:1,&quot;JNZ&quot;:1,&quot;JO&quot;:1,&quot;JP&quot;:1,&quot;JPE&quot;:1,&quot;JPO&quot;:1,&quot;JS&quot;:1,&quot;JZ&quot;:1,&quot;LAHF&quot;:0,&quot;LDS&quot;:2,&quot;LEA&quot;:2,&quot;LES&quot;:2,&quot;LODSB&quot;:0,&quot;LODSW&quot;:0,&quot;LOOP&quot;:1,&quot;LOOPE&quot;:1,&quot;LOOPNE&quot;:1,&quot;LOOPNZ&quot;:1,&quot;LOOPZ&quot;:1,&quot;MOV&quot;:2,&quot;MOVSB&quot;:0,&quot;MOVSW&quot;:0,&quot;MUL&quot;:2,&quot;NEG&quot;:1,&quot;NOP&quot;:0,&quot;NOT&quot;:1,&quot;OR&quot;:2,&quot;POP&quot;:1,&quot;POPF&quot;:0,&quot;PUSH&quot;:1,&quot;PUSHF&quot;:0,&quot;RCL&quot;:2,&quot;RCR&quot;:2,&quot;REP&quot;:0,&quot;REPE&quot;:0,&quot;REPNE&quot;:0,&quot;REPNZ&quot;:0,&quot;REPZ&quot;:0,&quot;RET&quot;:0,&quot;ROL&quot;:2,&quot;ROR&quot;:2,&quot;SAHF&quot;:0,&quot;SAL&quot;:2,&quot;SAR&quot;:2,&quot;SBB&quot;:2,&quot;SCASB&quot;:0,&quot;SCASW&quot;:0,&quot;SHL&quot;:2,&quot;SHR&quot;:2,&quot;STC&quot;:0,&quot;STD&quot;:0,&quot;STI&quot;:0,&quot;STOSB&quot;:0,&quot;STOSW&quot;:0,&quot;SUB&quot;:2,&quot;SYS&quot;:0,&quot;TEST&quot;:2,&quot;XCHG&quot;:2,&quot;XOR&quot;:2&#xa;" id="mrKJ7QOai5x6"/>
    <sourcecode value=":&#xa;return:&#xa;&#xa;  &quot;AAA&quot;:self.AAA,&quot;AAD&quot;:self.AAD,&quot;AAM&quot;:self.AAM,&quot;AAS&quot;:self.AAS,&quot;ADC&quot;:self.ADC,&quot;ADD&quot;:self.ADD,&quot;AND&quot;:self.AND,&quot;CALL&quot;:self.CALL,&quot;CLC&quot;:self.CLC,&quot;CLD&quot;:self.CLD,&quot;CLI&quot;:self.CLI,&quot;CMP&quot;:self.CMP,&quot;CMPB&quot;:self.CMPB,&quot;DAA&quot;:self.DAA,&quot;DAS&quot;:self.DAS,&quot;DEC&quot;:self.DEC,&quot;INC&quot;:self.INC,&quot;JA&quot;:self.JA,&quot;JAE&quot;:self.JAE,&quot;JB&quot;:self.JB,&quot;JBE&quot;:self.JBE,&quot;JC&quot;:self.JC,&quot;JCXZ&quot;:self.JCXZ,&quot;JE&quot;:self.JE,&quot;JG&quot;:self.JG,&quot;JGE&quot;:self.JGE,&quot;JL&quot;:self.JL,&quot;JLE&quot;:self.JLE,&quot;JMP&quot;:self.JMP,&quot;JNA&quot;:self.JNA,&quot;JNAE&quot;:self.JNAE,&quot;JNB&quot;:self.JNB,&quot;JNBE&quot;:self.JNBE,&quot;JNC&quot;:self.JNC,&quot;JNE&quot;:self.JNE,&quot;JNG&quot;:self.JNG,&quot;JNGE&quot;:self.JNGE,&quot;JNL&quot;:self.JNL,&quot;JNLE&quot;:self.JNLE,&quot;JNO&quot;:self.JNO,&quot;JNP&quot;:self.JNP,&quot;JNS&quot;:self.JNS,&quot;JNZ&quot;:self.JNZ,&quot;JO&quot;:self.JO,&quot;JP&quot;:self.JP,&quot;JPE&quot;:self.JPE,&quot;JPO&quot;:self.JPO,&quot;JS&quot;:self.JS,&quot;JZ&quot;:self.JZ,&quot;LODSB&quot;:self.LODSB,&quot;LODSW&quot;:self.LODSW,&quot;LOOP&quot;:self.LOOP,&quot;LOOPE&quot;:self.LOOPE,&quot;LOOPNE&quot;:self.LOOPNE,&quot;LOOPNZ&quot;:self.LOOPNZ,&quot;LOOPZ&quot;:self.LOOPZ,&quot;MOV&quot;:self.MOV,&quot;NOP&quot;:self.NOP,&quot;NOT&quot;:self.NOT,&quot;OR&quot;:self.OR,&quot;POP&quot;:self.POP,&quot;POPF&quot;:self.POPF,&quot;PUSH&quot;:self.PUSH,&quot;PUSHF&quot;:self.PUSHF,&quot;RCL&quot;:self.RCL,&quot;RCR&quot;:self.RCR,&quot;REP&quot;:self.REP,&quot;REPE&quot;:self.REPE,&quot;REPNE&quot;:self.REPNE,&quot;REPNZ&quot;:self.REPNZ,&quot;REPZ&quot;:self.REPZ,&quot;RET&quot;:self.RET,&quot;ROL&quot;:self.ROL,&quot;ROR&quot;:self.ROR,&quot;SAL&quot;:self.SAL,&quot;SAR&quot;:self.SAR,&quot;SBB&quot;:self.SBB,&quot;SHL&quot;:self.SHL,&quot;SHR&quot;:self.SHR,&quot;STC&quot;:self.STC,&quot;STD&quot;:self.STD,&quot;STI&quot;:self.STI,&quot;STOSB&quot;:self.STOSB,&quot;STOSW&quot;:self.STOSW,&quot;SUB&quot;:self.SUB,&quot;SYS&quot;:self.SYS,&quot;XCHG&quot;:self.XCHG,&quot;XOR&quot;:self.XOR&#xa;" id="t9XbDUf14vNI"/>
    <sourcecode value=":&#xa;if(self.machine.getEightBitRegister('AL')&amp;15>9)or\&#xa;self.machine.getFlag('A'):&#xa;  tempAH=self.machine.getEightBitRegister('AH')&#xa;  self.machine.setRegister('AX',&#xa;  (self.machine.getEightBitRegister('AL')+6)&amp;15)self.machine.setRegister('AX',&#xa;  self.machine.getREgister('AX')+(tempAH+1)*256)self.machine.setFlag('A')&#xa;  self.machine.setFlag('C')&#xa;&#xa;else:&#xa;  self.machine.setFlag('A',0)&#xa;  self.machine.setFlag('C',0)&#xa;&#xa;" id="QYwURJkzth18"/>
    <sourcecode value=":&#xa;self.machine.setRegister('AX',self.machine.getEightBitRegister('AL')+&#xa;self.machine.getEightBitRegister('AH')*10)" id="1UzcOIbaLae2"/>
    <sourcecode value=":&#xa;tempAL=self.machine.getEightBitRegister('AL')&#xa;self.machine.setRegister('AX',(tempAL%10)+(tempAL/10)*256)&#xa;" id="cj8QDfbxmM2S"/>
    <sourcecode value=":&#xa;if(self.machine.getEightBitRegister('AL')&amp;15>9)or\&#xa;self.machine.getFlag('A'):&#xa;  tempAH=self.machine.getEightBitRegister('AH')&#xa;  self.machine.setRegister('AX',&#xa;  (self.machine.getEightBitRegister('AL')-6)&amp;15)self.machine.setRegister('AX',self.machine.getRegister('AX')+\&#xa;  (tempAH-1)*256)self.machine.setFlag('A')&#xa;  self.machine.setFlag('C')&#xa;&#xa;else:&#xa;  self.machine.setFlag('A',0)&#xa;  self.machine.setFlag('C',0)&#xa;&#xa;" id="lH7yymMJ0hQa"/>
    <sourcecode value=":&#xa;self.ADD(command,i,carry=True)&#xa;" id="G3LTxmdaZ5G1"/>
    <sourcecode value=":&#xa;if command[1]==&quot;SP&quot;and command[2].isdigit():&#xa;  for j in range(int(command[2])/2):&#xa;    if self.machine.stackSize()>0:&#xa;      self.machine.popFromStack()&#xa;&#xa;&#xa;  self.machine.setRegister('SP',self.machine.getRegister('SP')+&#xa;  int(command[2]))return&#xa;&#xa;if self.machine.isHex(command[1]):&#xa;  if not inPlace:&#xa;    self.machine.stopRunning(-1)&#xa;    return&quot;Error on line &quot;+str(i)+&quot;. &quot;+command[0]+\&#xa;    &quot; cannot have a numerical first argument.&quot;&#xa;&#xa;argumentType=self.testArgument(command,2,i,[self._REG,self._MEM,&#xa;self._IMMED])if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;y=self.getValue(command[2],argumentType)&#xa;if carry:&#xa;  y+=self.machine.getFlag('C')&#xa;&#xa;if command[0].upper()in[&quot;SUB&quot;,&quot;SBB&quot;,&quot;CMP&quot;,&#xa;&quot;CMPB&quot;,&quot;SCASB&quot;,&quot;SCASW&quot;]:&#xa;  y*=-1&#xa;&#xa;if not inPlace:&#xa;  argumentType=self.testArgument(command,1,i,[self._REG,&#xa;  self._MEM])if argumentType==self._ERROR:&#xa;    return self.ERRSTR&#xa;&#xa;  result=self.getValue(command[1],argumentType)+y&#xa;&#xa;else:&#xa;  result=int(command[1],10)+y&#xa;&#xa;self.machine.setFlag('O',0)&#xa;if result>=2**15:&#xa;  while result>=2**15:&#xa;    result-=2**16&#xa;&#xa;  self.machine.setFlag('O')&#xa;&#xa;elif result&lt;-2**15:&#xa;  while result&lt;-2**15:&#xa;    result+=2**16&#xa;&#xa;  self.machine.setFlag('O')&#xa;&#xa;if not inPlace:&#xa;  self.setValue(command[1],argumentType,result)&#xa;&#xa;self.machine.setFlag('Z',result==0)&#xa;self.machine.setFlag('S',result&lt;0)&#xa;self.machine.setFlag('P',result%2)&#xa;" id="ahep6IyIXi3r"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,2,i,(self._IMMED,&#xa;self._REG,self._MEM))if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;t=self.getValue(command[2],argumentType)&#xa;argumentType=self.testArgument(command,1,i,(self._REG,self._MEM))&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;result=self.getValue(command[1],argumentType)&amp;t&#xa;self.setValue(command[1],argumentType,result)&#xa;self.machine.setFlag('P',result%2)&#xa;self.machine.setFlag('S',result&lt;0)&#xa;self.machine.setFlag('Z',result==0)&#xa;self.machine.setFlag('C',0)&#xa;" id="PmlyVnaKqqjI"/>
    <sourcecode value=":&#xa;if command[1]in self.machine.getLookupTable().keys():&#xa;  self.machine.setJumpLocation(&#xa;  self.machine.getLookupTable()[command[1]])self.machine.addToStack(self.machine.getRegister('PC')+1)&#xa;&#xa;else:&#xa;  self.machine.stopRunning(-1)&#xa;  return&quot;Error on line &quot;+str(i)+&quot;. Cannot CALL the label &quot;+\&#xa;  command[1]+&quot;. It does not exist.&quot;&#xa;" id="Ldsw65eP2WZG"/>
    <sourcecode value=":&#xa;if self.machine.getEightBitRegister(&quot;AL&quot;)>=128:&#xa;  self.machine.setRegister('AX',&#xa;  self.machine.getRegister('AX')-256)&#xa;" id="SFpkEQ8HdvJM"/>
    <sourcecode value=":&#xa;self.machine.setFlag(&quot;C&quot;,0)&#xa;" id="gFkTuzQvOfZf"/>
    <sourcecode value=":&#xa;self.machine.setFlag(&quot;D&quot;,0)&#xa;" id="VRhGT4tUqRsE"/>
    <sourcecode value=":&#xa;self.machine.setFlag(&quot;I&quot;,0)&#xa;" id="Yl97Sp9EPboQ"/>
    <sourcecode value=":&#xa;self.machine.setFlag(&quot;C&quot;,not self.machine.getFlag('C'))&#xa;" id="CUI59fOe9tXF"/>
    <sourcecode value=":&#xa;argType=self.testArgument(command,1,i,[self._REG,self._MEM])&#xa;if argType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;x=self.getValue(command[1],argType)&#xa;argType=self.testArgument(command,2,i,[self._REG,self._MEM,&#xa;self._IMMED])if argType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;y=self.getValue(command[2],argType)&#xa;self.SUB([&quot;CMP&quot;,str(x),str(y)],i,inPlace=True)&#xa;" id="242jfNZw5zIf"/>
    <sourcecode value=":&#xa;for x in command[1:3]:&#xa;  if x in['AX','BX','CX','DX']:&#xa;    self.machine.stopRunning(-1)&#xa;    return&quot;Illegal argument for CMPB on line %d. %s is a 16 bit \;&#xa;&#xa;" id="JmmLY74izfvs"/>
    <sourcecode value=":&#xa;if(self.machine.getEightBitRegister('AL')&amp;15>9)or\&#xa;self.machine.getFlag('A'):&#xa;  self.machine.setRegister('AX',self.machine.getRegister('AX')-6)&#xa;  self.machine.setFlag('A')&#xa;&#xa;else:&#xa;  self.machine.setFlag('A',0)&#xa;&#xa;if self.machine.getEightBitRegister('AL')>159 or\&#xa;self.machine.getFlag('C'):&#xa;  self.machine.setRegister('AX',self.machine.getRegister('AX')-96)&#xa;  self.machine.setFlag('C')&#xa;&#xa;else:&#xa;  self.machine.setFlag('C',0)&#xa;&#xa;" id="0mXR1NOLE3ej"/>
    <sourcecode value=":&#xa;self.incdec(command,i,-1)&#xa;" id="58USpWqruX8L"/>
    <sourcecode value=":&#xa;self.incdec(command,i,1)&#xa;" id="vj8mDgTE3z8y"/>
    <sourcecode value=":&#xa;self.jf(self,i,&#xa;not self.machine.getFlag('S')and not self.machine.getFlag('Z'))" id="lA21VNSU97Xu"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;not self.machine.getFlag('S')or self.machine.getFlag('Z'))" id="ikHIL4MHJtKe"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('S')and not self.machine.getFlag('Z'))" id="aaCd2i0abdQL"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('S')or self.machine.getFlag('Z'))" id="YlPVQWRpfyoN"/>
    <sourcecode value=":&#xa;self.jf(command,i,self.machine.getFlag('C'))&#xa;" id="rY1HVFAxso3T"/>
    <sourcecode value=":&#xa;self.jf(command,i,self.machine.getRegister('CX')==0)&#xa;" id="SSY8mwFKQLjk"/>
    <sourcecode value=":&#xa;self.jf(command,i,self.machine.getFlag('Z'))&#xa;" id="l5C8WDIsUld5"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;not self.machine.getFlag('S')and not self.machine.getFlag('Z'))" id="Uhni5vRgJ2jR"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;not self.machine.getFlag('S')or self.machine.getFlag('Z'))" id="wDrjpBaKu48f"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('S')and not self.machine.getFlag('Z'))" id="K05RUgL7qbe6"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('S')or self.machine.getFlag('Z'))" id="msmUdlh33zMx"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('S')or self.machine.getFlag('Z'))" id="0R9yHcaskDXr"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('S')and not self.machine.getFlag('Z'))" id="1IZiywhDrWD1"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;not self.machine.getFlag('S')or self.machine.getFlag('Z'))" id="5P3L0UYYaxyC"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;not self.machine.getFlag('S')and not self.machine.getFlag('Z'))" id="J3UkbMDYlC84"/>
    <sourcecode value=":&#xa;self.jf(command,i,not self.machine.getFlag('C'))&#xa;" id="4zWVYIVPC31L"/>
    <sourcecode value=":&#xa;self.jf(command,i,not self.machine.getFlag('Z'))&#xa;" id="6xbcMxh3o8vj"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('S')or self.machine.getFlag('Z'))" id="Ev0uZuxDS4c9"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('S')and not self.machine.getFlag('Z'))" id="x4t57Wn06gOi"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;not self.machine.getFlag('S')or self.machine.getFlag('Z'))" id="bbADbst5OcfX"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;not self.machine.getFlag('S')and not self.machine.getFlag('Z'))" id="PEXpmqpD3szp"/>
    <sourcecode value=":&#xa;self.jf(command,i,not self.machine.getFlag('O'))&#xa;" id="Md3ddKeVNqPJ"/>
    <sourcecode value=":&#xa;self.jf(command,i,not self.machine.getFlag('P'))&#xa;" id="lXa100sk2Csu"/>
    <sourcecode value=":&#xa;self.jf(command,i,not self.machine.getFlag('S'))&#xa;" id="1OWwmJs7zWVp"/>
    <sourcecode value=":&#xa;self.jf(command,i,not self.machine.getFlag('Z'))&#xa;" id="X1tmg7mgCsbk"/>
    <sourcecode value=":&#xa;self.jf(command,i,self.machine.getFlag('O'))&#xa;" id="Khck9Vpg6ZPY"/>
    <sourcecode value=":&#xa;self.jf(command,i,self.machine.getFlag('P'))&#xa;" id="ttsqHEu8Ne66"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('P')or self.machine.getFlag('Z'))" id="8VlMIZsIHUdb"/>
    <sourcecode value=":&#xa;self.jf(command,i,&#xa;self.machine.getFlag('P')or self.machine.getFlag('O'))" id="CBQbAUIiOEVk"/>
    <sourcecode value=":&#xa;self.jf(command,i,self.machine.getFlag('S'))&#xa;" id="Evblw2TPjsEe"/>
    <sourcecode value=":&#xa;self.jf(command,i,self.machine.getFlag('Z'))&#xa;" id="yFdEElSEL3wm"/>
    <sourcecode value=":&#xa;if command[1]in self.machine.getLookupTable().keys()and\&#xa;not self.machine.isHex(command[1]):&#xa;  self.machine.setJumpLocation(&#xa;  self.machine.getLookupTable()[command[1]])&#xa;elif(command[1].rstrip('b').isdigit()or&#xa;command[1].rstrip('f').isdigit())and\command[1].strip('bf')in self.machine.getLookupTable().keys():&#xa;  temp=command[1].rstrip('bf')&#xa;  m=-1&#xa;  if type(self.machine.getLookupTable()[temp])==self.LIST_TYPE:&#xa;    for x in self.machine.getLookupTable()[temp]:&#xa;      if command[1][-1]=='b':&#xa;        if x&lt;self.machine.getRegister('PC')and\&#xa;        (m&lt;x or m==-1):&#xa;          m=x&#xa;&#xa;&#xa;      else:&#xa;        if x>self.machine.getRegister('PC')and\&#xa;        (x&lt;m or m==-1):&#xa;          m=x&#xa;&#xa;&#xa;&#xa;&#xa;  else:&#xa;    m=self.machine.getLookupTable()[temp]&#xa;&#xa;  if m==-1:&#xa;    self.machine.stopRunning(-1)&#xa;    return&quot;Fatal error on line &quot;+str(i)+&quot;. The label &quot;+\&#xa;    command[1]+&quot; could not be resolved.&quot;&#xa;  else:&#xa;    self.machine.setJumpLocation(m)&#xa;&#xa;&#xa;elif self.machine.isHex(command[1]):&#xa;  if command[1][-1]==&quot;h&quot;:&#xa;    self.machine.setJumpLocation(int(command[1][:-1],16))&#xa;&#xa;  else:&#xa;    self.machine.setJumpLocation(int(command[1]))&#xa;&#xa;&#xa;else:&#xa;  return&quot;Error on line &quot;+str(i)+&quot;. The label &quot;+command[1]+\&#xa;  &quot; is not defined for &quot;+referer+&quot;-ing to.&quot;&#xa;" id="06MmBhmyS18F"/>
    <sourcecode value=":&#xa;si=self.machine.getRegister('SI')&#xa;byte=self.machine.getFromMemoryAddress(si)&#xa;self.machine.setRegister('AX',byte)&#xa;if self.machine.getFlag('D'):&#xa;  siVal=si-1&#xa;&#xa;else:&#xa;  siVal=si+1&#xa;&#xa;self.machine.setRegister('SI',siVal)&#xa;" id="l1FEhKZPKJvf"/>
    <sourcecode value=":&#xa;si=self.machine.getRegister('SI')&#xa;word=self.machine.getFromMemoryAddress(si)&#xa;word+=self.machine.getFromMemoryAddress(si+1)*256&#xa;self.machine.setRegister('AX',word)&#xa;if self.machine.getFlag('D'):&#xa;  siVal=si-2&#xa;&#xa;else:&#xa;  siVal=si+2&#xa;&#xa;self.machine.setRegister('SI',siVal)&#xa;" id="XFBC4hWBkDc6"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._LABEL])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;if flag and self.machine.getRegister(&quot;CX&quot;)>0:&#xa;  self.JMP(command,i,&quot;LOOP&quot;)&#xa;  self.machine.setRegister(&quot;CX&quot;,self.machine.getRegister('CX')-1)&#xa;&#xa;" id="VmCbolmTo7s5"/>
    <sourcecode value=":&#xa;self.LOOP(command,i,self.machine.getFlag('Z'))&#xa;" id="UxWKU16IRBKU"/>
    <sourcecode value=":&#xa;self.LOOP(command,i,not self.machine.getFlag('Z'))&#xa;" id="rzXPW9Q2pjxg"/>
    <sourcecode value=":&#xa;self.LOOP(command,i,not self.machine.getFlag('Z'))&#xa;" id="5SEa60btDaT6"/>
    <sourcecode value=":&#xa;self.LOOP(command,i,self.machine.getFlag('Z'))&#xa;" id="et43ANYSDvuf"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,2,i,(self._IMMED,&#xa;self._REG,self._MEM))if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;t=self.getValue(command[2],argumentType)&#xa;argumentType=self.testArgument(command,1,i,(self._REG,self._MEM))&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;self.setValue(command[1],argumentType,t)&#xa;" id="XqMDPv4I1OP2"/>
    <sourcecode value=":&#xa;return&#xa;" id="j00yWCa0RXT3"/>
    <sourcecode value=":&#xa;si=self.machine.getRegister('SI')&#xa;self.machine.setMemoryAddress(self.machine.getRegister('DI'),&#xa;self.machine.getFromMemoryAddress(si))newSiVal=si-1 if self.machine.getFlag('D')else si+1&#xa;self.machine.setRegister('SI',newSiVal)&#xa;" id="ZT2wWfnhrdJZ"/>
    <sourcecode value=":&#xa;si=self.machine.getRegister('SI')&#xa;di=self.machine.getRegister('DI')&#xa;self.machine.setMemoryAddress(di,&#xa;self.machine.getFromMemoryAddress(si))self.machine.setMemoryAddress(di+1,&#xa;self.machine.getFromMemoryAddress(si+1))newSiVal=si-2 if self.machine.getFlag('D')else si+2&#xa;self.machine.setRegister('SI',newSiVal)&#xa;" id="jUYgtQ8w4EoM"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;result=-self.machine.getRegister(command[1])&#xa;self.machine.setRegister(command[1],result)&#xa;self.machine.setFlag('P',result%2)&#xa;self.machine.setFlag('S',result&lt;0)&#xa;self.machine.setFlag('Z',result==0)&#xa;" id="gpUQRr2SJYX1"/>
    <sourcecode value=":&#xa;argType=self.testArgument(command,1,i,[self._REG,self._MEM])&#xa;if argType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;self.setValue(command[1],argType,~self.getValue(command[1],argType))&#xa;" id="pdmcySpBBTfP"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,2,i,(self._IMMED,&#xa;self._REG,self._MEM))if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;t=self.getValue(command[2],argumentType)&#xa;argumentType=self.testArgument(command,1,i,(self._REG,self._MEM))&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;result=self.getValue(command[1],argumentType)|t&#xa;self.setValue(command[1],argumentType,result)&#xa;self.machine.setFlag('P',result%2)&#xa;self.machine.setFlag('S',result&lt;0)&#xa;self.machine.setFlag('Z',result==0)&#xa;self.machine.setFlag('O',0)&#xa;self.machine.setFlag('C',0)&#xa;" id="z3Hg77MfnBMu"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;self.machine.setRegister(command[1],int(self.machine.popFromStack()))&#xa;self.machine.setRegister('SP',self.machine.getRegister('SP')+2)&#xa;" id="pwqPXZ6DcSgo"/>
    <sourcecode value=":&#xa;flags=self.machine.popFromStack()&#xa;self.machine.setFlag('C',flags%2)&#xa;flags/=4&#xa;self.machine.setFlag('P',flags%2)&#xa;flags/=4&#xa;self.machine.setFlag('A',flags%2)&#xa;flags/=4&#xa;self.machine.setFlag('Z',flags%2)&#xa;flags/=2&#xa;self.machine.setFlag('S',flags%2)&#xa;self.machine.setRegister('SP',self.machine.getRegister('SP')+2)&#xa;" id="WhfTwhxipa6P"/>
    <sourcecode value=":&#xa;argType=self.testArgument(command,1,i,[self._REG,&#xa;self._MEM,self._IMMED])if argType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;self.machine.addToStack(self.getValue(command[1],argType))&#xa;self.machine.setRegister('SP',self.machine.getRegister('SP')-2)&#xa;" id="UO2WX1SPu86Q"/>
    <sourcecode value=":&#xa;flags=self.machine.getFlag('S')*(128)&#xa;flags+=self.machine.getFlag('Z')*(64)&#xa;flags+=self.machine.getFlag('A')*(16)&#xa;flags+=self.machine.getFlag('P')*(4)&#xa;flags+=self.machine.getFlag('C')&#xa;self.machine.addToStack(flags)&#xa;self.machine.setRegister('SP',self.machine.getRegister('SP')-2)&#xa;" id="Q0fjR9Yu8lHB"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;reg=self.machine.getRegister(command[1])&#xa;temp=reg&lt;0&#xa;if temp:&#xa;  reg+=2**16&#xa;&#xa;reg=reg&lt;&lt;1&#xa;reg+=self.machine.getFlag('C')&#xa;while reg>=2**15:&#xa;  reg-=2**16&#xa;&#xa;self.machine.setRegister(command[1],reg)&#xa;self.machine.setFlag('C',temp)&#xa;" id="P3RComOgeXhI"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;reg=self.machine.getRegister(command[1])&#xa;temp=reg%2&#xa;if reg&lt;0:&#xa;  reg+=2**16&#xa;&#xa;reg=reg>>1&#xa;while reg>=2**15:&#xa;  reg-=2**16&#xa;&#xa;if self.machine.getFlag('C'):&#xa;  reg-=2**15&#xa;&#xa;self.machine.setRegister(command[1],reg)&#xa;self.machine.setFlag('C',temp)&#xa;" id="LJQaomc4WIwl"/>
    <sourcecode value=":&#xa;if command[1]in[&quot;MOVS&quot;,&quot;MOVSB&quot;,&quot;CMPS&quot;,&quot;CMPSB&quot;,&quot;CMPSW&quot;,&quot;SCAS&quot;,&#xa;&quot;SCASB&quot;,&quot;SCASW&quot;,&quot;STOS&quot;,&quot;STOSB&quot;,&quot;STOSW&quot;,&quot;LODS&quot;,&quot;LODSB&quot;,&quot;LODSW&quot;]:&#xa;  while self.machine.getRegister('CX')>0:&#xa;    self.getFunctionTable()[command[1:],i]&#xa;    self.machine.setRegister('CX',&#xa;    self.machine.getRegister('CX')-1)&#xa;&#xa;else:&#xa;  self.machine.stopRunning(-1)&#xa;  return&quot;Innapropriate command used with REP on line &quot;+str(i)&#xa;&#xa;" id="9EQhBo4toS46"/>
    <sourcecode value=":&#xa;if command[1]in[&quot;CMPS&quot;,&quot;CMPSB&quot;,&quot;CMPSW&quot;,&quot;SCAS&quot;,&quot;SCASB&quot;,&quot;SCASW&quot;]:&#xa;  while self.machine.getFlag(&quot;Z&quot;)and\&#xa;  self.machine.getRegister('CX')>0:&#xa;    self.getFunctionTable()[command[1:],i]&#xa;    self.machine.setRegister('CX',&#xa;    self.machine.getRegister('CX')-1)&#xa;&#xa;else:&#xa;  self.machine.stopRunning(-1)&#xa;  return&quot;Innapropriate command used with &quot;+command[0]+\&#xa;  &quot; on line &quot;+str(i)&#xa;" id="gU81A5Vb6ttV"/>
    <sourcecode value=":&#xa;if command[1]in[&quot;CMPS&quot;,&quot;CMPSB&quot;,&quot;CMPSW&quot;,&quot;SCAS&quot;,&quot;SCASB&quot;,&quot;SCASW&quot;]:&#xa;  while not self.machine.getFlag(&quot;Z&quot;)and\&#xa;  self.machine.getRegister('CX')>0:&#xa;    self.getFunctionTable()[command[1:],i]&#xa;    self.machine.setRegister('CX',&#xa;    self.machine.getRegister('CX')-1)&#xa;&#xa;else:&#xa;  self.machine.stopRunning(-1)&#xa;  return&quot;Innapropriate command used with &quot;+command[0]+\&#xa;  &quot; on line &quot;+str(i)&#xa;" id="bbpmih7u43AJ"/>
    <sourcecode value=":&#xa;self.REPNE(command,i)&#xa;" id="8tf6DOlBEJG7"/>
    <sourcecode value=":&#xa;self.REPE(command,i)&#xa;" id="nHq7jBdaEKeb"/>
    <sourcecode value=":&#xa;if self.machine.stackSize()==0:&#xa;  self.machine.stopRunning(-1)&#xa;  return&quot;Fatal Error: The stack is empty and RET was called, there\;&#xa;" id="nm7I0lUOzH1Y"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;reg=self.machine.getRegister(command[1])&#xa;temp=reg&lt;0&#xa;if temp:&#xa;  reg+=2**16&#xa;&#xa;reg=reg&lt;&lt;1&#xa;while reg>=2**15:&#xa;  reg-=2**16&#xa;&#xa;reg+=temp&#xa;self.machine.setRegister(command[1],reg)&#xa;self.machine.setFlag('C',temp)&#xa;" id="FrOdU40qFk8g"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;reg=self.machine.getRegister(command[1])&#xa;temp=reg%2&#xa;while reg&lt;0:&#xa;  reg+=2**16&#xa;&#xa;reg=reg>>1&#xa;if reg>=2**15:&#xa;  reg-=2**16&#xa;&#xa;reg-=temp*2**15&#xa;self.machine.setRegister(command[1],reg)&#xa;self.machine.setFlag('C',temp)&#xa;" id="WVsgnbK9Ikjj"/>
    <sourcecode value=":&#xa;flags=self.machine.getEightBitRegister('AH')&#xa;for f in['C','P','A','Z','S','I','D','O']:&#xa;  self.machine.setFlags(f,flags%2)&#xa;  flags/=2&#xa;&#xa;" id="04txdHfnvUDM"/>
    <sourcecode value=":&#xa;self.SHL(self,command,i)&#xa;" id="wOkn15Ku4ZjX"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;reg=self.machine.getRegister(command[1])&#xa;temp=reg&lt;0&#xa;self.machine.setFlag('C',reg%2)&#xa;if temp:&#xa;  reg+=2**16&#xa;&#xa;reg=reg>>1&#xa;while reg>=2**15:&#xa;  reg-=2**16&#xa;&#xa;reg-=temp*2**15&#xa;self.machine.setRegister(command[1],reg)&#xa;" id="Sl9I647VEqwy"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG,self._MEM])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;argumentType=self.testArgument(command,2,i,[self._REG,self._MEM,&#xa;self._IMMED])if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;self.ADD(command,i,carry=True)&#xa;" id="JH7zRIjdZx1f"/>
    <sourcecode value=":&#xa;di=self.machine.getRegister('DI')&#xa;self.SUB(['SCASB',str(self.machine.getEightBitRegister('AL')),&#xa;str(self.machine.getFromMemoryAddress(di))],i,inPlace=True)newDiVal=di-1 if self.machine.getFlag('D')else di+1&#xa;self.machine.setRegister('DI',newDiVal)&#xa;" id="N2UOKGqrmrwD"/>
    <sourcecode value=":&#xa;di=self.machine.getRegister('DI')&#xa;word=self.machine.getFromMemoryAddress(di+1)&#xa;word+=256*self.machine.getFromMemoryAddress(di)&#xa;self.SUB(['SCASW',str(self.machine.getRegister('AX')),str(word)],i,&#xa;inPlace=True)newDiVal=di-2 if self.machine.getFlag('D')else di+2&#xa;self.machine.setRegister('DI',newDiVal)&#xa;" id="SVXlL9NQWoHl"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;reg=self.machine.getRegister(command[1])&#xa;temp=reg&lt;0&#xa;if temp:&#xa;  reg+=2**16&#xa;&#xa;reg=reg&lt;&lt;1&#xa;if reg>=2**15:&#xa;  reg-=2**16&#xa;&#xa;self.machine.setRegister(command[1],reg)&#xa;self.machine.setFlag('C',temp)&#xa;" id="H0Tk7rZMan75"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,[self._REG])&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;reg=self.machine.getRegister(command[1])&#xa;temp=reg%2&#xa;if reg&lt;0:&#xa;  reg+=2**16&#xa;&#xa;reg=reg>>1&#xa;if reg>=2**15:&#xa;  reg-=2**16&#xa;&#xa;self.machine.setRegister(command[1],reg)&#xa;self.machine.setFlag('C',temp)&#xa;" id="YxfShxSIkoTK"/>
    <sourcecode value=":&#xa;self.machine.setFlag(&quot;C&quot;)&#xa;" id="PdoitMi1K0u4"/>
    <sourcecode value=":&#xa;self.machine.setFlag(&quot;D&quot;)&#xa;" id="tYxwA8o70jNr"/>
    <sourcecode value=":&#xa;self.machine.setFlag(&quot;I&quot;)&#xa;" id="ozdbLuZn0eEn"/>
    <sourcecode value=":&#xa;di=self.machine.getRegister('DI')&#xa;self.machine.setMemoryAddress(di,&#xa;chr(self.machine.getEightBitRegister(&quot;AL&quot;)))newDiVal=di-1 if self.machine.getFlag('D')else di+1&#xa;self.machine.setRegister('DI',newDiVal)&#xa;" id="ZGfBSc9Y7scD"/>
    <sourcecode value=":&#xa;di=self.machine.getRegister(&quot;DI&quot;)&#xa;self.machine.setMemoryAddress(di,&#xa;chr(self.machine.getEightBitRegister(&quot;AH&quot;)))self.machine.setMemoryAddress(di+1,&#xa;chr(self.machine.getEightBitRegister(&quot;AL&quot;)))newDiVal=di-2 if self.machine.getFlag('D')else di+2&#xa;self.machine.setRegister('DI',newDiVal)&#xa;" id="6w49s6eRHh3K"/>
    <sourcecode value=":&#xa;self.ADD(command,i,inPlace=inPlace)&#xa;" id="j8aNONullqMp"/>
    <sourcecode value=":&#xa;if self.machine.stackSize()==0:&#xa;  self.machine.stopRunning(-1)&#xa;  return&quot;Invalid system trap: SYS called on line %d without any \;&#xa;" id="joejYa0M8p0G"/>
    <sourcecode value=":&#xa;argType1=self.testArgument(command,1,i,[self._REG])&#xa;if argType1==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;argType2=self.testArgument(command,2,i,[self._REG])&#xa;if argType2==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;if argType1==argType2==self._REG:&#xa;  temp=self.machine.getRegister(command[1])&#xa;  self.machine.setRegister(command[1],&#xa;  self.machine.getRegister(command[2]))self.machine.setRegister(command[2],temp)&#xa;&#xa;" id="iSXkweFxj95b"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,2,i,(self._IMMED,&#xa;self._REG,self._MEM))if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;t=self.getValue(command[2],argumentType)&#xa;argumentType=self.testArgument(command,1,i,(self._REG,self._MEM))&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;result=self.getValue(command[1],argumentType)^t&#xa;self.setValue(command[1],argumentType,result)&#xa;self.machine.setFlag('Z',result==0)&#xa;self.machine.setFlag('S',result&lt;0)&#xa;self.machine.setFlag('P',result%2)&#xa;self.machine.setFlag('O',0)&#xa;self.machine.setFlag('C',0)&#xa;" id="HtgNFcNFnJw3"/>
    <sourcecode value=":&#xa;argumentType=self.testArgument(command,1,i,(self._REG,self._MEM))&#xa;if argumentType==self._ERROR:&#xa;  return self.ERRSTR&#xa;&#xa;result=self.getValue(command[1],argumentType)+p&#xa;self.setValue(command[1],argumentType,result)&#xa;" id="KsyBiaI9YbMo"/>
    <sourcecode value=":&#xa;if flag:&#xa;  self.JMP(command,i)&#xa;&#xa;" id="3MShPQU8bazk"/>
    <sourcecode value=":&#xa;if self._REG in argList:&#xa;  if command[numArg]in self.machine.getRegisterNames():&#xa;    return self._REG&#xa;&#xa;&#xa;if self._MEM in argList:&#xa;  if self.machine.inBSSKeys(command[numArg]):&#xa;    return self._BSS&#xa;&#xa;  elif self.machine.inDATAKeys(command[numArg]):&#xa;    return self._DATA&#xa;&#xa;&#xa;if self._REG8 in argList:&#xa;  if command[numArg]in self.machine.getEightBitRegisterNames():&#xa;    return self._REG8&#xa;&#xa;&#xa;if self._IMMED in argList:&#xa;  if self.machine.isLocalVar(command[numArg]):&#xa;    return self._LOCALVAR&#xa;&#xa;  elif self.machine.isHex(command[numArg]):&#xa;    if command[numArg][-1]==&quot;h&quot;:&#xa;      return self._HEX&#xa;&#xa;    else:&#xa;      return self._INT&#xa;&#xa;&#xa;  elif len(command[numArg])>=3 and(&#xa;  (command[numArg][0]=='&quot;'and command[numArg][-1]=='&quot;')\or(command[numArg][0]==&quot;'&quot;and command[numArg][-1]==&quot;'&quot;)):&#xa;    try:&#xa;      ord(command[numArg].lstrip(&quot;'\&quot;&quot;).rstrip(&quot;'\&quot;&quot;))&#xa;      return self._CHAR&#xa;&#xa;    except TypeError:&#xa;&#xa;&#xa;  if self._LABEL in argList:&#xa;    if command[numArg]in self.machine.getLookupTable():&#xa;      return self._LABEL&#xa;&#xa;&#xa;  if automaticErrors:&#xa;    self.wrongArgsError(command,i,argList,numArg)&#xa;&#xa;  return self._ERROR&#xa;&#xa;def getValue(self,arg,argumentType):&#xa;  if argumentType==self._REG8:&#xa;    return self.machine.getEightBitRegister(arg)&#xa;&#xa;  elif argumentType==self._REG:&#xa;    return self.machine.getRegister(arg)&#xa;&#xa;  elif argumentType==self._IMMED:&#xa;    return arg&#xa;&#xa;  elif argumentType==self._HEX:&#xa;    return int(arg[:-1],16)&#xa;&#xa;  elif argumentType==self._INT:&#xa;    return int(arg)&#xa;&#xa;  elif argumentType==self._LOCALVAR:&#xa;    return int(self.machine.getLocalVar(arg))&#xa;&#xa;  elif argumentType==self._BSS:&#xa;    return int(self.machine.getFromBSS(arg,0))&#xa;&#xa;  elif argumentType==self._DATA:&#xa;    return int(self.machine.getFromDATA(arg,0))&#xa;&#xa;  elif argumentType==self._LABEL:&#xa;    return self.machine.getLabelFromLookupTable(arg)&#xa;&#xa;  elif argumentType==self._CHAR:&#xa;    return ord(arg.strip(&quot;'&quot;).strip('&quot;'))&#xa;&#xa;&#xa;def setValue(self,arg,argType,to):&#xa;  if argType==self._REG8:&#xa;    if to>=256:&#xa;      while to>=256:&#xa;        to-=512&#xa;&#xa;      self.machine.setFlag('O')&#xa;&#xa;    elif to&lt;-256:&#xa;      while to&lt;-256:&#xa;        to+=512&#xa;&#xa;      self.machine.setFlag('O')&#xa;&#xa;    self.machine.setEightBitRegister(arg,to)&#xa;&#xa;  elif argType==self._REG:&#xa;    if to>=2**15:&#xa;      while to>=2**15:&#xa;        to-=2**16&#xa;&#xa;      self.machine.setFlag('O')&#xa;&#xa;    elif to&lt;-2**15:&#xa;      while to&lt;-2**15:&#xa;        to+=2**16&#xa;&#xa;      self.machine.setFlag('O')&#xa;&#xa;    self.machine.setRegister(arg,to)&#xa;&#xa;  elif argType==self._BSS:&#xa;    if to>=256:&#xa;      while to>=256:&#xa;        to-=512&#xa;&#xa;      self.machine.setFlag('O')&#xa;&#xa;    elif to&lt;-256:&#xa;      while to&lt;-256:&#xa;        to+=512&#xa;&#xa;      self.machine.setFlag('O')&#xa;&#xa;    self.machine.setMemoryAddress(self.machine.getFromBSS(arg,0),to)&#xa;&#xa;  elif argType==self._DATA:&#xa;    if to>=256:&#xa;      while to>=256:&#xa;        to-=512&#xa;&#xa;      self.machine.setFlag('O')&#xa;&#xa;    elif to&lt;-256:&#xa;      while to&lt;-256:&#xa;        to+=512&#xa;&#xa;      self.machine.setFlag('O')&#xa;&#xa;    self.machine.setMemoryAddress(self.machine.getFromDATA(arg,0),to)&#xa;&#xa;&#xa;def wrongArgsError(self,command,i,args,numArg):&#xa;  print&quot;Wrong args error!!!&quot;&#xa;  argList=[]&#xa;  if self._REG in args:&#xa;    argList.append(&quot;16 bit register&quot;)&#xa;&#xa;  if self._REG8 in args:&#xa;    argList.append(&quot;8 bit register&quot;)&#xa;&#xa;  if self._IMMED in args:&#xa;    argList.append(&quot;number&quot;)&#xa;    argList.append(&quot;local variable&quot;)&#xa;    argList.append(&quot;single character&quot;)&#xa;&#xa;  if self._MEM in args:&#xa;    argList.append(&quot;memory location&quot;)&#xa;&#xa;  if self._LABEL in args:&#xa;    argList.append(&quot;jump label&quot;)&#xa;&#xa;  if len(argList)>1:&#xa;    argStr=&quot;, &quot;.join(argList[:-1])&#xa;    argStr+=&quot;, or a &quot;+argList[-1]&#xa;&#xa;  self.machine.stopRunning(-1)&#xa;  if len(argList)==0:&#xa;    self.ERRSTR=&quot;Error on line %s. %s expected no arguments! \;&#xa;&#xa;Received%s.&quot; % command[numArg];else:&#xa;  self.ERRSTR=&quot;Error on line %s. %s expected %s %s as a %s \;&#xa;argument.Received\&quot;%s\&quot;.&quot;%(i,command[0],&quot;either a&quot;*(len(argList)>1),&#xa;argStr,&quot;first&quot;if numArg==1 else&quot;second&quot;,command[numArg])" id="7LPJP8OOh2pg"/>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
